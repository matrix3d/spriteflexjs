/**
 * Generated by Apache Royale Compiler from Box2D/Collision/Shapes/b2Shape.as
 * Box2D.Collision.Shapes.b2Shape
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Collision.Shapes.b2Shape');
/* Royale Dependency List: Box2D.Collision.Shapes.b2MassData,Box2D.Collision.b2AABB,Box2D.Collision.b2RayCastInput,Box2D.Collision.b2RayCastOutput,Box2D.Common.Math.b2Transform,Box2D.Common.Math.b2Vec2,Box2D.Common.b2Settings*/




/**
 * @asprivate
 * @constructor
 */
Box2D.Collision.Shapes.b2Shape = function() {
  this.m_type = Box2D.Collision.Shapes.b2Shape.e_unknownShape;
  this.m_radius = Box2D.Common.b2Settings.b2_linearSlop;
};


/**
 * Clone the shape
 * @return {Box2D.Collision.Shapes.b2Shape}
 */
Box2D.Collision.Shapes.b2Shape.prototype.Copy = function() {
  return null;
};


/**
 * Assign the properties of anther shape to this
 * @param {Box2D.Collision.Shapes.b2Shape} other
 */
Box2D.Collision.Shapes.b2Shape.prototype.Set = function(other) {
  this.m_radius = other.m_radius;
};


/**
 * Get the type of this shape. You can use this to down cast to the concrete shape.
 * @asreturn the shape type.
 * @return {number}
 */
Box2D.Collision.Shapes.b2Shape.prototype.GetType = function() {
  return this.m_type;
};


/**
 * Test a point for containment in this shape. This only works for convex shapes.
 * @asparam xf the shape world transform.
 * @asparam p a point in world coordinates.
 * @param {Box2D.Common.Math.b2Transform} xf
 * @param {Box2D.Common.Math.b2Vec2} p
 * @return {boolean}
 */
Box2D.Collision.Shapes.b2Shape.prototype.TestPoint = function(xf, p) {
  return false;
};


/**
 * Cast a ray against this shape.
 * @asparam output the ray-cast results.
 * @asparam input the ray-cast input parameters.
 * @asparam transform the transform to be applied to the shape.
 * @param {Box2D.Collision.b2RayCastOutput} output
 * @param {Box2D.Collision.b2RayCastInput} input
 * @param {Box2D.Common.Math.b2Transform} transform
 * @return {boolean}
 */
Box2D.Collision.Shapes.b2Shape.prototype.RayCast = function(output, input, transform) {
  return false;
};


/**
 * Given a transform, compute the associated axis aligned bounding box for this shape.
 * @asparam aabb returns the axis aligned box.
 * @asparam xf the world transform of the shape.
 * @param {Box2D.Collision.b2AABB} aabb
 * @param {Box2D.Common.Math.b2Transform} xf
 */
Box2D.Collision.Shapes.b2Shape.prototype.ComputeAABB = function(aabb, xf) {
};


/**
 * Compute the mass properties of this shape using its dimensions and density.
 * The inertia tensor is computed about the local origin, not the centroid.
 * @asparam massData returns the mass data for this shape.
 * @param {Box2D.Collision.Shapes.b2MassData} massData
 * @param {number} density
 */
Box2D.Collision.Shapes.b2Shape.prototype.ComputeMass = function(massData, density) {
};


/**
 * Compute the volume and centroid of this shape intersected with a half plane
 * @asparam normal the surface normal
 * @asparam offset the surface offset along normal
 * @asparam xf the shape transform
 * @asparam c returns the centroid
 * @asreturn the total volume less than offset along normal
 * @param {Box2D.Common.Math.b2Vec2} normal
 * @param {number} offset
 * @param {Box2D.Common.Math.b2Transform} xf
 * @param {Box2D.Common.Math.b2Vec2} c
 * @return {number}
 */
Box2D.Collision.Shapes.b2Shape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
  return 0;
};


/**
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.prototype.m_type = 0;


/**
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.prototype.m_radius = NaN;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_unknownShape = -1;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_circleShape = 0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_polygonShape = 1;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_edgeShape = 2;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount = 3;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = -1;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Collision.Shapes.b2Shape.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Shape', qName: 'Box2D.Collision.Shapes.b2Shape', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Collision.Shapes.b2Shape.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'm_type': { type: 'int', get_set: function (/** Box2D.Collision.Shapes.b2Shape */ inst, /** * */ v) {return v !== undefined ? inst.m_type = v : inst.m_type;}},
        'm_radius': { type: 'Number', get_set: function (/** Box2D.Collision.Shapes.b2Shape */ inst, /** * */ v) {return v !== undefined ? inst.m_radius = v : inst.m_radius;}}
      };
    },
    methods: function () {
      return {
        'Copy': { type: 'Box2D.Collision.Shapes.b2Shape', declaredBy: 'Box2D.Collision.Shapes.b2Shape'},
        'Set': { type: 'void', declaredBy: 'Box2D.Collision.Shapes.b2Shape', parameters: function () { return [ 'Box2D.Collision.Shapes.b2Shape', false ]; }},
        'GetType': { type: 'int', declaredBy: 'Box2D.Collision.Shapes.b2Shape'},
        'TestPoint': { type: 'Boolean', declaredBy: 'Box2D.Collision.Shapes.b2Shape', parameters: function () { return [ 'Box2D.Common.Math.b2Transform', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        'RayCast': { type: 'Boolean', declaredBy: 'Box2D.Collision.Shapes.b2Shape', parameters: function () { return [ 'Box2D.Collision.b2RayCastOutput', false ,'Box2D.Collision.b2RayCastInput', false ,'Box2D.Common.Math.b2Transform', false ]; }},
        'ComputeAABB': { type: 'void', declaredBy: 'Box2D.Collision.Shapes.b2Shape', parameters: function () { return [ 'Box2D.Collision.b2AABB', false ,'Box2D.Common.Math.b2Transform', false ]; }},
        'ComputeMass': { type: 'void', declaredBy: 'Box2D.Collision.Shapes.b2Shape', parameters: function () { return [ 'Box2D.Collision.Shapes.b2MassData', false ,'Number', false ]; }},
        'ComputeSubmergedArea': { type: 'Number', declaredBy: 'Box2D.Collision.Shapes.b2Shape', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Number', false ,'Box2D.Common.Math.b2Transform', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        'b2Shape': { type: '', declaredBy: 'Box2D.Collision.Shapes.b2Shape'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2Shape.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Collision.Shapes.b2Shape.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Collision.Shapes.b2Shape);
