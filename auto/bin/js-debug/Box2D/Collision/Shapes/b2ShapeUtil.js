/**
 * Generated by Apache Royale Compiler from Box2D/Collision/Shapes/b2ShapeUtil.as
 * Box2D.Collision.Shapes.b2ShapeUtil
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Collision.Shapes.b2ShapeUtil');
/* Royale Dependency List: Box2D.Collision.Shapes.b2Shape,Box2D.Collision.b2Distance,Box2D.Collision.b2DistanceInput,Box2D.Collision.b2DistanceOutput,Box2D.Collision.b2DistanceProxy,Box2D.Collision.b2SimplexCache,Box2D.Common.Math.b2Transform*/




/**
 * @constructor
 */
Box2D.Collision.Shapes.b2ShapeUtil = function() {
};


/**
 * @nocollapse
 * @param {Box2D.Collision.Shapes.b2Shape} shape1
 * @param {Box2D.Common.Math.b2Transform} transform1
 * @param {Box2D.Collision.Shapes.b2Shape} shape2
 * @param {Box2D.Common.Math.b2Transform} transform2
 * @return {boolean}
 */
Box2D.Collision.Shapes.b2ShapeUtil.TestOverlap = function(shape1, transform1, shape2, transform2) {
  var /** @type {Box2D.Collision.b2DistanceInput} */ input = new Box2D.Collision.b2DistanceInput();
  input.proxyA = new Box2D.Collision.b2DistanceProxy();
  input.proxyA.Set(shape1);
  input.proxyB = new Box2D.Collision.b2DistanceProxy();
  input.proxyB.Set(shape2);
  input.transformA = transform1;
  input.transformB = transform2;
  input.useRadii = true;
  var /** @type {Box2D.Collision.b2SimplexCache} */ simplexCache = new Box2D.Collision.b2SimplexCache();
  simplexCache.count = 0;
  var /** @type {Box2D.Collision.b2DistanceOutput} */ output = new Box2D.Collision.b2DistanceOutput();
  Box2D.Collision.b2Distance.Distance(output, simplexCache, input);
  return output.distance < 10.0 * Number.MIN_VALUE;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Collision.Shapes.b2ShapeUtil.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2ShapeUtil', qName: 'Box2D.Collision.Shapes.b2ShapeUtil', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Collision.Shapes.b2ShapeUtil.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'b2ShapeUtil': { type: '', declaredBy: 'Box2D.Collision.Shapes.b2ShapeUtil'},
        '|TestOverlap': { type: 'Boolean', declaredBy: 'Box2D.Collision.Shapes.b2ShapeUtil', parameters: function () { return [ 'Box2D.Collision.Shapes.b2Shape', false ,'Box2D.Common.Math.b2Transform', false ,'Box2D.Collision.Shapes.b2Shape', false ,'Box2D.Common.Math.b2Transform', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Collision.Shapes.b2ShapeUtil.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Collision.Shapes.b2ShapeUtil.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Collision.Shapes.b2ShapeUtil);
