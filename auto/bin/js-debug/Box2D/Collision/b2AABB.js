/**
 * Generated by Apache Royale Compiler from Box2D/Collision/b2AABB.as
 * Box2D.Collision.b2AABB
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Collision.b2AABB');
/* Royale Dependency List: Box2D.Collision.b2RayCastInput,Box2D.Collision.b2RayCastOutput,Box2D.Common.Math.b2Vec2*/




/**
 * @constructor
 */
Box2D.Collision.b2AABB = function() {

this.lowerBound = new Box2D.Common.Math.b2Vec2();
this.upperBound = new Box2D.Common.Math.b2Vec2();
};


/**
 * Verify that the bounds are sorted.
 * @return {boolean}
 */
Box2D.Collision.b2AABB.prototype.IsValid = function() {
  var /** @type {number} */ dX = this.upperBound.x - this.lowerBound.x;
  var /** @type {number} */ dY = this.upperBound.y - this.lowerBound.y;
  var /** @type {boolean} */ valid = dX >= 0.0 && dY >= 0.0;
  valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();
  return valid;
};


/** Get the center of the AABB. 
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2AABB.prototype.GetCenter = function() {
  return new Box2D.Common.Math.b2Vec2((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);
};


/** Get the extents of the AABB (half-widths). 
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2AABB.prototype.GetExtents = function() {
  return new Box2D.Common.Math.b2Vec2((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);
};


/**
 * Is an AABB contained within this one.
 * @param {Box2D.Collision.b2AABB} aabb
 * @return {boolean}
 */
Box2D.Collision.b2AABB.prototype.Contains = function(aabb) {
  var /** @type {boolean} */ result = true;
  result = result && this.lowerBound.x <= aabb.lowerBound.x;
  result = result && this.lowerBound.y <= aabb.lowerBound.y;
  result = result && aabb.upperBound.x <= this.upperBound.x;
  result = result && aabb.upperBound.y <= this.upperBound.y;
  return result;
};


/**
 * Perform a precise raycast against the AABB.
 * @param {Box2D.Collision.b2RayCastOutput} output
 * @param {Box2D.Collision.b2RayCastInput} input
 * @return {boolean}
 */
Box2D.Collision.b2AABB.prototype.RayCast = function(output, input) {
  var /** @type {number} */ inv_d = NaN;
  var /** @type {number} */ s = NaN;
  var /** @type {number} */ t1 = NaN;
  var /** @type {number} */ t2 = NaN;
  var /** @type {number} */ t3 = NaN;
  var /** @type {number} */ tmin = -Number.MAX_VALUE;
  var /** @type {number} */ tmax = Number.MAX_VALUE;
  var /** @type {number} */ pX = input.p1.x;
  var /** @type {number} */ pY = input.p1.y;
  var /** @type {number} */ dX = input.p2.x - input.p1.x;
  var /** @type {number} */ dY = input.p2.y - input.p1.y;
  var /** @type {number} */ absDX = Math.abs(dX);
  var /** @type {number} */ absDY = Math.abs(dY);
  var /** @type {Box2D.Common.Math.b2Vec2} */ normal = output.normal;
  //var /** @type {number} */ inv_d = NaN;
  //var /** @type {number} */ t1 = NaN;
  //var /** @type {number} */ t2 = NaN;
  //var /** @type {number} */ t3 = NaN;
  //var /** @type {number} */ s = NaN;
  if (absDX < Number.MIN_VALUE) {
    if (pX < this.lowerBound.x || this.upperBound.x < pX)
      return false;
  } else {
    inv_d = 1.0 / dX;
    t1 = (this.lowerBound.x - pX) * inv_d;
    t2 = (this.upperBound.x - pX) * inv_d;
    s = -1.0;
    if (t1 > t2) {
      t3 = t1;
      t1 = t2;
      t2 = t3;
      s = 1.0;
    }
    if (t1 > tmin) {
      normal.x = s;
      normal.y = 0;
      tmin = t1;
    }
    tmax = Math.min(tmax, t2);
    if (tmin > tmax)
      return false;
  }
  if (absDY < Number.MIN_VALUE) {
    if (pY < this.lowerBound.y || this.upperBound.y < pY)
      return false;
  } else {
    inv_d = 1.0 / dY;
    t1 = (this.lowerBound.y - pY) * inv_d;
    t2 = (this.upperBound.y - pY) * inv_d;
    s = -1.0;
    if (t1 > t2) {
      t3 = t1;
      t1 = t2;
      t2 = t3;
      s = 1.0;
    }
    if (t1 > tmin) {
      normal.y = s;
      normal.x = 0;
      tmin = t1;
    }
    tmax = Math.min(tmax, t2);
    if (tmin > tmax)
      return false;
  }
  output.fraction = tmin;
  return true;
};


/**
 * Tests if another AABB overlaps this one.
 * @param {Box2D.Collision.b2AABB} other
 * @return {boolean}
 */
Box2D.Collision.b2AABB.prototype.TestOverlap = function(other) {
  var /** @type {number} */ d1X = other.lowerBound.x - this.upperBound.x;
  var /** @type {number} */ d1Y = other.lowerBound.y - this.upperBound.y;
  var /** @type {number} */ d2X = this.lowerBound.x - other.upperBound.x;
  var /** @type {number} */ d2Y = this.lowerBound.y - other.upperBound.y;
  if (d1X > 0.0 || d1Y > 0.0)
    return false;
  if (d2X > 0.0 || d2Y > 0.0)
    return false;
  return true;
};


/** Combine two AABBs into one. 
 * @nocollapse
 * @param {Box2D.Collision.b2AABB} aabb1
 * @param {Box2D.Collision.b2AABB} aabb2
 * @return {Box2D.Collision.b2AABB}
 */
Box2D.Collision.b2AABB.Combine2 = function(aabb1, aabb2) {
  var /** @type {Box2D.Collision.b2AABB} */ aabb = new Box2D.Collision.b2AABB();
  aabb.Combine(aabb1, aabb2);
  return aabb;
};


/** Combine two AABBs into one. 
 * @param {Box2D.Collision.b2AABB} aabb1
 * @param {Box2D.Collision.b2AABB} aabb2
 */
Box2D.Collision.b2AABB.prototype.Combine = function(aabb1, aabb2) {
  this.lowerBound.x = Math.min(aabb1.lowerBound.x, aabb2.lowerBound.x);
  this.lowerBound.y = Math.min(aabb1.lowerBound.y, aabb2.lowerBound.y);
  this.upperBound.x = Math.max(aabb1.upperBound.x, aabb2.upperBound.x);
  this.upperBound.y = Math.max(aabb1.upperBound.y, aabb2.upperBound.y);
};


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2AABB.prototype.lowerBound = null;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2AABB.prototype.upperBound = null;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Collision.b2AABB.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2AABB', qName: 'Box2D.Collision.b2AABB', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Collision.b2AABB.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'lowerBound': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Collision.b2AABB */ inst, /** * */ v) {return v !== undefined ? inst.lowerBound = v : inst.lowerBound;}},
        'upperBound': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Collision.b2AABB */ inst, /** * */ v) {return v !== undefined ? inst.upperBound = v : inst.upperBound;}}
      };
    },
    methods: function () {
      return {
        'IsValid': { type: 'Boolean', declaredBy: 'Box2D.Collision.b2AABB'},
        'GetCenter': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Collision.b2AABB'},
        'GetExtents': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Collision.b2AABB'},
        'Contains': { type: 'Boolean', declaredBy: 'Box2D.Collision.b2AABB', parameters: function () { return [ 'Box2D.Collision.b2AABB', false ]; }},
        'RayCast': { type: 'Boolean', declaredBy: 'Box2D.Collision.b2AABB', parameters: function () { return [ 'Box2D.Collision.b2RayCastOutput', false ,'Box2D.Collision.b2RayCastInput', false ]; }},
        'TestOverlap': { type: 'Boolean', declaredBy: 'Box2D.Collision.b2AABB', parameters: function () { return [ 'Box2D.Collision.b2AABB', false ]; }},
        '|Combine2': { type: 'Box2D.Collision.b2AABB', declaredBy: 'Box2D.Collision.b2AABB', parameters: function () { return [ 'Box2D.Collision.b2AABB', false ,'Box2D.Collision.b2AABB', false ]; }},
        'Combine': { type: 'void', declaredBy: 'Box2D.Collision.b2AABB', parameters: function () { return [ 'Box2D.Collision.b2AABB', false ,'Box2D.Collision.b2AABB', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Collision.b2AABB.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Collision.b2AABB.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Collision.b2AABB);
