/**
 * Generated by Apache Royale Compiler from Box2D/Collision/b2ContactPoint.as
 * Box2D.Collision.b2ContactPoint
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Collision.b2ContactPoint');
/* Royale Dependency List: Box2D.Collision.Shapes.b2Shape,Box2D.Collision.b2ContactID,Box2D.Common.Math.b2Vec2*/




/**
 * @constructor
 */
Box2D.Collision.b2ContactPoint = function() {

this.position = new Box2D.Common.Math.b2Vec2();
this.velocity = new Box2D.Common.Math.b2Vec2();
this.normal = new Box2D.Common.Math.b2Vec2();
this.id = new Box2D.Collision.b2ContactID();
};


/**
 * @type {Box2D.Collision.Shapes.b2Shape}
 */
Box2D.Collision.b2ContactPoint.prototype.shape1 = null;


/**
 * @type {Box2D.Collision.Shapes.b2Shape}
 */
Box2D.Collision.b2ContactPoint.prototype.shape2 = null;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2ContactPoint.prototype.position = null;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2ContactPoint.prototype.velocity = null;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2ContactPoint.prototype.normal = null;


/**
 * @type {number}
 */
Box2D.Collision.b2ContactPoint.prototype.separation = NaN;


/**
 * @type {number}
 */
Box2D.Collision.b2ContactPoint.prototype.friction = NaN;


/**
 * @type {number}
 */
Box2D.Collision.b2ContactPoint.prototype.restitution = NaN;


/**
 * @type {Box2D.Collision.b2ContactID}
 */
Box2D.Collision.b2ContactPoint.prototype.id = null;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Collision.b2ContactPoint.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2ContactPoint', qName: 'Box2D.Collision.b2ContactPoint', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Collision.b2ContactPoint.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'shape1': { type: 'Box2D.Collision.Shapes.b2Shape', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.shape1 = v : inst.shape1;}},
        'shape2': { type: 'Box2D.Collision.Shapes.b2Shape', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.shape2 = v : inst.shape2;}},
        'position': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.position = v : inst.position;}},
        'velocity': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.velocity = v : inst.velocity;}},
        'normal': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.normal = v : inst.normal;}},
        'separation': { type: 'Number', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.separation = v : inst.separation;}},
        'friction': { type: 'Number', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.friction = v : inst.friction;}},
        'restitution': { type: 'Number', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.restitution = v : inst.restitution;}},
        'id': { type: 'Box2D.Collision.b2ContactID', get_set: function (/** Box2D.Collision.b2ContactPoint */ inst, /** * */ v) {return v !== undefined ? inst.id = v : inst.id;}}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Collision.b2ContactPoint.prototype.ROYALE_COMPILE_FLAGS = 9;
