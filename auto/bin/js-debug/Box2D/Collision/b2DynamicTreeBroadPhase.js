/**
 * Generated by Apache Royale Compiler from Box2D/Collision/b2DynamicTreeBroadPhase.as
 * Box2D.Collision.b2DynamicTreeBroadPhase
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Collision.b2DynamicTreeBroadPhase');
/* Royale Dependency List: Box2D.Collision.b2AABB,Box2D.Collision.b2DynamicTree,Box2D.Collision.b2DynamicTreeNode,Box2D.Collision.b2DynamicTreePair,Box2D.Collision.b2RayCastInput,Box2D.Common.Math.b2Vec2,org.apache.royale.utils.Language*/

goog.require('Box2D.Collision.IBroadPhase');



/**
 * @constructor
 * @implements {Box2D.Collision.IBroadPhase}
 */
Box2D.Collision.b2DynamicTreeBroadPhase = function() {

this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree = new Box2D.Collision.b2DynamicTree();
this.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer = new Array();
this.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairBuffer = new Array();
};


/**
 * Create a proxy with an initial AABB. Pairs are not reported until
 * UpdatePairs is called.
 * @param {Box2D.Collision.b2AABB} aabb
 * @param {*} userData
 * @return {*}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.CreateProxy = function(aabb, userData) {
  var /** @type {Box2D.Collision.b2DynamicTreeNode} */ proxy = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.CreateProxy(aabb, userData);
  ++this.Box2D_Collision_b2DynamicTreeBroadPhase_m_proxyCount;
  this.Box2D_Collision_b2DynamicTreeBroadPhase_BufferMove(proxy);
  return proxy;
};


/**
 * Destroy a proxy. It is up to the client to remove any pairs.
 * @param {*} proxy
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.DestroyProxy = function(proxy) {
  this.Box2D_Collision_b2DynamicTreeBroadPhase_UnBufferMove(/* implicit cast */ org.apache.royale.utils.Language.as(proxy, Box2D.Collision.b2DynamicTreeNode, true));
  --this.Box2D_Collision_b2DynamicTreeBroadPhase_m_proxyCount;
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.DestroyProxy(/* implicit cast */ org.apache.royale.utils.Language.as(proxy, Box2D.Collision.b2DynamicTreeNode, true));
};


/**
 * Call MoveProxy as many times as you like, then when you are done
 * call UpdatePairs to finalized the proxy pairs (for your time step).
 * @param {*} proxy
 * @param {Box2D.Collision.b2AABB} aabb
 * @param {Box2D.Common.Math.b2Vec2} displacement
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.MoveProxy = function(proxy, aabb, displacement) {
  var /** @type {boolean} */ buffer = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.MoveProxy(/* implicit cast */ org.apache.royale.utils.Language.as(proxy, Box2D.Collision.b2DynamicTreeNode, true), aabb, displacement);
  if (buffer) {
    this.Box2D_Collision_b2DynamicTreeBroadPhase_BufferMove(/* implicit cast */ org.apache.royale.utils.Language.as(proxy, Box2D.Collision.b2DynamicTreeNode, true));
  }
};


/**
 * @param {*} proxyA
 * @param {*} proxyB
 * @return {boolean}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.TestOverlap = function(proxyA, proxyB) {
  var /** @type {Box2D.Collision.b2AABB} */ aabbA = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.GetFatAABB(/* implicit cast */ org.apache.royale.utils.Language.as(proxyA, Box2D.Collision.b2DynamicTreeNode, true));
  var /** @type {Box2D.Collision.b2AABB} */ aabbB = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.GetFatAABB(/* implicit cast */ org.apache.royale.utils.Language.as(proxyB, Box2D.Collision.b2DynamicTreeNode, true));
  return aabbA.TestOverlap(aabbB);
};


/**
 * Get user data from a proxy. Returns null if the proxy is invalid.
 * @param {*} proxy
 * @return {*}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.GetUserData = function(proxy) {
  return this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.GetUserData(/* implicit cast */ org.apache.royale.utils.Language.as(proxy, Box2D.Collision.b2DynamicTreeNode, true));
};


/**
 * Get the AABB for a proxy.
 * @param {*} proxy
 * @return {Box2D.Collision.b2AABB}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.GetFatAABB = function(proxy) {
  return this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.GetFatAABB(/* implicit cast */ org.apache.royale.utils.Language.as(proxy, Box2D.Collision.b2DynamicTreeNode, true));
};


/**
 * Get the number of proxies.
 * @return {number}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.GetProxyCount = function() {
  return this.Box2D_Collision_b2DynamicTreeBroadPhase_m_proxyCount;
};


/**
 * @private
 * @type {Box2D.Collision.b2DynamicTreeNode}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_queryProxy_ = null;


/**
 * Update the pairs. This results in pair callbacks. This can only add pairs.
 * @param {Function} callback
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.UpdatePairs = function(callback) {
  var self = this;
  function QueryCallback(proxy) {
    if (proxy == self.Box2D_Collision_b2DynamicTreeBroadPhase_queryProxy_) {
      return true;
    }
    if (self.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount == self.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairBuffer.length) {
      self.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairBuffer[self.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount] = new Box2D.Collision.b2DynamicTreePair();
    }
    var /** @type {Box2D.Collision.b2DynamicTreePair} */ pair = /* implicit cast */ org.apache.royale.utils.Language.as(self.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairBuffer[self.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount], Box2D.Collision.b2DynamicTreePair, true);
    if (proxy < self.Box2D_Collision_b2DynamicTreeBroadPhase_queryProxy_) {
      pair.proxyA = proxy;
      pair.proxyB = self.Box2D_Collision_b2DynamicTreeBroadPhase_queryProxy_;
    } else {
      pair.proxyB = proxy;
      pair.proxyA = self.Box2D_Collision_b2DynamicTreeBroadPhase_queryProxy_;
    }
    ++self.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount;
    return true;
  };
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount = 0;
  var foreachiter0_target = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var queryProxy = foreachiter0_target[foreachiter0];
  {
    this.Box2D_Collision_b2DynamicTreeBroadPhase_queryProxy_ = queryProxy;
    var /** @type {Box2D.Collision.b2AABB} */ fatAABB = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.GetFatAABB(queryProxy);
    this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.Query(QueryCallback, fatAABB);
  }}
  
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer.length = 0;
  for (var /** @type {number} */ i = 0; i < this.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount;) {
    var /** @type {Box2D.Collision.b2DynamicTreePair} */ primaryPair = /* implicit cast */ org.apache.royale.utils.Language.as(this.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairBuffer[i], Box2D.Collision.b2DynamicTreePair, true);
    var /** @type {*} */ userDataA = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.GetUserData(primaryPair.proxyA);
    var /** @type {*} */ userDataB = this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.GetUserData(primaryPair.proxyB);
    callback(userDataA, userDataB);
    ++i;
    while (i < this.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount) {
      var /** @type {Box2D.Collision.b2DynamicTreePair} */ pair = /* implicit cast */ org.apache.royale.utils.Language.as(this.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairBuffer[i], Box2D.Collision.b2DynamicTreePair, true);
      if (pair.proxyA != primaryPair.proxyA || pair.proxyB != primaryPair.proxyB) {
        break;
      }
      ++i;
    }
  }
};


/**
 * @inheritDoc
 * @param {Function} callback
 * @param {Box2D.Collision.b2AABB} aabb
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Query = function(callback, aabb) {
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.Query(callback, aabb);
};


/**
 * @inheritDoc
 * @param {Function} callback
 * @param {Box2D.Collision.b2RayCastInput} input
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.RayCast = function(callback, input) {
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.RayCast(callback, input);
};


/**
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Validate = function() {
};


/**
 * @param {number} iterations
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Rebalance = function(iterations) {
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree.Rebalance(iterations);
};


/**
 * @private
 * @param {Box2D.Collision.b2DynamicTreeNode} proxy
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_BufferMove = function(proxy) {
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer[this.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer.length] = proxy;
};


/**
 * @private
 * @param {Box2D.Collision.b2DynamicTreeNode} proxy
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_UnBufferMove = function(proxy) {
  var /** @type {number} */ i = (this.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer.indexOf(proxy)) >> 0;
  this.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer.splice(i, 1);
};


/**
 * @private
 * @param {Box2D.Collision.b2DynamicTreePair} pair1
 * @param {Box2D.Collision.b2DynamicTreePair} pair2
 * @return {number}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_ComparePairs = function(pair1, pair2) {
  return 0;
};


/**
 * @private
 * @type {Box2D.Collision.b2DynamicTree}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_m_tree = null;


/**
 * @private
 * @type {number}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_m_proxyCount = 0;


/**
 * @private
 * @type {Array}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_m_moveBuffer = null;


/**
 * @private
 * @type {Array}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairBuffer = null;


/**
 * @private
 * @type {number}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Box2D_Collision_b2DynamicTreeBroadPhase_m_pairCount = 0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2DynamicTreeBroadPhase', qName: 'Box2D.Collision.b2DynamicTreeBroadPhase', kind: 'class' }], interfaces: [Box2D.Collision.IBroadPhase] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'CreateProxy': { type: '*', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ 'Box2D.Collision.b2AABB', false ,'*', false ]; }},
        'DestroyProxy': { type: 'void', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ '*', false ]; }},
        'MoveProxy': { type: 'void', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ '*', false ,'Box2D.Collision.b2AABB', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        'TestOverlap': { type: 'Boolean', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ '*', false ,'*', false ]; }},
        'GetUserData': { type: '*', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ '*', false ]; }},
        'GetFatAABB': { type: 'Box2D.Collision.b2AABB', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ '*', false ]; }},
        'GetProxyCount': { type: 'int', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase'},
        'UpdatePairs': { type: 'void', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ 'Function', false ]; }},
        'Query': { type: 'void', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ 'Function', false ,'Box2D.Collision.b2AABB', false ]; }},
        'RayCast': { type: 'void', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ 'Function', false ,'Box2D.Collision.b2RayCastInput', false ]; }},
        'Validate': { type: 'void', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase'},
        'Rebalance': { type: 'void', declaredBy: 'Box2D.Collision.b2DynamicTreeBroadPhase', parameters: function () { return [ 'int', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Collision.b2DynamicTreeBroadPhase.prototype.ROYALE_COMPILE_FLAGS = 9;
