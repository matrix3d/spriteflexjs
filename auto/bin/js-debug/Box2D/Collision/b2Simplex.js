/**
 * Generated by Apache Royale Compiler from Box2D/Collision/b2Simplex.as
 * Box2D.Collision.b2Simplex
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Collision.b2Simplex');
/* Royale Dependency List: Box2D.Collision.b2DistanceProxy,Box2D.Collision.b2SimplexCache,Box2D.Collision.b2SimplexVertex,Box2D.Common.Math.b2Math,Box2D.Common.Math.b2Transform,Box2D.Common.Math.b2Vec2,Box2D.Common.b2Settings,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
Box2D.Collision.b2Simplex = function() {
  
  this.m_v1 = new Box2D.Collision.b2SimplexVertex();
  this.m_v2 = new Box2D.Collision.b2SimplexVertex();
  this.m_v3 = new Box2D.Collision.b2SimplexVertex();
  this.m_vertices = new Array(3);
  this.m_vertices[0] = this.m_v1;
  this.m_vertices[1] = this.m_v2;
  this.m_vertices[2] = this.m_v3;
};


/**
 * @param {Box2D.Collision.b2SimplexCache} cache
 * @param {Box2D.Collision.b2DistanceProxy} proxyA
 * @param {Box2D.Common.Math.b2Transform} transformA
 * @param {Box2D.Collision.b2DistanceProxy} proxyB
 * @param {Box2D.Common.Math.b2Transform} transformB
 */
Box2D.Collision.b2Simplex.prototype.ReadCache = function(cache, proxyA, transformA, proxyB, transformB) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ wALocal = null;
  var /** @type {Box2D.Common.Math.b2Vec2} */ wBLocal = null;
  Box2D.Common.b2Settings.b2Assert(0 <= cache.count && cache.count <= 3);
  //var /** @type {Box2D.Common.Math.b2Vec2} */ wALocal = null;
  //var /** @type {Box2D.Common.Math.b2Vec2} */ wBLocal = null;
  this.m_count = (cache.count) >> 0;
  var /** @type {Array} */ vertices = this.m_vertices;
  for (var /** @type {number} */ i = 0; i < this.m_count; i++) {
    var /** @type {Box2D.Collision.b2SimplexVertex} */ v = /* implicit cast */ org.apache.royale.utils.Language.as(vertices[i], Box2D.Collision.b2SimplexVertex, true);
    v.indexA = (cache.indexA[i]) >> 0;
    v.indexB = (cache.indexB[i]) >> 0;
    wALocal = proxyA.GetVertex(v.indexA);
    wBLocal = proxyB.GetVertex(v.indexB);
    v.wA = Box2D.Common.Math.b2Math.MulX(transformA, wALocal);
    v.wB = Box2D.Common.Math.b2Math.MulX(transformB, wBLocal);
    v.w = Box2D.Common.Math.b2Math.SubtractVV(v.wB, v.wA);
    v.a = 0;
  }
  if (this.m_count > 1) {
    var /** @type {number} */ metric1 = cache.metric;
    var /** @type {number} */ metric2 = this.GetMetric();
    if (metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {
      this.m_count = 0;
    }
  }
  if (this.m_count == 0) {
    v = /* implicit cast */ org.apache.royale.utils.Language.as(vertices[0], Box2D.Collision.b2SimplexVertex, true);
    v.indexA = 0;
    v.indexB = 0;
    wALocal = proxyA.GetVertex(0);
    wBLocal = proxyB.GetVertex(0);
    v.wA = Box2D.Common.Math.b2Math.MulX(transformA, wALocal);
    v.wB = Box2D.Common.Math.b2Math.MulX(transformB, wBLocal);
    v.w = Box2D.Common.Math.b2Math.SubtractVV(v.wB, v.wA);
    this.m_count = 1;
  }
};


/**
 * @param {Box2D.Collision.b2SimplexCache} cache
 */
Box2D.Collision.b2Simplex.prototype.WriteCache = function(cache) {
  cache.metric = this.GetMetric();
  cache.count = org.apache.royale.utils.Language.uint(this.m_count);
  var /** @type {Array} */ vertices = this.m_vertices;
  for (var /** @type {number} */ i = 0; i < this.m_count; i++) {
    cache.indexA[i] = org.apache.royale.utils.Language.uint(vertices[i].indexA);
    cache.indexB[i] = org.apache.royale.utils.Language.uint(vertices[i].indexB);
  }
};


/**
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2Simplex.prototype.GetSearchDirection = function() {
  switch (this.m_count) {
    case 1:
      return this.m_v1.w.GetNegative();
    case 2:
      var /** @type {Box2D.Common.Math.b2Vec2} */ e12 = Box2D.Common.Math.b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);
      var /** @type {number} */ sgn = Box2D.Common.Math.b2Math.CrossVV(e12, this.m_v1.w.GetNegative());
      if (sgn > 0.0) {
        return Box2D.Common.Math.b2Math.CrossFV(1.0, e12);
      } else {
        return Box2D.Common.Math.b2Math.CrossVF(e12, 1.0);
      }
    default:
      Box2D.Common.b2Settings.b2Assert(false);
      return new Box2D.Common.Math.b2Vec2();
  }
};


/**
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Collision.b2Simplex.prototype.GetClosestPoint = function() {
  switch (this.m_count) {
    case 0:
      Box2D.Common.b2Settings.b2Assert(false);
      return new Box2D.Common.Math.b2Vec2();
    case 1:
      return this.m_v1.w;
    case 2:
      return new Box2D.Common.Math.b2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
    default:
      Box2D.Common.b2Settings.b2Assert(false);
      return new Box2D.Common.Math.b2Vec2();
  }
};


/**
 * @param {Box2D.Common.Math.b2Vec2} pA
 * @param {Box2D.Common.Math.b2Vec2} pB
 */
Box2D.Collision.b2Simplex.prototype.GetWitnessPoints = function(pA, pB) {
  switch (this.m_count) {
    case 0:
      Box2D.Common.b2Settings.b2Assert(false);
      break;
    case 1:
      pA.SetV(this.m_v1.wA);
      pB.SetV(this.m_v1.wB);
      break;
    case 2:
      pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
      pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
      pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
      pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
      break;
    case 3:
      pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
      pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
      break;
    default:
      Box2D.Common.b2Settings.b2Assert(false);
      break;
  }
};


/**
 * @return {number}
 */
Box2D.Collision.b2Simplex.prototype.GetMetric = function() {
  switch (this.m_count) {
    case 0:
      Box2D.Common.b2Settings.b2Assert(false);
      return 0.0;
    case 1:
      return 0.0;
    case 2:
      return Box2D.Common.Math.b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
    case 3:
      return Box2D.Common.Math.b2Math.CrossVV(Box2D.Common.Math.b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), Box2D.Common.Math.b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));
    default:
      Box2D.Common.b2Settings.b2Assert(false);
      return 0.0;
  }
};


/**
 */
Box2D.Collision.b2Simplex.prototype.Solve2 = function() {
  var /** @type {Box2D.Common.Math.b2Vec2} */ w1 = this.m_v1.w;
  var /** @type {Box2D.Common.Math.b2Vec2} */ w2 = this.m_v2.w;
  var /** @type {Box2D.Common.Math.b2Vec2} */ e12 = Box2D.Common.Math.b2Math.SubtractVV(w2, w1);
  var /** @type {number} */ d12_2 = -(w1.x * e12.x + w1.y * e12.y);
  if (d12_2 <= 0.0) {
    this.m_v1.a = 1.0;
    this.m_count = 1;
    return;
  }
  var /** @type {number} */ d12_1 = (w2.x * e12.x + w2.y * e12.y);
  if (d12_1 <= 0.0) {
    this.m_v2.a = 1.0;
    this.m_count = 1;
    this.m_v1.Set(this.m_v2);
    return;
  }
  var /** @type {number} */ inv_d12 = 1.0 / (d12_1 + d12_2);
  this.m_v1.a = d12_1 * inv_d12;
  this.m_v2.a = d12_2 * inv_d12;
  this.m_count = 2;
};


/**
 */
Box2D.Collision.b2Simplex.prototype.Solve3 = function() {
  var /** @type {Box2D.Common.Math.b2Vec2} */ w1 = this.m_v1.w;
  var /** @type {Box2D.Common.Math.b2Vec2} */ w2 = this.m_v2.w;
  var /** @type {Box2D.Common.Math.b2Vec2} */ w3 = this.m_v3.w;
  var /** @type {Box2D.Common.Math.b2Vec2} */ e12 = Box2D.Common.Math.b2Math.SubtractVV(w2, w1);
  var /** @type {number} */ w1e12 = Box2D.Common.Math.b2Math.Dot(w1, e12);
  var /** @type {number} */ w2e12 = Box2D.Common.Math.b2Math.Dot(w2, e12);
  var /** @type {number} */ d12_1 = w2e12;
  var /** @type {number} */ d12_2 = -w1e12;
  var /** @type {Box2D.Common.Math.b2Vec2} */ e13 = Box2D.Common.Math.b2Math.SubtractVV(w3, w1);
  var /** @type {number} */ w1e13 = Box2D.Common.Math.b2Math.Dot(w1, e13);
  var /** @type {number} */ w3e13 = Box2D.Common.Math.b2Math.Dot(w3, e13);
  var /** @type {number} */ d13_1 = w3e13;
  var /** @type {number} */ d13_2 = -w1e13;
  var /** @type {Box2D.Common.Math.b2Vec2} */ e23 = Box2D.Common.Math.b2Math.SubtractVV(w3, w2);
  var /** @type {number} */ w2e23 = Box2D.Common.Math.b2Math.Dot(w2, e23);
  var /** @type {number} */ w3e23 = Box2D.Common.Math.b2Math.Dot(w3, e23);
  var /** @type {number} */ d23_1 = w3e23;
  var /** @type {number} */ d23_2 = -w2e23;
  var /** @type {number} */ n123 = Box2D.Common.Math.b2Math.CrossVV(e12, e13);
  var /** @type {number} */ d123_1 = n123 * Box2D.Common.Math.b2Math.CrossVV(w2, w3);
  var /** @type {number} */ d123_2 = n123 * Box2D.Common.Math.b2Math.CrossVV(w3, w1);
  var /** @type {number} */ d123_3 = n123 * Box2D.Common.Math.b2Math.CrossVV(w1, w2);
  if (d12_2 <= 0.0 && d13_2 <= 0.0) {
    this.m_v1.a = 1.0;
    this.m_count = 1;
    return;
  }
  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
    var /** @type {number} */ inv_d12 = 1.0 / (d12_1 + d12_2);
    this.m_v1.a = d12_1 * inv_d12;
    this.m_v2.a = d12_2 * inv_d12;
    this.m_count = 2;
    return;
  }
  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
    var /** @type {number} */ inv_d13 = 1.0 / (d13_1 + d13_2);
    this.m_v1.a = d13_1 * inv_d13;
    this.m_v3.a = d13_2 * inv_d13;
    this.m_count = 2;
    this.m_v2.Set(this.m_v3);
    return;
  }
  if (d12_1 <= 0.0 && d23_2 <= 0.0) {
    this.m_v2.a = 1.0;
    this.m_count = 1;
    this.m_v1.Set(this.m_v2);
    return;
  }
  if (d13_1 <= 0.0 && d23_1 <= 0.0) {
    this.m_v3.a = 1.0;
    this.m_count = 1;
    this.m_v1.Set(this.m_v3);
    return;
  }
  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
    var /** @type {number} */ inv_d23 = 1.0 / (d23_1 + d23_2);
    this.m_v2.a = d23_1 * inv_d23;
    this.m_v3.a = d23_2 * inv_d23;
    this.m_count = 2;
    this.m_v1.Set(this.m_v3);
    return;
  }
  var /** @type {number} */ inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
  this.m_v1.a = d123_1 * inv_d123;
  this.m_v2.a = d123_2 * inv_d123;
  this.m_v3.a = d123_3 * inv_d123;
  this.m_count = 3;
};


/**
 * @type {Box2D.Collision.b2SimplexVertex}
 */
Box2D.Collision.b2Simplex.prototype.m_v1 = null;


/**
 * @type {Box2D.Collision.b2SimplexVertex}
 */
Box2D.Collision.b2Simplex.prototype.m_v2 = null;


/**
 * @type {Box2D.Collision.b2SimplexVertex}
 */
Box2D.Collision.b2Simplex.prototype.m_v3 = null;


/**
 * @type {Array}
 */
Box2D.Collision.b2Simplex.prototype.m_vertices = null;


/**
 * @type {number}
 */
Box2D.Collision.b2Simplex.prototype.m_count = 0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Collision.b2Simplex.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Simplex', qName: 'Box2D.Collision.b2Simplex', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Collision.b2Simplex.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'm_v1': { type: 'Box2D.Collision.b2SimplexVertex', get_set: function (/** Box2D.Collision.b2Simplex */ inst, /** * */ v) {return v !== undefined ? inst.m_v1 = v : inst.m_v1;}},
        'm_v2': { type: 'Box2D.Collision.b2SimplexVertex', get_set: function (/** Box2D.Collision.b2Simplex */ inst, /** * */ v) {return v !== undefined ? inst.m_v2 = v : inst.m_v2;}},
        'm_v3': { type: 'Box2D.Collision.b2SimplexVertex', get_set: function (/** Box2D.Collision.b2Simplex */ inst, /** * */ v) {return v !== undefined ? inst.m_v3 = v : inst.m_v3;}},
        'm_vertices': { type: 'Array', get_set: function (/** Box2D.Collision.b2Simplex */ inst, /** * */ v) {return v !== undefined ? inst.m_vertices = v : inst.m_vertices;}},
        'm_count': { type: 'int', get_set: function (/** Box2D.Collision.b2Simplex */ inst, /** * */ v) {return v !== undefined ? inst.m_count = v : inst.m_count;}}
      };
    },
    methods: function () {
      return {
        'b2Simplex': { type: '', declaredBy: 'Box2D.Collision.b2Simplex'},
        'ReadCache': { type: 'void', declaredBy: 'Box2D.Collision.b2Simplex', parameters: function () { return [ 'Box2D.Collision.b2SimplexCache', false ,'Box2D.Collision.b2DistanceProxy', false ,'Box2D.Common.Math.b2Transform', false ,'Box2D.Collision.b2DistanceProxy', false ,'Box2D.Common.Math.b2Transform', false ]; }},
        'WriteCache': { type: 'void', declaredBy: 'Box2D.Collision.b2Simplex', parameters: function () { return [ 'Box2D.Collision.b2SimplexCache', false ]; }},
        'GetSearchDirection': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Collision.b2Simplex'},
        'GetClosestPoint': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Collision.b2Simplex'},
        'GetWitnessPoints': { type: 'void', declaredBy: 'Box2D.Collision.b2Simplex', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        'GetMetric': { type: 'Number', declaredBy: 'Box2D.Collision.b2Simplex'},
        'Solve2': { type: 'void', declaredBy: 'Box2D.Collision.b2Simplex'},
        'Solve3': { type: 'void', declaredBy: 'Box2D.Collision.b2Simplex'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Collision.b2Simplex.prototype.ROYALE_COMPILE_FLAGS = 9;
