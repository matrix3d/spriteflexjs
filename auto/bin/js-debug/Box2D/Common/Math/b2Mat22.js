/**
 * Generated by Apache Royale Compiler from Box2D/Common/Math/b2Mat22.as
 * Box2D.Common.Math.b2Mat22
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Common.Math.b2Mat22');
/* Royale Dependency List: Box2D.Common.Math.b2Vec2*/




/**
 * @constructor
 */
Box2D.Common.Math.b2Mat22 = function() {
  
  this.col1 = new Box2D.Common.Math.b2Vec2();
  this.col2 = new Box2D.Common.Math.b2Vec2();
  this.col1.x = this.col2.y = 1.0;
};


/**
 * @nocollapse
 * @param {number} angle
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Mat22.FromAngle = function(angle) {
  var /** @type {Box2D.Common.Math.b2Mat22} */ mat = new Box2D.Common.Math.b2Mat22();
  mat.Set(angle);
  return mat;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} c1
 * @param {Box2D.Common.Math.b2Vec2} c2
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Mat22.FromVV = function(c1, c2) {
  var /** @type {Box2D.Common.Math.b2Mat22} */ mat = new Box2D.Common.Math.b2Mat22();
  mat.SetVV(c1, c2);
  return mat;
};


/**
 * @param {number} angle
 */
Box2D.Common.Math.b2Mat22.prototype.Set = function(angle) {
  var /** @type {number} */ c = Math.cos(angle);
  var /** @type {number} */ s = Math.sin(angle);
  this.col1.x = c;
  this.col2.x = -s;
  this.col1.y = s;
  this.col2.y = c;
};


/**
 * @param {Box2D.Common.Math.b2Vec2} c1
 * @param {Box2D.Common.Math.b2Vec2} c2
 */
Box2D.Common.Math.b2Mat22.prototype.SetVV = function(c1, c2) {
  this.col1.SetV(c1);
  this.col2.SetV(c2);
};


/**
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Mat22.prototype.Copy = function() {
  var /** @type {Box2D.Common.Math.b2Mat22} */ mat = new Box2D.Common.Math.b2Mat22();
  mat.SetM(this);
  return mat;
};


/**
 * @param {Box2D.Common.Math.b2Mat22} m
 */
Box2D.Common.Math.b2Mat22.prototype.SetM = function(m) {
  this.col1.SetV(m.col1);
  this.col2.SetV(m.col2);
};


/**
 * @param {Box2D.Common.Math.b2Mat22} m
 */
Box2D.Common.Math.b2Mat22.prototype.AddM = function(m) {
  this.col1.x += m.col1.x;
  this.col1.y += m.col1.y;
  this.col2.x += m.col2.x;
  this.col2.y += m.col2.y;
};


/**
 */
Box2D.Common.Math.b2Mat22.prototype.SetIdentity = function() {
  this.col1.x = 1.0;
  this.col2.x = 0.0;
  this.col1.y = 0.0;
  this.col2.y = 1.0;
};


/**
 */
Box2D.Common.Math.b2Mat22.prototype.SetZero = function() {
  this.col1.x = 0.0;
  this.col2.x = 0.0;
  this.col1.y = 0.0;
  this.col2.y = 0.0;
};


/**
 * @return {number}
 */
Box2D.Common.Math.b2Mat22.prototype.GetAngle = function() {
  return Math.atan2(this.col1.y, this.col1.x);
};


/**
 * Compute the inverse of this matrix, such that inv(A) * A = identity.
 * @param {Box2D.Common.Math.b2Mat22} out
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Mat22.prototype.GetInverse = function(out) {
  var /** @type {number} */ a = this.col1.x;
  var /** @type {number} */ b = this.col2.x;
  var /** @type {number} */ c = this.col1.y;
  var /** @type {number} */ d = this.col2.y;
  var /** @type {number} */ det = a * d - b * c;
  if (det != 0.0) {
    det = 1.0 / det;
  }
  out.col1.x = det * d;
  out.col2.x = -det * b;
  out.col1.y = -det * c;
  out.col2.y = det * a;
  return out;
};


/**
 * @param {Box2D.Common.Math.b2Vec2} out
 * @param {number} bX
 * @param {number} bY
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Mat22.prototype.Solve = function(out, bX, bY) {
  var /** @type {number} */ a11 = this.col1.x;
  var /** @type {number} */ a12 = this.col2.x;
  var /** @type {number} */ a21 = this.col1.y;
  var /** @type {number} */ a22 = this.col2.y;
  var /** @type {number} */ det = a11 * a22 - a12 * a21;
  if (det != 0.0) {
    det = 1.0 / det;
  }
  out.x = det * (a22 * bX - a12 * bY);
  out.y = det * (a11 * bY - a21 * bX);
  return out;
};


/**
 */
Box2D.Common.Math.b2Mat22.prototype.Abs = function() {
  this.col1.Abs();
  this.col2.Abs();
};


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Mat22.prototype.col1 = null;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Mat22.prototype.col2 = null;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Common.Math.b2Mat22.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Mat22', qName: 'Box2D.Common.Math.b2Mat22', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Common.Math.b2Mat22.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'col1': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Common.Math.b2Mat22 */ inst, /** * */ v) {return v !== undefined ? inst.col1 = v : inst.col1;}},
        'col2': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Common.Math.b2Mat22 */ inst, /** * */ v) {return v !== undefined ? inst.col2 = v : inst.col2;}}
      };
    },
    methods: function () {
      return {
        'b2Mat22': { type: '', declaredBy: 'Box2D.Common.Math.b2Mat22'},
        '|FromAngle': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Number', false ]; }},
        '|FromVV': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        'Set': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Number', false ]; }},
        'SetVV': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        'Copy': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Mat22'},
        'SetM': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ]; }},
        'AddM': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ]; }},
        'SetIdentity': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Mat22'},
        'SetZero': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Mat22'},
        'GetAngle': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Mat22'},
        'GetInverse': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ]; }},
        'Solve': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Mat22', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Number', false ,'Number', false ]; }},
        'Abs': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Mat22'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Common.Math.b2Mat22.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Common.Math.b2Mat22.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Common.Math.b2Mat22);
