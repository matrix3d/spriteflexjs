/**
 * Generated by Apache Royale Compiler from Box2D/Common/Math/b2Math.as
 * Box2D.Common.Math.b2Math
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Common.Math.b2Math');
/* Royale Dependency List: Box2D.Common.Math.b2Mat22,Box2D.Common.Math.b2Transform,Box2D.Common.Math.b2Vec2*/




/**
 * @constructor
 */
Box2D.Common.Math.b2Math = function() {
};


/**
 * This function is used to ensure that a floating point number is
 * not a NaN or infinity.
 * @nocollapse
 * @param {number} x
 * @return {boolean}
 */
Box2D.Common.Math.b2Math.IsValid = function(x) {
  return isFinite(x);
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {number}
 */
Box2D.Common.Math.b2Math.Dot = function(a, b) {
  return a.x * b.x + a.y * b.y;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {number}
 */
Box2D.Common.Math.b2Math.CrossVV = function(a, b) {
  return a.x * b.y - a.y * b.x;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {number} s
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.CrossVF = function(a, s) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ v = new Box2D.Common.Math.b2Vec2(s * a.y, -s * a.x);
  return v;
};


/**
 * @nocollapse
 * @param {number} s
 * @param {Box2D.Common.Math.b2Vec2} a
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.CrossFV = function(s, a) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ v = new Box2D.Common.Math.b2Vec2(-s * a.y, s * a.x);
  return v;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Mat22} A
 * @param {Box2D.Common.Math.b2Vec2} v
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.MulMV = function(A, v) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ u = new Box2D.Common.Math.b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
  return u;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Mat22} A
 * @param {Box2D.Common.Math.b2Vec2} v
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.MulTMV = function(A, v) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ u = new Box2D.Common.Math.b2Vec2(Box2D.Common.Math.b2Math.Dot(v, A.col1), Box2D.Common.Math.b2Math.Dot(v, A.col2));
  return u;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Transform} T
 * @param {Box2D.Common.Math.b2Vec2} v
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.MulX = function(T, v) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ a = Box2D.Common.Math.b2Math.MulMV(T.R, v);
  a.x += T.position.x;
  a.y += T.position.y;
  return a;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Transform} T
 * @param {Box2D.Common.Math.b2Vec2} v
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.MulXT = function(T, v) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ a = Box2D.Common.Math.b2Math.SubtractVV(v, T.position);
  var /** @type {number} */ tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
  a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
  a.x = tX;
  return a;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.AddVV = function(a, b) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ v = new Box2D.Common.Math.b2Vec2(a.x + b.x, a.y + b.y);
  return v;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.SubtractVV = function(a, b) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ v = new Box2D.Common.Math.b2Vec2(a.x - b.x, a.y - b.y);
  return v;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {number}
 */
Box2D.Common.Math.b2Math.Distance = function(a, b) {
  var /** @type {number} */ cX = a.x - b.x;
  var /** @type {number} */ cY = a.y - b.y;
  return Math.sqrt(cX * cX + cY * cY);
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {number}
 */
Box2D.Common.Math.b2Math.DistanceSquared = function(a, b) {
  var /** @type {number} */ cX = a.x - b.x;
  var /** @type {number} */ cY = a.y - b.y;
  return (cX * cX + cY * cY);
};


/**
 * @nocollapse
 * @param {number} s
 * @param {Box2D.Common.Math.b2Vec2} a
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.MulFV = function(s, a) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ v = new Box2D.Common.Math.b2Vec2(s * a.x, s * a.y);
  return v;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Mat22} A
 * @param {Box2D.Common.Math.b2Mat22} B
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Math.AddMM = function(A, B) {
  var /** @type {Box2D.Common.Math.b2Mat22} */ C = Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.AddVV(A.col1, B.col1), Box2D.Common.Math.b2Math.AddVV(A.col2, B.col2));
  return C;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Mat22} A
 * @param {Box2D.Common.Math.b2Mat22} B
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Math.MulMM = function(A, B) {
  var /** @type {Box2D.Common.Math.b2Mat22} */ C = Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.MulMV(A, B.col1), Box2D.Common.Math.b2Math.MulMV(A, B.col2));
  return C;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Mat22} A
 * @param {Box2D.Common.Math.b2Mat22} B
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Math.MulTMM = function(A, B) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ c1 = new Box2D.Common.Math.b2Vec2(Box2D.Common.Math.b2Math.Dot(A.col1, B.col1), Box2D.Common.Math.b2Math.Dot(A.col2, B.col1));
  var /** @type {Box2D.Common.Math.b2Vec2} */ c2 = new Box2D.Common.Math.b2Vec2(Box2D.Common.Math.b2Math.Dot(A.col1, B.col2), Box2D.Common.Math.b2Math.Dot(A.col2, B.col2));
  var /** @type {Box2D.Common.Math.b2Mat22} */ C = Box2D.Common.Math.b2Mat22.FromVV(c1, c2);
  return C;
};


/**
 * @nocollapse
 * @param {number} a
 * @return {number}
 */
Box2D.Common.Math.b2Math.Abs = function(a) {
  return a > 0.0 ? a : -a;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.AbsV = function(a) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ b = new Box2D.Common.Math.b2Vec2(Box2D.Common.Math.b2Math.Abs(a.x), Box2D.Common.Math.b2Math.Abs(a.y));
  return b;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Mat22} A
 * @return {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Math.AbsM = function(A) {
  var /** @type {Box2D.Common.Math.b2Mat22} */ B = Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.AbsV(A.col1), Box2D.Common.Math.b2Math.AbsV(A.col2));
  return B;
};


/**
 * @nocollapse
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
Box2D.Common.Math.b2Math.Min = function(a, b) {
  return a < b ? a : b;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.MinV = function(a, b) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ c = new Box2D.Common.Math.b2Vec2(Box2D.Common.Math.b2Math.Min(a.x, b.x), Box2D.Common.Math.b2Math.Min(a.y, b.y));
  return c;
};


/**
 * @nocollapse
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
Box2D.Common.Math.b2Math.Max = function(a, b) {
  return a > b ? a : b;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} b
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.MaxV = function(a, b) {
  var /** @type {Box2D.Common.Math.b2Vec2} */ c = new Box2D.Common.Math.b2Vec2(Box2D.Common.Math.b2Math.Max(a.x, b.x), Box2D.Common.Math.b2Math.Max(a.y, b.y));
  return c;
};


/**
 * @nocollapse
 * @param {number} a
 * @param {number} low
 * @param {number} high
 * @return {number}
 */
Box2D.Common.Math.b2Math.Clamp = function(a, low, high) {
  return a < low ? low : a > high ? high : a;
};


/**
 * @nocollapse
 * @param {Box2D.Common.Math.b2Vec2} a
 * @param {Box2D.Common.Math.b2Vec2} low
 * @param {Box2D.Common.Math.b2Vec2} high
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.ClampV = function(a, low, high) {
  return Box2D.Common.Math.b2Math.MaxV(low, Box2D.Common.Math.b2Math.MinV(a, high));
};


/**
 * @nocollapse
 * @param {Array} a
 * @param {Array} b
 */
Box2D.Common.Math.b2Math.Swap = function(a, b) {
  var /** @type {*} */ tmp = a[0];
  a[0] = b[0];
  b[0] = tmp;
};


/**
 * @nocollapse
 * @return {number}
 */
Box2D.Common.Math.b2Math.Random = function() {
  return Math.random() * 2 - 1;
};


/**
 * @nocollapse
 * @param {number} lo
 * @param {number} hi
 * @return {number}
 */
Box2D.Common.Math.b2Math.RandomRange = function(lo, hi) {
  var /** @type {number} */ r = Math.random();
  r = (hi - lo) * r + lo;
  return r;
};


/**
 * @nocollapse
 * @param {number} x
 * @return {number}
 */
Box2D.Common.Math.b2Math.NextPowerOfTwo = function(x) {
  x |= ((x >> 1) & 0x7FFFFFFF) >>> 0;
  x |= ((x >> 2) & 0x3FFFFFFF) >>> 0;
  x |= ((x >> 4) & 0x0FFFFFFF) >>> 0;
  x |= ((x >> 8) & 0x00FFFFFF) >>> 0;
  x |= ((x >> 16) & 0x0000FFFF) >>> 0;
  return (x + 1) >>> 0;
};


/**
 * @nocollapse
 * @param {number} x
 * @return {boolean}
 */
Box2D.Common.Math.b2Math.IsPowerOfTwo = function(x) {
  var /** @type {boolean} */ result = x > 0 && (x & (x - 1)) == 0;
  return result;
};


Box2D.Common.Math.b2Math.get__b2Vec2_zero = function() {
  var value = new Box2D.Common.Math.b2Vec2(0.0, 0.0);
  Object.defineProperties(Box2D.Common.Math.b2Math, { b2Vec2_zero: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Common.Math.b2Math.b2Vec2_zero;

Object.defineProperties(Box2D.Common.Math.b2Math, /** @lends {Box2D.Common.Math.b2Math} */ {
/**
 * @nocollapse
 * @const
 * @type {Box2D.Common.Math.b2Vec2}
 */
b2Vec2_zero: {
  get: Box2D.Common.Math.b2Math.get__b2Vec2_zero,
  configurable: true}});


Box2D.Common.Math.b2Math.get__b2Mat22_identity = function() {
  var value = Box2D.Common.Math.b2Mat22.FromVV(new Box2D.Common.Math.b2Vec2(1.0, 0.0), new Box2D.Common.Math.b2Vec2(0.0, 1.0));
  Object.defineProperties(Box2D.Common.Math.b2Math, { b2Mat22_identity: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Box2D.Common.Math.b2Mat22}
 */
Box2D.Common.Math.b2Math.b2Mat22_identity;

Object.defineProperties(Box2D.Common.Math.b2Math, /** @lends {Box2D.Common.Math.b2Math} */ {
/**
 * @nocollapse
 * @const
 * @type {Box2D.Common.Math.b2Mat22}
 */
b2Mat22_identity: {
  get: Box2D.Common.Math.b2Math.get__b2Mat22_identity,
  configurable: true}});


Box2D.Common.Math.b2Math.get__b2Transform_identity = function() {
  var value = new Box2D.Common.Math.b2Transform(Box2D.Common.Math.b2Math.b2Vec2_zero, Box2D.Common.Math.b2Math.b2Mat22_identity);
  Object.defineProperties(Box2D.Common.Math.b2Math, { b2Transform_identity: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {Box2D.Common.Math.b2Transform}
 */
Box2D.Common.Math.b2Math.b2Transform_identity;

Object.defineProperties(Box2D.Common.Math.b2Math, /** @lends {Box2D.Common.Math.b2Math} */ {
/**
 * @nocollapse
 * @const
 * @type {Box2D.Common.Math.b2Transform}
 */
b2Transform_identity: {
  get: Box2D.Common.Math.b2Math.get__b2Transform_identity,
  configurable: true}});


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Common.Math.b2Math.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Math', qName: 'Box2D.Common.Math.b2Math', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Common.Math.b2Math.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|IsValid': { type: 'Boolean', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ]; }},
        '|Dot': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|CrossVV': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|CrossVF': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Number', false ]; }},
        '|CrossFV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|MulMV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|MulTMV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|MulX': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Transform', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|MulXT': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Transform', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|AddVV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|SubtractVV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|Distance': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|DistanceSquared': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|MulFV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|AddMM': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ,'Box2D.Common.Math.b2Mat22', false ]; }},
        '|MulMM': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ,'Box2D.Common.Math.b2Mat22', false ]; }},
        '|MulTMM': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ,'Box2D.Common.Math.b2Mat22', false ]; }},
        '|Abs': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ]; }},
        '|AbsV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ]; }},
        '|AbsM': { type: 'Box2D.Common.Math.b2Mat22', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Mat22', false ]; }},
        '|Min': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        '|MinV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|Max': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        '|MaxV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|Clamp': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        '|ClampV': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ]; }},
        '|Swap': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Array', false ,'Array', false ]; }},
        '|Random': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math'},
        '|RandomRange': { type: 'Number', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        '|NextPowerOfTwo': { type: 'uint', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'uint', false ]; }},
        '|IsPowerOfTwo': { type: 'Boolean', declaredBy: 'Box2D.Common.Math.b2Math', parameters: function () { return [ 'uint', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Common.Math.b2Math.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Common.Math.b2Math.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Common.Math.b2Math);
