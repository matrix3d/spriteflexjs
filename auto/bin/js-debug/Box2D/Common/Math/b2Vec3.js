/**
 * Generated by Apache Royale Compiler from Box2D/Common/Math/b2Vec3.as
 * Box2D.Common.Math.b2Vec3
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Common.Math.b2Vec3');
/* Royale Dependency List: */



/**
 * Construct using co-ordinates
 * @constructor
 * @param {number=} x
 * @param {number=} y
 * @param {number=} z
 */
Box2D.Common.Math.b2Vec3 = function(x, y, z) {
  x = typeof x !== 'undefined' ? x : 0;
  y = typeof y !== 'undefined' ? y : 0;
  z = typeof z !== 'undefined' ? z : 0;
  this.x = x;
  this.y = y;
  this.z = z;
};


/**
 * Sets this vector to all zeros
 */
Box2D.Common.Math.b2Vec3.prototype.SetZero = function() {
  this.x = this.y = this.z = 0.0;
};


/**
 * Set this vector to some specified coordinates.
 * @param {number} x
 * @param {number} y
 * @param {number} z
 */
Box2D.Common.Math.b2Vec3.prototype.Set = function(x, y, z) {
  this.x = x;
  this.y = y;
  this.z = z;
};


/**
 * @param {Box2D.Common.Math.b2Vec3} v
 */
Box2D.Common.Math.b2Vec3.prototype.SetV = function(v) {
  this.x = v.x;
  this.y = v.y;
  this.z = v.z;
};


/**
 * Negate this vector
 * @return {Box2D.Common.Math.b2Vec3}
 */
Box2D.Common.Math.b2Vec3.prototype.GetNegative = function() {
  return new Box2D.Common.Math.b2Vec3(-this.x, -this.y, -this.z);
};


/**
 */
Box2D.Common.Math.b2Vec3.prototype.NegativeSelf = function() {
  this.x = -this.x;
  this.y = -this.y;
  this.z = -this.z;
};


/**
 * @return {Box2D.Common.Math.b2Vec3}
 */
Box2D.Common.Math.b2Vec3.prototype.Copy = function() {
  return new Box2D.Common.Math.b2Vec3(this.x, this.y, this.z);
};


/**
 * @param {Box2D.Common.Math.b2Vec3} v
 */
Box2D.Common.Math.b2Vec3.prototype.Add = function(v) {
  this.x += v.x;
  this.y += v.y;
  this.z += v.z;
};


/**
 * @param {Box2D.Common.Math.b2Vec3} v
 */
Box2D.Common.Math.b2Vec3.prototype.Subtract = function(v) {
  this.x -= v.x;
  this.y -= v.y;
  this.z -= v.z;
};


/**
 * @param {number} a
 */
Box2D.Common.Math.b2Vec3.prototype.Multiply = function(a) {
  this.x *= a;
  this.y *= a;
  this.z *= a;
};


/**
 * @type {number}
 */
Box2D.Common.Math.b2Vec3.prototype.x = NaN;


/**
 * @type {number}
 */
Box2D.Common.Math.b2Vec3.prototype.y = NaN;


/**
 * @type {number}
 */
Box2D.Common.Math.b2Vec3.prototype.z = NaN;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Common.Math.b2Vec3.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Vec3', qName: 'Box2D.Common.Math.b2Vec3', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Common.Math.b2Vec3.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'x': { type: 'Number', get_set: function (/** Box2D.Common.Math.b2Vec3 */ inst, /** * */ v) {return v !== undefined ? inst.x = v : inst.x;}},
        'y': { type: 'Number', get_set: function (/** Box2D.Common.Math.b2Vec3 */ inst, /** * */ v) {return v !== undefined ? inst.y = v : inst.y;}},
        'z': { type: 'Number', get_set: function (/** Box2D.Common.Math.b2Vec3 */ inst, /** * */ v) {return v !== undefined ? inst.z = v : inst.z;}}
      };
    },
    methods: function () {
      return {
        'b2Vec3': { type: '', declaredBy: 'Box2D.Common.Math.b2Vec3', parameters: function () { return [ 'Number', true ,'Number', true ,'Number', true ]; }},
        'SetZero': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Vec3'},
        'Set': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Vec3', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'SetV': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Vec3', parameters: function () { return [ 'Box2D.Common.Math.b2Vec3', false ]; }},
        'GetNegative': { type: 'Box2D.Common.Math.b2Vec3', declaredBy: 'Box2D.Common.Math.b2Vec3'},
        'NegativeSelf': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Vec3'},
        'Copy': { type: 'Box2D.Common.Math.b2Vec3', declaredBy: 'Box2D.Common.Math.b2Vec3'},
        'Add': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Vec3', parameters: function () { return [ 'Box2D.Common.Math.b2Vec3', false ]; }},
        'Subtract': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Vec3', parameters: function () { return [ 'Box2D.Common.Math.b2Vec3', false ]; }},
        'Multiply': { type: 'void', declaredBy: 'Box2D.Common.Math.b2Vec3', parameters: function () { return [ 'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Common.Math.b2Vec3.prototype.ROYALE_COMPILE_FLAGS = 9;
