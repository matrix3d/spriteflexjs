/**
 * Generated by Apache Royale Compiler from Box2D/Common/b2Settings.as
 * Box2D.Common.b2Settings
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Common.b2Settings');
/* Royale Dependency List: */



/**
 * @constructor
 */
Box2D.Common.b2Settings = function() {
};


/**
 * @nocollapse
 * @const
 * @type {string}
 */
Box2D.Common.b2Settings.VERSION = "2.1alpha";


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.USHRT_MAX = 0xffff;


Box2D.Common.b2Settings.get__b2_pi = function() {
  var value = Math.PI;
  Object.defineProperties(Box2D.Common.b2Settings, { b2_pi: { value: value, writable: false }});
  return value;
};
/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_pi;

Object.defineProperties(Box2D.Common.b2Settings, /** @lends {Box2D.Common.b2Settings} */ {
/**
 * @nocollapse
 * @const
 * @type {number}
 */
b2_pi: {
  get: Box2D.Common.b2Settings.get__b2_pi,
  configurable: true}});


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_aabbExtension = 0.1;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_aabbMultiplier = 2.0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_polygonRadius;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_linearSlop = 0.005;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_angularSlop;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_toiSlop;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_velocityThreshold = 1.0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxAngularCorrection;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxTranslation = 2.0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxTranslationSquared;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxRotation;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_maxRotationSquared;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;


/**
 * Friction mixing law. Feel free to customize this.
 * @nocollapse
 * @param {number} friction1
 * @param {number} friction2
 * @return {number}
 */
Box2D.Common.b2Settings.b2MixFriction = function(friction1, friction2) {
  return Math.sqrt(friction1 * friction2);
};


/** 
 * Restitution mixing law. Feel free to customize this.
 * @nocollapse
 * @param {number} restitution1
 * @param {number} restitution2
 * @return {number}
 */
Box2D.Common.b2Settings.b2MixRestitution = function(restitution1, restitution2) {
  return restitution1 > restitution2 ? restitution1 : restitution2;
};


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_timeToSleep = 0.5;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.b2_angularSleepTolerance;


/**
 * b2Assert is used internally to handle assertions. By default, calls are commented out to save performance,
 * so they serve more as documentation than anything else.
 * @nocollapse
 * @param {boolean} a
 */
Box2D.Common.b2Settings.b2Assert = function(a) {
  if (!a) {
    throw "Assertion Failed";
  }
};

Box2D.Common.b2Settings.b2_polygonRadius = 2.0 * Box2D.Common.b2Settings.b2_linearSlop;
Box2D.Common.b2Settings.b2_angularSlop = 2.0 / 180.0 * Box2D.Common.b2Settings.b2_pi;
Box2D.Common.b2Settings.b2_toiSlop = 8.0 * Box2D.Common.b2Settings.b2_linearSlop;
Box2D.Common.b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * Box2D.Common.b2Settings.b2_pi;
Box2D.Common.b2Settings.b2_maxTranslationSquared = Box2D.Common.b2Settings.b2_maxTranslation * Box2D.Common.b2Settings.b2_maxTranslation;
Box2D.Common.b2Settings.b2_maxRotation = 0.5 * Box2D.Common.b2Settings.b2_pi;
Box2D.Common.b2Settings.b2_maxRotationSquared = Box2D.Common.b2Settings.b2_maxRotation * Box2D.Common.b2Settings.b2_maxRotation;
Box2D.Common.b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 * Box2D.Common.b2Settings.b2_pi;




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Common.b2Settings.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Settings', qName: 'Box2D.Common.b2Settings', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Common.b2Settings.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|b2MixFriction': { type: 'Number', declaredBy: 'Box2D.Common.b2Settings', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        '|b2MixRestitution': { type: 'Number', declaredBy: 'Box2D.Common.b2Settings', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        '|b2Assert': { type: 'void', declaredBy: 'Box2D.Common.b2Settings', parameters: function () { return [ 'Boolean', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Common.b2Settings.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Common.b2Settings.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Common.b2Settings);
