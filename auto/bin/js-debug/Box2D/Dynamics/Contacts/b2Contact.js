/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/Contacts/b2Contact.as
 * Box2D.Dynamics.Contacts.b2Contact
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.Contacts.b2Contact');
/* Royale Dependency List: Box2D.Collision.Shapes.b2Shape,Box2D.Collision.Shapes.b2ShapeUtil,Box2D.Collision.b2ContactID,Box2D.Collision.b2Manifold,Box2D.Collision.b2ManifoldPoint,Box2D.Collision.b2TOIInput,Box2D.Collision.b2TimeOfImpact,Box2D.Collision.b2WorldManifold,Box2D.Common.Math.b2Sweep,Box2D.Common.Math.b2Transform,Box2D.Common.b2Settings,Box2D.Dynamics.Contacts.b2ContactEdge,Box2D.Dynamics.b2Body,Box2D.Dynamics.b2ContactListener,Box2D.Dynamics.b2Fixture,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
Box2D.Dynamics.Contacts.b2Contact = function() {

this.m_nodeA = new Box2D.Dynamics.Contacts.b2ContactEdge();
this.m_nodeB = new Box2D.Dynamics.Contacts.b2ContactEdge();
this.m_manifold = new Box2D.Collision.b2Manifold();
this.m_oldManifold = new Box2D.Collision.b2Manifold();
};


/**
 * Get the contact manifold. Do not modify the manifold unless you understand the
 * internals of Box2D
 * @return {Box2D.Collision.b2Manifold}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.GetManifold = function() {
  return this.m_manifold;
};


/**
 * Get the world manifold
 * @param {Box2D.Collision.b2WorldManifold} worldManifold
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.GetWorldManifold = function(worldManifold) {
  var /** @type {Box2D.Dynamics.b2Body} */ bodyA = this.m_fixtureA.GetBody();
  var /** @type {Box2D.Dynamics.b2Body} */ bodyB = this.m_fixtureB.GetBody();
  var /** @type {Box2D.Collision.Shapes.b2Shape} */ shapeA = this.m_fixtureA.GetShape();
  var /** @type {Box2D.Collision.Shapes.b2Shape} */ shapeB = this.m_fixtureB.GetShape();
  worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);
};


/**
 * Is this contact touching.
 * @return {boolean}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.IsTouching = function() {
  return (this.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag) == Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag;
};


/**
 * Does this contact generate TOI events for continuous simulation
 * @return {boolean}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.IsContinuous = function() {
  return (this.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag) == Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag;
};


/**
 * Change this to be a sensor or-non-sensor contact.
 * @param {boolean} sensor
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.SetSensor = function(sensor) {
  if (sensor) {
    this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag;
  } else {
    this.m_flags &= (~Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag) >>> 0;
  }
};


/**
 * Is this contact a sensor?
 * @return {boolean}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.IsSensor = function() {
  return (this.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag) == Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag;
};


/**
 * Enable/disable this contact. This can be used inside the pre-solve
 * contact listener. The contact is only disabled for the current
 * time step (or sub-step in continuous collision).
 * @param {boolean} flag
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.SetEnabled = function(flag) {
  if (flag) {
    this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag;
  } else {
    this.m_flags &= (~Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag) >>> 0;
  }
};


/**
 * Has this contact been disabled?
 * @asreturn
 * @return {boolean}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.IsEnabled = function() {
  return (this.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag) == Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag;
};


/**
 * Get the next contact in the world's contact list.
 * @return {Box2D.Dynamics.Contacts.b2Contact}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.GetNext = function() {
  return this.m_next;
};


/**
 * Get the first fixture in this contact.
 * @return {Box2D.Dynamics.b2Fixture}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.GetFixtureA = function() {
  return this.m_fixtureA;
};


/**
 * Get the second fixture in this contact.
 * @return {Box2D.Dynamics.b2Fixture}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.GetFixtureB = function() {
  return this.m_fixtureB;
};


/**
 * Flag this contact for filtering. Filtering will occur the next time step.
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.FlagForFiltering = function() {
  this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_filterFlag;
};


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = 0x1;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = 0x2;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = 0x4;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = 0x8;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = 0x10;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = 0x20;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.e_filterFlag = 0x40;


/** @asprivate 
 * @param {Box2D.Dynamics.b2Fixture=} fixtureA
 * @param {Box2D.Dynamics.b2Fixture=} fixtureB
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.Reset = function(fixtureA, fixtureB) {
  fixtureA = typeof fixtureA !== 'undefined' ? fixtureA : null;
  fixtureB = typeof fixtureB !== 'undefined' ? fixtureB : null;
  this.m_flags = Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag;
  if (!fixtureA || !fixtureB) {
    this.m_fixtureA = null;
    this.m_fixtureB = null;
    return;
  }
  if (fixtureA.IsSensor() || fixtureB.IsSensor()) {
    this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag;
  }
  var /** @type {Box2D.Dynamics.b2Body} */ bodyA = fixtureA.GetBody();
  var /** @type {Box2D.Dynamics.b2Body} */ bodyB = fixtureB.GetBody();
  if (bodyA.GetType() != Box2D.Dynamics.b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != Box2D.Dynamics.b2Body.b2_dynamicBody || bodyB.IsBullet()) {
    this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag;
  }
  this.m_fixtureA = fixtureA;
  this.m_fixtureB = fixtureB;
  this.m_manifold.m_pointCount = 0;
  this.m_prev = null;
  this.m_next = null;
  this.m_nodeA.contact = null;
  this.m_nodeA.prev = null;
  this.m_nodeA.next = null;
  this.m_nodeA.other = null;
  this.m_nodeB.contact = null;
  this.m_nodeB.prev = null;
  this.m_nodeB.next = null;
  this.m_nodeB.other = null;
};


/**
 * @param {Box2D.Dynamics.b2ContactListener} listener
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.Update = function(listener) {
  var /** @type {Box2D.Collision.b2Manifold} */ tManifold = this.m_oldManifold;
  this.m_oldManifold = this.m_manifold;
  this.m_manifold = tManifold;
  this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag;
  var /** @type {boolean} */ touching = false;
  var /** @type {boolean} */ wasTouching = (this.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag) == Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag;
  var /** @type {Box2D.Dynamics.b2Body} */ bodyA = this.m_fixtureA.m_body;
  var /** @type {Box2D.Dynamics.b2Body} */ bodyB = this.m_fixtureB.m_body;
  var /** @type {boolean} */ aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
  if (this.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag) {
    if (aabbOverlap) {
      var /** @type {Box2D.Collision.Shapes.b2Shape} */ shapeA = this.m_fixtureA.GetShape();
      var /** @type {Box2D.Collision.Shapes.b2Shape} */ shapeB = this.m_fixtureB.GetShape();
      var /** @type {Box2D.Common.Math.b2Transform} */ xfA = bodyA.GetTransform();
      var /** @type {Box2D.Common.Math.b2Transform} */ xfB = bodyB.GetTransform();
      touching = Box2D.Collision.Shapes.b2ShapeUtil.TestOverlap(shapeA, xfA, shapeB, xfB);
    }
    this.m_manifold.m_pointCount = 0;
  } else {
    if (bodyA.GetType() != Box2D.Dynamics.b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != Box2D.Dynamics.b2Body.b2_dynamicBody || bodyB.IsBullet()) {
      this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag;
    } else {
      this.m_flags &= (~Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag) >>> 0;
    }
    if (aabbOverlap) {
      this.Evaluate();
      touching = this.m_manifold.m_pointCount > 0;
      for (var /** @type {number} */ i = 0; i < this.m_manifold.m_pointCount; ++i) {
        var /** @type {Box2D.Collision.b2ManifoldPoint} */ mp2 = /* implicit cast */ org.apache.royale.utils.Language.as(this.m_manifold.m_points[i], Box2D.Collision.b2ManifoldPoint, true);
        mp2.m_normalImpulse = 0.0;
        mp2.m_tangentImpulse = 0.0;
        var /** @type {Box2D.Collision.b2ContactID} */ id2 = mp2.m_id;
        for (var /** @type {number} */ j = 0; j < this.m_oldManifold.m_pointCount; ++j) {
          var /** @type {Box2D.Collision.b2ManifoldPoint} */ mp1 = /* implicit cast */ org.apache.royale.utils.Language.as(this.m_oldManifold.m_points[j], Box2D.Collision.b2ManifoldPoint, true);
          if (mp1.m_id.key == id2.key) {
            mp2.m_normalImpulse = mp1.m_normalImpulse;
            mp2.m_tangentImpulse = mp1.m_tangentImpulse;
            break;
          }
        }
      }
    } else {
      this.m_manifold.m_pointCount = 0;
    }
    if (touching != wasTouching) {
      bodyA.SetAwake(true);
      bodyB.SetAwake(true);
    }
  }
  if (touching) {
    this.m_flags |= Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag;
  } else {
    this.m_flags &= (~Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag) >>> 0;
  }
  if (wasTouching == false && touching == true) {
    listener.BeginContact(this);
  }
  if (wasTouching == true && touching == false) {
    listener.EndContact(this);
  }
  if ((this.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag) == 0) {
    listener.PreSolve(this, this.m_oldManifold);
  }
};


/**
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.Evaluate = function() {
};


Box2D.Dynamics.Contacts.b2Contact.get__s_input = function() {
  var value = new Box2D.Collision.b2TOIInput();
  Object.defineProperties(Box2D.Dynamics.Contacts.b2Contact, { s_input: { value: value, writable: true }});
  return value;
};
Box2D.Dynamics.Contacts.b2Contact.set__s_input = function(value) {
  Object.defineProperties(Box2D.Dynamics.Contacts.b2Contact, { s_input: { value: value, writable: true }});
};
/**
 * @private
 * @type {Box2D.Collision.b2TOIInput}
 */
Box2D.Dynamics.Contacts.b2Contact.s_input;

Object.defineProperties(Box2D.Dynamics.Contacts.b2Contact, /** @lends {Box2D.Dynamics.Contacts.b2Contact} */ {
/**
 * @private
 * @type {Box2D.Collision.b2TOIInput}
 */
s_input: {
  get: Box2D.Dynamics.Contacts.b2Contact.get__s_input,
  set: Box2D.Dynamics.Contacts.b2Contact.set__s_input,
  configurable: true}});


/**
 * @param {Box2D.Common.Math.b2Sweep} sweepA
 * @param {Box2D.Common.Math.b2Sweep} sweepB
 * @return {number}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.ComputeTOI = function(sweepA, sweepB) {
  Box2D.Dynamics.Contacts.b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());
  Box2D.Dynamics.Contacts.b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());
  Box2D.Dynamics.Contacts.b2Contact.s_input.sweepA = sweepA;
  Box2D.Dynamics.Contacts.b2Contact.s_input.sweepB = sweepB;
  Box2D.Dynamics.Contacts.b2Contact.s_input.tolerance = Box2D.Common.b2Settings.b2_linearSlop;
  return Box2D.Collision.b2TimeOfImpact.TimeOfImpact(Box2D.Dynamics.Contacts.b2Contact.s_input);
};


/**
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_flags = 0;


/**
 * @type {Box2D.Dynamics.Contacts.b2Contact}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_prev = null;


/**
 * @type {Box2D.Dynamics.Contacts.b2Contact}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_next = null;


/**
 * @type {Box2D.Dynamics.Contacts.b2ContactEdge}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_nodeA = null;


/**
 * @type {Box2D.Dynamics.Contacts.b2ContactEdge}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_nodeB = null;


/**
 * @type {Box2D.Dynamics.b2Fixture}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_fixtureA = null;


/**
 * @type {Box2D.Dynamics.b2Fixture}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_fixtureB = null;


/**
 * @type {Box2D.Collision.b2Manifold}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_manifold = null;


/**
 * @type {Box2D.Collision.b2Manifold}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_oldManifold = null;


/**
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.m_toi = NaN;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Contact', qName: 'Box2D.Dynamics.Contacts.b2Contact', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|e_sensorFlag': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = v : Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag;}},
        '|e_continuousFlag': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = v : Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag;}},
        '|e_islandFlag': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = v : Box2D.Dynamics.Contacts.b2Contact.e_islandFlag;}},
        '|e_toiFlag': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = v : Box2D.Dynamics.Contacts.b2Contact.e_toiFlag;}},
        '|e_touchingFlag': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = v : Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag;}},
        '|e_enabledFlag': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = v : Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag;}},
        '|e_filterFlag': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.Contacts.b2Contact.e_filterFlag = v : Box2D.Dynamics.Contacts.b2Contact.e_filterFlag;}},
        'm_flags': { type: 'uint', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_flags = v : inst.m_flags;}},
        'm_prev': { type: 'Box2D.Dynamics.Contacts.b2Contact', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_prev = v : inst.m_prev;}},
        'm_next': { type: 'Box2D.Dynamics.Contacts.b2Contact', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_next = v : inst.m_next;}},
        'm_nodeA': { type: 'Box2D.Dynamics.Contacts.b2ContactEdge', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_nodeA = v : inst.m_nodeA;}},
        'm_nodeB': { type: 'Box2D.Dynamics.Contacts.b2ContactEdge', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_nodeB = v : inst.m_nodeB;}},
        'm_fixtureA': { type: 'Box2D.Dynamics.b2Fixture', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_fixtureA = v : inst.m_fixtureA;}},
        'm_fixtureB': { type: 'Box2D.Dynamics.b2Fixture', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_fixtureB = v : inst.m_fixtureB;}},
        'm_manifold': { type: 'Box2D.Collision.b2Manifold', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_manifold = v : inst.m_manifold;}},
        'm_oldManifold': { type: 'Box2D.Collision.b2Manifold', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_oldManifold = v : inst.m_oldManifold;}},
        'm_toi': { type: 'Number', get_set: function (/** Box2D.Dynamics.Contacts.b2Contact */ inst, /** * */ v) {return v !== undefined ? inst.m_toi = v : inst.m_toi;}}
      };
    },
    methods: function () {
      return {
        'GetManifold': { type: 'Box2D.Collision.b2Manifold', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'GetWorldManifold': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact', parameters: function () { return [ 'Box2D.Collision.b2WorldManifold', false ]; }},
        'IsTouching': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'IsContinuous': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'SetSensor': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact', parameters: function () { return [ 'Boolean', false ]; }},
        'IsSensor': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'SetEnabled': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact', parameters: function () { return [ 'Boolean', false ]; }},
        'IsEnabled': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'GetNext': { type: 'Box2D.Dynamics.Contacts.b2Contact', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'GetFixtureA': { type: 'Box2D.Dynamics.b2Fixture', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'GetFixtureB': { type: 'Box2D.Dynamics.b2Fixture', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'FlagForFiltering': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'b2Contact': { type: '', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'Reset': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact', parameters: function () { return [ 'Box2D.Dynamics.b2Fixture', true ,'Box2D.Dynamics.b2Fixture', true ]; }},
        'Update': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact', parameters: function () { return [ 'Box2D.Dynamics.b2ContactListener', false ]; }},
        'Evaluate': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact'},
        'ComputeTOI': { type: 'Number', declaredBy: 'Box2D.Dynamics.Contacts.b2Contact', parameters: function () { return [ 'Box2D.Common.Math.b2Sweep', false ,'Box2D.Common.Math.b2Sweep', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.Contacts.b2Contact.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.Contacts.b2Contact);
