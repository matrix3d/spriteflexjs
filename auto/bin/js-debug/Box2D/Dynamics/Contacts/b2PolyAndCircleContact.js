/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/Contacts/b2PolyAndCircleContact.as
 * Box2D.Dynamics.Contacts.b2PolyAndCircleContact
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.Contacts.b2PolyAndCircleContact');
/* Royale Dependency List: Box2D.Collision.Shapes.b2CircleShape,Box2D.Collision.Shapes.b2PolygonShape,Box2D.Collision.Shapes.b2Shape,Box2D.Collision.b2Collision,Box2D.Common.b2Settings,Box2D.Dynamics.b2Body,Box2D.Dynamics.b2Fixture*/

goog.require('Box2D.Dynamics.Contacts.b2Contact');



/**
 * @constructor
 * @extends {Box2D.Dynamics.Contacts.b2Contact}
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact = function() {
  Box2D.Dynamics.Contacts.b2PolyAndCircleContact.base(this, 'constructor');
};
goog.inherits(Box2D.Dynamics.Contacts.b2PolyAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);


/**
 * @nocollapse
 * @param {*} allocator
 * @return {Box2D.Dynamics.Contacts.b2Contact}
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.Create = function(allocator) {
  return new Box2D.Dynamics.Contacts.b2PolyAndCircleContact();
};


/**
 * @nocollapse
 * @param {Box2D.Dynamics.Contacts.b2Contact} contact
 * @param {*} allocator
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.Destroy = function(contact, allocator) {
};


/**
 * @override
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.Reset = function(fixtureA, fixtureB) {
  fixtureA = typeof fixtureA !== 'undefined' ? fixtureA : null;
  fixtureB = typeof fixtureB !== 'undefined' ? fixtureB : null;
  Box2D.Dynamics.Contacts.b2PolyAndCircleContact.superClass_.Reset.apply(this, [ fixtureA, fixtureB] );
  Box2D.Common.b2Settings.b2Assert(fixtureA.GetType() == Box2D.Collision.Shapes.b2Shape.e_polygonShape);
  Box2D.Common.b2Settings.b2Assert(fixtureB.GetType() == Box2D.Collision.Shapes.b2Shape.e_circleShape);
};


/**
 * @override
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.Evaluate = function() {
  var /** @type {Box2D.Dynamics.b2Body} */ bA = this.m_fixtureA.m_body;
  var /** @type {Box2D.Dynamics.b2Body} */ bB = this.m_fixtureB.m_body;
  Box2D.Collision.b2Collision.CollidePolygonAndCircle(this.m_manifold, this.m_fixtureA.GetShape(), bA.m_xf, this.m_fixtureB.GetShape(), bB.m_xf);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2PolyAndCircleContact', qName: 'Box2D.Dynamics.Contacts.b2PolyAndCircleContact', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        '|Create': { type: 'Box2D.Dynamics.Contacts.b2Contact', declaredBy: 'Box2D.Dynamics.Contacts.b2PolyAndCircleContact', parameters: function () { return [ '*', false ]; }},
        '|Destroy': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2PolyAndCircleContact', parameters: function () { return [ 'Box2D.Dynamics.Contacts.b2Contact', false ,'*', false ]; }},
        'Reset': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2PolyAndCircleContact', parameters: function () { return [ 'Box2D.Dynamics.b2Fixture', true ,'Box2D.Dynamics.b2Fixture', true ]; }},
        'Evaluate': { type: 'void', declaredBy: 'Box2D.Dynamics.Contacts.b2PolyAndCircleContact'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.Contacts.b2PolyAndCircleContact);
