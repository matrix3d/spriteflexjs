/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/Joints/b2FrictionJoint.as
 * Box2D.Dynamics.Joints.b2FrictionJoint
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.Joints.b2FrictionJoint');
/* Royale Dependency List: Box2D.Common.Math.b2Mat22,Box2D.Common.Math.b2Math,Box2D.Common.Math.b2Vec2,Box2D.Dynamics.Joints.b2FrictionJointDef,Box2D.Dynamics.b2Body,Box2D.Dynamics.b2TimeStep*/

goog.require('Box2D.Dynamics.Joints.b2Joint');



/** @asprivate 
 * @constructor
 * @extends {Box2D.Dynamics.Joints.b2Joint}
 * @param {Box2D.Dynamics.Joints.b2FrictionJointDef} def
 */
Box2D.Dynamics.Joints.b2FrictionJoint = function(def) {
  
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA = new Box2D.Common.Math.b2Vec2();
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB = new Box2D.Common.Math.b2Vec2();
  this.m_linearMass = new Box2D.Common.Math.b2Mat22();
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse = new Box2D.Common.Math.b2Vec2();
  Box2D.Dynamics.Joints.b2FrictionJoint.base(this, 'constructor', def);
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA.SetV(def.localAnchorA);
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB.SetV(def.localAnchorB);
  this.m_linearMass.SetZero();
  this.m_angularMass = 0.0;
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.SetZero();
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse = 0.0;
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxForce = def.maxForce;
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxTorque = def.maxTorque;
};
goog.inherits(Box2D.Dynamics.Joints.b2FrictionJoint, Box2D.Dynamics.Joints.b2Joint);


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetAnchorA = function() {
  return this.m_bodyA.GetWorldPoint(this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA);
};


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetAnchorB = function() {
  return this.m_bodyB.GetWorldPoint(this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB);
};


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetReactionForce = function(inv_dt) {
  return new Box2D.Common.Math.b2Vec2(inv_dt * this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.x, inv_dt * this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.y);
};


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetReactionTorque = function(inv_dt) {
  return inv_dt * this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse;
};


/**
 * @param {number} force
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SetMaxForce = function(force) {
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxForce = force;
};


/**
 * @return {number}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetMaxForce = function() {
  return this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxForce;
};


/**
 * @param {number} torque
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SetMaxTorque = function(torque) {
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxTorque = torque;
};


/**
 * @return {number}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetMaxTorque = function() {
  return this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxTorque;
};


/**
 * @override
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.InitVelocityConstraints = function(step) {
  var /** @type {number} */ tX = NaN;
  var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  //var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  //var /** @type {number} */ tX = NaN;
  var /** @type {Box2D.Dynamics.b2Body} */ bA = this.m_bodyA;
  var /** @type {Box2D.Dynamics.b2Body} */ bB = this.m_bodyB;
  tMat = bA.m_xf.R;
  var /** @type {number} */ rAX = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA.x - bA.m_sweep.localCenter.x;
  var /** @type {number} */ rAY = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA.y - bA.m_sweep.localCenter.y;
  tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
  rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
  rAX = tX;
  tMat = bB.m_xf.R;
  var /** @type {number} */ rBX = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB.x - bB.m_sweep.localCenter.x;
  var /** @type {number} */ rBY = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB.y - bB.m_sweep.localCenter.y;
  tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
  rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
  rBX = tX;
  var /** @type {number} */ mA = bA.m_invMass;
  var /** @type {number} */ mB = bB.m_invMass;
  var /** @type {number} */ iA = bA.m_invI;
  var /** @type {number} */ iB = bB.m_invI;
  var /** @type {Box2D.Common.Math.b2Mat22} */ K = new Box2D.Common.Math.b2Mat22();
  K.col1.x = mA + mB;
  K.col2.x = 0.0;
  K.col1.y = 0.0;
  K.col2.y = mA + mB;
  K.col1.x += iA * rAY * rAY;
  K.col2.x += -iA * rAX * rAY;
  K.col1.y += -iA * rAX * rAY;
  K.col2.y += iA * rAX * rAX;
  K.col1.x += iB * rBY * rBY;
  K.col2.x += -iB * rBX * rBY;
  K.col1.y += -iB * rBX * rBY;
  K.col2.y += iB * rBX * rBX;
  K.GetInverse(this.m_linearMass);
  this.m_angularMass = iA + iB;
  if (this.m_angularMass > 0.0) {
    this.m_angularMass = 1.0 / this.m_angularMass;
  }
  if (step.warmStarting) {
    this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.x *= step.dtRatio;
    this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.y *= step.dtRatio;
    this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse *= step.dtRatio;
    var /** @type {Box2D.Common.Math.b2Vec2} */ P = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse;
    bA.m_linearVelocity.x -= mA * P.x;
    bA.m_linearVelocity.y -= mA * P.y;
    bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse);
    bB.m_linearVelocity.x += mB * P.x;
    bB.m_linearVelocity.y += mB * P.y;
    bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse);
  } else {
    this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.SetZero();
    this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse = 0.0;
  }
};


/**
 * @override
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SolveVelocityConstraints = function(step) {
  var /** @type {number} */ tX = NaN;
  var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  var /** @type {number} */ maxImpulse = NaN;
  //var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  //var /** @type {number} */ tX = NaN;
  var /** @type {Box2D.Dynamics.b2Body} */ bA = this.m_bodyA;
  var /** @type {Box2D.Dynamics.b2Body} */ bB = this.m_bodyB;
  var /** @type {Box2D.Common.Math.b2Vec2} */ vA = bA.m_linearVelocity;
  var /** @type {number} */ wA = bA.m_angularVelocity;
  var /** @type {Box2D.Common.Math.b2Vec2} */ vB = bB.m_linearVelocity;
  var /** @type {number} */ wB = bB.m_angularVelocity;
  var /** @type {number} */ mA = bA.m_invMass;
  var /** @type {number} */ mB = bB.m_invMass;
  var /** @type {number} */ iA = bA.m_invI;
  var /** @type {number} */ iB = bB.m_invI;
  tMat = bA.m_xf.R;
  var /** @type {number} */ rAX = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA.x - bA.m_sweep.localCenter.x;
  var /** @type {number} */ rAY = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA.y - bA.m_sweep.localCenter.y;
  tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
  rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
  rAX = tX;
  tMat = bB.m_xf.R;
  var /** @type {number} */ rBX = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB.x - bB.m_sweep.localCenter.x;
  var /** @type {number} */ rBY = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB.y - bB.m_sweep.localCenter.y;
  tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
  rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
  rBX = tX;
  //var /** @type {number} */ maxImpulse = NaN;
  var /** @type {number} */ Cdot = wB - wA;
  var /** @type {number} */ impulse = -this.m_angularMass * Cdot;
  var /** @type {number} */ oldImpulse = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse;
  maxImpulse = step.dt * this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxTorque;
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse = Box2D.Common.Math.b2Math.Clamp(this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse + impulse, -maxImpulse, maxImpulse);
  impulse = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse - oldImpulse;
  wA -= iA * impulse;
  wB += iB * impulse;
  var /** @type {number} */ CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
  var /** @type {number} */ CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
  var /** @type {Box2D.Common.Math.b2Vec2} */ impulseV = Box2D.Common.Math.b2Math.MulMV(this.m_linearMass, new Box2D.Common.Math.b2Vec2(-CdotX, -CdotY));
  var /** @type {Box2D.Common.Math.b2Vec2} */ oldImpulseV = this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.Copy();
  this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.Add(impulseV);
  maxImpulse = step.dt * this.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxForce;
  if (this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
    this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.Normalize();
    this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse.Multiply(maxImpulse);
  }
  impulseV = Box2D.Common.Math.b2Math.SubtractVV(this.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse, oldImpulseV);
  vA.x -= mA * impulseV.x;
  vA.y -= mA * impulseV.y;
  wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
  vB.x += mB * impulseV.x;
  vB.y += mB * impulseV.y;
  wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
  bA.m_angularVelocity = wA;
  bB.m_angularVelocity = wB;
};


/**
 * @override
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SolvePositionConstraints = function(baumgarte) {
  return true;
};


/**
 * @private
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorA = null;


/**
 * @private
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.Box2D_Dynamics_Joints_b2FrictionJoint_m_localAnchorB = null;


/**
 * @type {Box2D.Common.Math.b2Mat22}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.m_linearMass = null;


/**
 * @type {number}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.m_angularMass = NaN;


/**
 * @private
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.Box2D_Dynamics_Joints_b2FrictionJoint_m_linearImpulse = null;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.Box2D_Dynamics_Joints_b2FrictionJoint_m_angularImpulse = NaN;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxForce = NaN;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.Box2D_Dynamics_Joints_b2FrictionJoint_m_maxTorque = NaN;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2FrictionJoint', qName: 'Box2D.Dynamics.Joints.b2FrictionJoint', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'm_linearMass': { type: 'Box2D.Common.Math.b2Mat22', get_set: function (/** Box2D.Dynamics.Joints.b2FrictionJoint */ inst, /** * */ v) {return v !== undefined ? inst.m_linearMass = v : inst.m_linearMass;}},
        'm_angularMass': { type: 'Number', get_set: function (/** Box2D.Dynamics.Joints.b2FrictionJoint */ inst, /** * */ v) {return v !== undefined ? inst.m_angularMass = v : inst.m_angularMass;}}
      };
    },
    methods: function () {
      return {
        'GetAnchorA': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint'},
        'GetAnchorB': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint'},
        'GetReactionForce': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Number', false ]; }},
        'GetReactionTorque': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Number', false ]; }},
        'SetMaxForce': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Number', false ]; }},
        'GetMaxForce': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint'},
        'SetMaxTorque': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Number', false ]; }},
        'GetMaxTorque': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint'},
        'b2FrictionJoint': { type: '', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Box2D.Dynamics.Joints.b2FrictionJointDef', false ]; }},
        'InitVelocityConstraints': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Box2D.Dynamics.b2TimeStep', false ]; }},
        'SolveVelocityConstraints': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Box2D.Dynamics.b2TimeStep', false ]; }},
        'SolvePositionConstraints': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Joints.b2FrictionJoint', parameters: function () { return [ 'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2FrictionJoint.prototype.ROYALE_COMPILE_FLAGS = 9;
