/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/Joints/b2Joint.as
 * Box2D.Dynamics.Joints.b2Joint
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.Joints.b2Joint');
/* Royale Dependency List: Box2D.Common.Math.b2Vec2,Box2D.Common.b2Settings,Box2D.Dynamics.Joints.b2JointDef,Box2D.Dynamics.Joints.b2JointEdge,Box2D.Dynamics.b2Body,Box2D.Dynamics.b2TimeStep*/




/** @asprivate 
 * @constructor
 * @param {Box2D.Dynamics.Joints.b2JointDef} def
 */
Box2D.Dynamics.Joints.b2Joint = function(def) {
  
  this.m_edgeA = new Box2D.Dynamics.Joints.b2JointEdge();
  this.m_edgeB = new Box2D.Dynamics.Joints.b2JointEdge();
  this.m_localCenterA = new Box2D.Common.Math.b2Vec2();
  this.m_localCenterB = new Box2D.Common.Math.b2Vec2();
  Box2D.Common.b2Settings.b2Assert(def.bodyA != def.bodyB);
  this.m_type = def.type;
  this.m_prev = null;
  this.m_next = null;
  this.m_bodyA = def.bodyA;
  this.m_bodyB = def.bodyB;
  this.m_collideConnected = def.collideConnected;
  this.m_islandFlag = false;
  this.Box2D_Dynamics_Joints_b2Joint_m_userData = def.userData;
};


/**
 * Get the type of the concrete joint.
 * @return {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetType = function() {
  return this.m_type;
};


/**
 * Get the anchor point on bodyA in world coordinates.
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetAnchorA = function() {
  return null;
};


/**
 * Get the anchor point on bodyB in world coordinates.
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetAnchorB = function() {
  return null;
};


/**
 * Get the reaction force on body2 at the joint anchor in Newtons.
 * @param {number} inv_dt
 * @return {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetReactionForce = function(inv_dt) {
  return null;
};


/**
 * Get the reaction torque on body2 in N*m.
 * @param {number} inv_dt
 * @return {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetReactionTorque = function(inv_dt) {
  return 0.0;
};


/**
 * Get the first body attached to this joint.
 * @return {Box2D.Dynamics.b2Body}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetBodyA = function() {
  return this.m_bodyA;
};


/**
 * Get the second body attached to this joint.
 * @return {Box2D.Dynamics.b2Body}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetBodyB = function() {
  return this.m_bodyB;
};


/**
 * Get the next joint the world joint list.
 * @return {Box2D.Dynamics.Joints.b2Joint}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetNext = function() {
  return this.m_next;
};


/**
 * Get the user data pointer.
 * @return {*}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.GetUserData = function() {
  return this.Box2D_Dynamics_Joints_b2Joint_m_userData;
};


/**
 * Set the user data pointer.
 * @param {*} data
 */
Box2D.Dynamics.Joints.b2Joint.prototype.SetUserData = function(data) {
  this.Box2D_Dynamics_Joints_b2Joint_m_userData = data;
};


/**
 * Short-cut function to determine if either body is inactive.
 * @asreturn
 * @return {boolean}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.IsActive = function() {
  return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
};


/**
 * @nocollapse
 * @param {Box2D.Dynamics.Joints.b2Joint} joint
 * @param {*} allocator
 */
Box2D.Dynamics.Joints.b2Joint.Destroy = function(joint, allocator) {
};


/**
 * @param {Box2D.Dynamics.b2TimeStep} step
 */
Box2D.Dynamics.Joints.b2Joint.prototype.InitVelocityConstraints = function(step) {
};


/**
 * @param {Box2D.Dynamics.b2TimeStep} step
 */
Box2D.Dynamics.Joints.b2Joint.prototype.SolveVelocityConstraints = function(step) {
};


/**
 */
Box2D.Dynamics.Joints.b2Joint.prototype.FinalizeVelocityConstraints = function() {
};


/**
 * @param {number} baumgarte
 * @return {boolean}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.SolvePositionConstraints = function(baumgarte) {
  return false;
};


/**
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_type = 0;


/**
 * @type {Box2D.Dynamics.Joints.b2Joint}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_prev = null;


/**
 * @type {Box2D.Dynamics.Joints.b2Joint}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_next = null;


/**
 * @type {Box2D.Dynamics.Joints.b2JointEdge}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_edgeA = null;


/**
 * @type {Box2D.Dynamics.Joints.b2JointEdge}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_edgeB = null;


/**
 * @type {Box2D.Dynamics.b2Body}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_bodyA = null;


/**
 * @type {Box2D.Dynamics.b2Body}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_bodyB = null;


/**
 * @type {boolean}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_islandFlag = false;


/**
 * @type {boolean}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_collideConnected = false;


/**
 * @private
 * @type {*}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.Box2D_Dynamics_Joints_b2Joint_m_userData = undefined;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_localCenterA = null;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_localCenterB = null;


/**
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_invMassA = NaN;


/**
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_invMassB = NaN;


/**
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_invIA = NaN;


/**
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.m_invIB = NaN;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2Joint', qName: 'Box2D.Dynamics.Joints.b2Joint', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'm_type': { type: 'int', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_type = v : inst.m_type;}},
        'm_prev': { type: 'Box2D.Dynamics.Joints.b2Joint', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_prev = v : inst.m_prev;}},
        'm_next': { type: 'Box2D.Dynamics.Joints.b2Joint', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_next = v : inst.m_next;}},
        'm_edgeA': { type: 'Box2D.Dynamics.Joints.b2JointEdge', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_edgeA = v : inst.m_edgeA;}},
        'm_edgeB': { type: 'Box2D.Dynamics.Joints.b2JointEdge', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_edgeB = v : inst.m_edgeB;}},
        'm_bodyA': { type: 'Box2D.Dynamics.b2Body', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_bodyA = v : inst.m_bodyA;}},
        'm_bodyB': { type: 'Box2D.Dynamics.b2Body', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_bodyB = v : inst.m_bodyB;}},
        'm_islandFlag': { type: 'Boolean', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_islandFlag = v : inst.m_islandFlag;}},
        'm_collideConnected': { type: 'Boolean', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_collideConnected = v : inst.m_collideConnected;}},
        'm_localCenterA': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_localCenterA = v : inst.m_localCenterA;}},
        'm_localCenterB': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_localCenterB = v : inst.m_localCenterB;}},
        'm_invMassA': { type: 'Number', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_invMassA = v : inst.m_invMassA;}},
        'm_invMassB': { type: 'Number', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_invMassB = v : inst.m_invMassB;}},
        'm_invIA': { type: 'Number', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_invIA = v : inst.m_invIA;}},
        'm_invIB': { type: 'Number', get_set: function (/** Box2D.Dynamics.Joints.b2Joint */ inst, /** * */ v) {return v !== undefined ? inst.m_invIB = v : inst.m_invIB;}}
      };
    },
    methods: function () {
      return {
        'GetType': { type: 'int', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'GetAnchorA': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'GetAnchorB': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'GetReactionForce': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ 'Number', false ]; }},
        'GetReactionTorque': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ 'Number', false ]; }},
        'GetBodyA': { type: 'Box2D.Dynamics.b2Body', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'GetBodyB': { type: 'Box2D.Dynamics.b2Body', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'GetNext': { type: 'Box2D.Dynamics.Joints.b2Joint', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'GetUserData': { type: '*', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'SetUserData': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ '*', false ]; }},
        'IsActive': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        '|Destroy': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ 'Box2D.Dynamics.Joints.b2Joint', false ,'*', false ]; }},
        'b2Joint': { type: '', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ 'Box2D.Dynamics.Joints.b2JointDef', false ]; }},
        'InitVelocityConstraints': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ 'Box2D.Dynamics.b2TimeStep', false ]; }},
        'SolveVelocityConstraints': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ 'Box2D.Dynamics.b2TimeStep', false ]; }},
        'FinalizeVelocityConstraints': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2Joint'},
        'SolvePositionConstraints': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Joints.b2Joint', parameters: function () { return [ 'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.Joints.b2Joint.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.Joints.b2Joint);
