/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/Joints/b2RevoluteJoint.as
 * Box2D.Dynamics.Joints.b2RevoluteJoint
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.Joints.b2RevoluteJoint');
/* Royale Dependency List: Box2D.Common.Math.b2Mat22,Box2D.Common.Math.b2Mat33,Box2D.Common.Math.b2Math,Box2D.Common.Math.b2Vec2,Box2D.Common.Math.b2Vec3,Box2D.Common.b2Settings,Box2D.Dynamics.Joints.b2RevoluteJointDef,Box2D.Dynamics.b2Body,Box2D.Dynamics.b2TimeStep*/

goog.require('Box2D.Dynamics.Joints.b2Joint');



/** @asprivate 
 * @constructor
 * @extends {Box2D.Dynamics.Joints.b2Joint}
 * @param {Box2D.Dynamics.Joints.b2RevoluteJointDef} def
 */
Box2D.Dynamics.Joints.b2RevoluteJoint = function(def) {
  
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K = new Box2D.Common.Math.b2Mat22();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K1 = new Box2D.Common.Math.b2Mat22();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K2 = new Box2D.Common.Math.b2Mat22();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K3 = new Box2D.Common.Math.b2Mat22();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3 = new Box2D.Common.Math.b2Vec3();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2 = new Box2D.Common.Math.b2Vec2();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced = new Box2D.Common.Math.b2Vec2();
  this.m_localAnchor1 = new Box2D.Common.Math.b2Vec2();
  this.m_localAnchor2 = new Box2D.Common.Math.b2Vec2();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse = new Box2D.Common.Math.b2Vec3();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass = new Box2D.Common.Math.b2Mat33();
  Box2D.Dynamics.Joints.b2RevoluteJoint.base(this, 'constructor', def);
  this.m_localAnchor1.SetV(def.localAnchorA);
  this.m_localAnchor2.SetV(def.localAnchorB);
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_referenceAngle = def.referenceAngle;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.SetZero();
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse = 0.0;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle = def.lowerAngle;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_upperAngle = def.upperAngle;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_maxMotorTorque = def.maxMotorTorque;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorSpeed = def.motorSpeed;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableLimit = def.enableLimit;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableMotor = def.enableMotor;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
};
goog.inherits(Box2D.Dynamics.Joints.b2RevoluteJoint, Box2D.Dynamics.Joints.b2Joint);


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetAnchorA = function() {
  return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
};


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetAnchorB = function() {
  return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
};


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetReactionForce = function(inv_dt) {
  return new Box2D.Common.Math.b2Vec2(inv_dt * this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.x, inv_dt * this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.y);
};


/** @inheritDoc 
 * @override
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetReactionTorque = function(inv_dt) {
  return inv_dt * this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z;
};


/**
 * Get the current joint angle in radians.
 * @return {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetJointAngle = function() {
  return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_referenceAngle;
};


/**
 * Get the current joint angle speed in radians per second.
 * @return {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetJointSpeed = function() {
  return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
};


/**
 * Is the joint limit enabled?
 * @return {boolean}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.IsLimitEnabled = function() {
  return this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableLimit;
};


/**
 * Enable/disable the joint limit.
 * @param {boolean} flag
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.EnableLimit = function(flag) {
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableLimit = flag;
};


/**
 * Get the lower joint limit in radians.
 * @return {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetLowerLimit = function() {
  return this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle;
};


/**
 * Get the upper joint limit in radians.
 * @return {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetUpperLimit = function() {
  return this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_upperAngle;
};


/**
 * Set the joint limits in radians.
 * @param {number} lower
 * @param {number} upper
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetLimits = function(lower, upper) {
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle = lower;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_upperAngle = upper;
};


/**
 * Is the joint motor enabled?
 * @return {boolean}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.IsMotorEnabled = function() {
  this.m_bodyA.SetAwake(true);
  this.m_bodyB.SetAwake(true);
  return this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableMotor;
};


/**
 * Enable/disable the joint motor.
 * @param {boolean} flag
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.EnableMotor = function(flag) {
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableMotor = flag;
};


/**
 * Set the motor speed in radians per second.
 * @param {number} speed
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetMotorSpeed = function(speed) {
  this.m_bodyA.SetAwake(true);
  this.m_bodyB.SetAwake(true);
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorSpeed = speed;
};


/**
 * Get the motor speed in radians per second.
 * @return {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetMotorSpeed = function() {
  return this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorSpeed;
};


/**
 * Set the maximum motor torque, usually in N-m.
 * @param {number} torque
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetMaxMotorTorque = function(torque) {
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_maxMotorTorque = torque;
};


/**
 * Get the current motor torque, usually in N-m.
 * @return {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetMotorTorque = function() {
  return this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_maxMotorTorque;
};


/**
 * @private
 * @type {Box2D.Common.Math.b2Mat22}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_K = null;


/**
 * @private
 * @type {Box2D.Common.Math.b2Mat22}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_K1 = null;


/**
 * @private
 * @type {Box2D.Common.Math.b2Mat22}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_K2 = null;


/**
 * @private
 * @type {Box2D.Common.Math.b2Mat22}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_K3 = null;


/**
 * @override
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.InitVelocityConstraints = function(step) {
  var /** @type {number} */ tX = NaN;
  var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  var /** @type {Box2D.Dynamics.b2Body} */ bA = this.m_bodyA;
  var /** @type {Box2D.Dynamics.b2Body} */ bB = this.m_bodyB;
  //var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  //var /** @type {number} */ tX = NaN;
  tMat = bA.m_xf.R;
  var /** @type {number} */ r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
  var /** @type {number} */ r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
  tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
  r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
  r1X = tX;
  tMat = bB.m_xf.R;
  var /** @type {number} */ r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
  var /** @type {number} */ r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
  tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
  r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
  r2X = tX;
  var /** @type {number} */ m1 = bA.m_invMass;
  var /** @type {number} */ m2 = bB.m_invMass;
  var /** @type {number} */ i1 = bA.m_invI;
  var /** @type {number} */ i2 = bB.m_invI;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col2.x = -r1Y * r1X * i1 - r2Y * r2X * i2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col3.x = -r1Y * i1 - r2Y * i2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col1.y = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col2.x;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col3.y = r1X * i1 + r2X * i2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col1.z = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col3.x;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col2.z = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col3.y;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.col3.z = i1 + i2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorMass = 1.0 / (i1 + i2);
  if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableMotor == false) {
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse = 0.0;
  }
  if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableLimit) {
    var /** @type {number} */ jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_referenceAngle;
    if (Box2D.Common.Math.b2Math.Abs(this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_upperAngle - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle) < 2.0 * Box2D.Common.b2Settings.b2_angularSlop) {
      this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState = Box2D.Dynamics.Joints.b2Joint.e_equalLimits;
    } else if (jointAngle <= this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle) {
      if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z = 0.0;
      }
      this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit;
    } else if (jointAngle >= this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_upperAngle) {
      if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z = 0.0;
      }
      this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
    } else {
      this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
      this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z = 0.0;
    }
  } else {
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
  }
  if (step.warmStarting) {
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.x *= step.dtRatio;
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.y *= step.dtRatio;
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse *= step.dtRatio;
    var /** @type {number} */ PX = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.x;
    var /** @type {number} */ PY = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.y;
    bA.m_linearVelocity.x -= m1 * PX;
    bA.m_linearVelocity.y -= m1 * PY;
    bA.m_angularVelocity -= i1 * ((r1X * PY - r1Y * PX) + this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse + this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z);
    bB.m_linearVelocity.x += m2 * PX;
    bB.m_linearVelocity.y += m2 * PY;
    bB.m_angularVelocity += i2 * ((r2X * PY - r2Y * PX) + this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse + this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z);
  } else {
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.SetZero();
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse = 0.0;
  }
};


/**
 * @private
 * @type {Box2D.Common.Math.b2Vec3}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3 = null;


/**
 * @private
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2 = null;


/**
 * @private
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced = null;


/**
 * @override
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SolveVelocityConstraints = function(step) {
  var /** @type {number} */ r2Y = NaN;
  var /** @type {number} */ r2X = NaN;
  var /** @type {number} */ tX = NaN;
  var /** @type {number} */ newImpulse = NaN;
  var /** @type {number} */ r1X = NaN;
  var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  var /** @type {number} */ r1Y = NaN;
  var /** @type {Box2D.Dynamics.b2Body} */ bA = this.m_bodyA;
  var /** @type {Box2D.Dynamics.b2Body} */ bB = this.m_bodyB;
  //var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  //var /** @type {number} */ tX = NaN;
  //var /** @type {number} */ newImpulse = NaN;
  //var /** @type {number} */ r1X = NaN;
  //var /** @type {number} */ r1Y = NaN;
  //var /** @type {number} */ r2X = NaN;
  //var /** @type {number} */ r2Y = NaN;
  var /** @type {Box2D.Common.Math.b2Vec2} */ v1 = bA.m_linearVelocity;
  var /** @type {number} */ w1 = bA.m_angularVelocity;
  var /** @type {Box2D.Common.Math.b2Vec2} */ v2 = bB.m_linearVelocity;
  var /** @type {number} */ w2 = bB.m_angularVelocity;
  var /** @type {number} */ m1 = bA.m_invMass;
  var /** @type {number} */ m2 = bB.m_invMass;
  var /** @type {number} */ i1 = bA.m_invI;
  var /** @type {number} */ i2 = bB.m_invI;
  if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableMotor && this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState != Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
    var /** @type {number} */ Cdot = w2 - w1 - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorSpeed;
    var /** @type {number} */ impulse = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorMass * (-Cdot);
    var /** @type {number} */ oldImpulse = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse;
    var /** @type {number} */ maxImpulse = step.dt * this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_maxMotorTorque;
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse = Box2D.Common.Math.b2Math.Clamp(this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse + impulse, -maxImpulse, maxImpulse);
    impulse = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse - oldImpulse;
    w1 -= i1 * impulse;
    w2 += i2 * impulse;
  }
  if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableLimit && this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
    tMat = bA.m_xf.R;
    r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
    r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
    tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
    r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
    r1X = tX;
    tMat = bB.m_xf.R;
    r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
    r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
    tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
    r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
    r2X = tX;
    var /** @type {number} */ Cdot1X = v2.x + (-w2 * r2Y) - v1.x - (-w1 * r1Y);
    var /** @type {number} */ Cdot1Y = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
    var /** @type {number} */ Cdot2 = w2 - w1;
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.Solve33(this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3, -Cdot1X, -Cdot1Y, -Cdot2);
    if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState == Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
      this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.Add(this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3);
    } else if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
      newImpulse = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z + this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.z;
      if (newImpulse < 0.0) {
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.Solve22(this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced, -Cdot1X, -Cdot1Y);
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.x = this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.x;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.y = this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.y;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.z = -this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.x += this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.x;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.y += this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.y;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z = 0.0;
      }
    } else if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
      newImpulse = this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z + this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.z;
      if (newImpulse > 0.0) {
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.Solve22(this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced, -Cdot1X, -Cdot1Y);
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.x = this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.x;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.y = this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.y;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.z = -this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.x += this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.x;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.y += this.Box2D_Dynamics_Joints_b2RevoluteJoint_reduced.y;
        this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.z = 0.0;
      }
    }
    v1.x -= m1 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.x;
    v1.y -= m1 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.y;
    w1 -= i1 * (r1X * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.y - r1Y * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.x + this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.z);
    v2.x += m2 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.x;
    v2.y += m2 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.y;
    w2 += i2 * (r2X * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.y - r2Y * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.x + this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse3.z);
  } else {
    tMat = bA.m_xf.R;
    r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
    r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
    tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
    r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
    r1X = tX;
    tMat = bB.m_xf.R;
    r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
    r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
    tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
    r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
    r2X = tX;
    var /** @type {number} */ CdotX = v2.x + (-w2 * r2Y) - v1.x - (-w1 * r1Y);
    var /** @type {number} */ CdotY = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass.Solve22(this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2, -CdotX, -CdotY);
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.x += this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.x;
    this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse.y += this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.y;
    v1.x -= m1 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.x;
    v1.y -= m1 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.y;
    w1 -= i1 * (r1X * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.y - r1Y * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.x);
    v2.x += m2 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.x;
    v2.y += m2 * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.y;
    w2 += i2 * (r2X * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.y - r2Y * this.Box2D_Dynamics_Joints_b2RevoluteJoint_impulse2.x);
  }
  bA.m_linearVelocity.SetV(v1);
  bA.m_angularVelocity = w1;
  bB.m_linearVelocity.SetV(v2);
  bB.m_angularVelocity = w2;
};


Box2D.Dynamics.Joints.b2RevoluteJoint.get__tImpulse = function() {
  var value = new Box2D.Common.Math.b2Vec2();
  Object.defineProperties(Box2D.Dynamics.Joints.b2RevoluteJoint, { tImpulse: { value: value, writable: true }});
  return value;
};
Box2D.Dynamics.Joints.b2RevoluteJoint.set__tImpulse = function(value) {
  Object.defineProperties(Box2D.Dynamics.Joints.b2RevoluteJoint, { tImpulse: { value: value, writable: true }});
};
/**
 * @private
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse;

Object.defineProperties(Box2D.Dynamics.Joints.b2RevoluteJoint, /** @lends {Box2D.Dynamics.Joints.b2RevoluteJoint} */ {
/**
 * @private
 * @type {Box2D.Common.Math.b2Vec2}
 */
tImpulse: {
  get: Box2D.Dynamics.Joints.b2RevoluteJoint.get__tImpulse,
  set: Box2D.Dynamics.Joints.b2RevoluteJoint.set__tImpulse,
  configurable: true}});


/**
 * @override
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SolvePositionConstraints = function(baumgarte) {
  var /** @type {number} */ C = NaN;
  var /** @type {number} */ oldLimitImpulse = NaN;
  var /** @type {number} */ impulseY = NaN;
  var /** @type {number} */ tX = NaN;
  var /** @type {number} */ impulseX = NaN;
  var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  //var /** @type {number} */ oldLimitImpulse = NaN;
  //var /** @type {number} */ C = NaN;
  //var /** @type {Box2D.Common.Math.b2Mat22} */ tMat = null;
  var /** @type {Box2D.Dynamics.b2Body} */ bA = this.m_bodyA;
  var /** @type {Box2D.Dynamics.b2Body} */ bB = this.m_bodyB;
  var /** @type {number} */ angularError = 0.0;
  var /** @type {number} */ positionError = 0.0;
  //var /** @type {number} */ tX = NaN;
  //var /** @type {number} */ impulseX = NaN;
  //var /** @type {number} */ impulseY = NaN;
  if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableLimit && this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
    var /** @type {number} */ angle = bB.m_sweep.a - bA.m_sweep.a - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_referenceAngle;
    var /** @type {number} */ limitImpulse = 0.0;
    if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState == Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
      C = Box2D.Common.Math.b2Math.Clamp(angle - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle, -Box2D.Common.b2Settings.b2_maxAngularCorrection, Box2D.Common.b2Settings.b2_maxAngularCorrection);
      limitImpulse = -this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorMass * C;
      angularError = Box2D.Common.Math.b2Math.Abs(C);
    } else if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
      C = angle - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle;
      angularError = -C;
      C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_angularSlop, -Box2D.Common.b2Settings.b2_maxAngularCorrection, 0.0);
      limitImpulse = -this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorMass * C;
    } else if (this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
      C = angle - this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_upperAngle;
      angularError = C;
      C = Box2D.Common.Math.b2Math.Clamp(C - Box2D.Common.b2Settings.b2_angularSlop, 0.0, Box2D.Common.b2Settings.b2_maxAngularCorrection);
      limitImpulse = -this.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorMass * C;
    }
    bA.m_sweep.a -= bA.m_invI * limitImpulse;
    bB.m_sweep.a += bB.m_invI * limitImpulse;
    bA.SynchronizeTransform();
    bB.SynchronizeTransform();
  }
  tMat = bA.m_xf.R;
  var /** @type {number} */ r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
  var /** @type {number} */ r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
  tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
  r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
  r1X = tX;
  tMat = bB.m_xf.R;
  var /** @type {number} */ r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
  var /** @type {number} */ r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
  tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
  r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
  r2X = tX;
  var /** @type {number} */ CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
  var /** @type {number} */ CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
  var /** @type {number} */ CLengthSquared = CX * CX + CY * CY;
  var /** @type {number} */ CLength = Math.sqrt(CLengthSquared);
  positionError = CLength;
  var /** @type {number} */ invMass1 = bA.m_invMass;
  var /** @type {number} */ invMass2 = bB.m_invMass;
  var /** @type {number} */ invI1 = bA.m_invI;
  var /** @type {number} */ invI2 = bB.m_invI;
  
/**
 * @const
 * @type {number}
 */
var k_allowedStretch = 10.0 * Box2D.Common.b2Settings.b2_linearSlop;
  if (CLengthSquared > k_allowedStretch * k_allowedStretch) {
    var /** @type {number} */ uX = CX / CLength;
    var /** @type {number} */ uY = CY / CLength;
    var /** @type {number} */ k = invMass1 + invMass2;
    var /** @type {number} */ m = 1.0 / k;
    impulseX = m * (-CX);
    impulseY = m * (-CY);
    
/**
 * @const
 * @type {number}
 */
var k_beta = 0.5;
    bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
    bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
    bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
    bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
    CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
    CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
  }
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K1.col1.x = invMass1 + invMass2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K1.col2.x = 0.0;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K1.col1.y = 0.0;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K1.col2.y = invMass1 + invMass2;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K2.col1.x = invI1 * r1Y * r1Y;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K2.col2.x = -invI1 * r1X * r1Y;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K2.col1.y = -invI1 * r1X * r1Y;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K2.col2.y = invI1 * r1X * r1X;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K3.col1.x = invI2 * r2Y * r2Y;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K3.col2.x = -invI2 * r2X * r2Y;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K3.col1.y = -invI2 * r2X * r2Y;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K3.col2.y = invI2 * r2X * r2X;
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K.SetM(this.Box2D_Dynamics_Joints_b2RevoluteJoint_K1);
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K.AddM(this.Box2D_Dynamics_Joints_b2RevoluteJoint_K2);
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K.AddM(this.Box2D_Dynamics_Joints_b2RevoluteJoint_K3);
  this.Box2D_Dynamics_Joints_b2RevoluteJoint_K.Solve(Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse, -CX, -CY);
  impulseX = Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse.x;
  impulseY = Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse.y;
  bA.m_sweep.c.x -= bA.m_invMass * impulseX;
  bA.m_sweep.c.y -= bA.m_invMass * impulseY;
  bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
  bB.m_sweep.c.x += bB.m_invMass * impulseX;
  bB.m_sweep.c.y += bB.m_invMass * impulseY;
  bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
  bA.SynchronizeTransform();
  bB.SynchronizeTransform();
  return positionError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
};


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.m_localAnchor1 = null;


/**
 * @type {Box2D.Common.Math.b2Vec2}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.m_localAnchor2 = null;


/**
 * @private
 * @type {Box2D.Common.Math.b2Vec3}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_impulse = null;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorImpulse = NaN;


/**
 * @private
 * @type {Box2D.Common.Math.b2Mat33}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_mass = null;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorMass = NaN;


/**
 * @private
 * @type {boolean}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableMotor = false;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_maxMotorTorque = NaN;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_motorSpeed = NaN;


/**
 * @private
 * @type {boolean}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_enableLimit = false;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_referenceAngle = NaN;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_lowerAngle = NaN;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_upperAngle = NaN;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.Box2D_Dynamics_Joints_b2RevoluteJoint_m_limitState = 0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2RevoluteJoint', qName: 'Box2D.Dynamics.Joints.b2RevoluteJoint', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'm_localAnchor1': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Dynamics.Joints.b2RevoluteJoint */ inst, /** * */ v) {return v !== undefined ? inst.m_localAnchor1 = v : inst.m_localAnchor1;}},
        'm_localAnchor2': { type: 'Box2D.Common.Math.b2Vec2', get_set: function (/** Box2D.Dynamics.Joints.b2RevoluteJoint */ inst, /** * */ v) {return v !== undefined ? inst.m_localAnchor2 = v : inst.m_localAnchor2;}}
      };
    },
    methods: function () {
      return {
        'GetAnchorA': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'GetAnchorB': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'GetReactionForce': { type: 'Box2D.Common.Math.b2Vec2', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Number', false ]; }},
        'GetReactionTorque': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Number', false ]; }},
        'GetJointAngle': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'GetJointSpeed': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'IsLimitEnabled': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'EnableLimit': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Boolean', false ]; }},
        'GetLowerLimit': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'GetUpperLimit': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'SetLimits': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'IsMotorEnabled': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'EnableMotor': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Boolean', false ]; }},
        'SetMotorSpeed': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Number', false ]; }},
        'GetMotorSpeed': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'SetMaxMotorTorque': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Number', false ]; }},
        'GetMotorTorque': { type: 'Number', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint'},
        'b2RevoluteJoint': { type: '', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Box2D.Dynamics.Joints.b2RevoluteJointDef', false ]; }},
        'InitVelocityConstraints': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Box2D.Dynamics.b2TimeStep', false ]; }},
        'SolveVelocityConstraints': { type: 'void', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Box2D.Dynamics.b2TimeStep', false ]; }},
        'SolvePositionConstraints': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.Joints.b2RevoluteJoint', parameters: function () { return [ 'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.Joints.b2RevoluteJoint);
