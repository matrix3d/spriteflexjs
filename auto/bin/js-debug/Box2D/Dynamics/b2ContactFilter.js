/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/b2ContactFilter.as
 * Box2D.Dynamics.b2ContactFilter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.b2ContactFilter');
/* Royale Dependency List: Box2D.Dynamics.b2FilterData,Box2D.Dynamics.b2Fixture*/




/**
 * @constructor
 */
Box2D.Dynamics.b2ContactFilter = function() {
};


/**
 * Return true if contact calculations should be performed between these two fixtures.
 * warning for performance reasons this is only called when the AABBs begin to overlap.
 * @param {Box2D.Dynamics.b2Fixture} fixtureA
 * @param {Box2D.Dynamics.b2Fixture} fixtureB
 * @return {boolean}
 */
Box2D.Dynamics.b2ContactFilter.prototype.ShouldCollide = function(fixtureA, fixtureB) {
  var /** @type {Box2D.Dynamics.b2FilterData} */ filter1 = fixtureA.GetFilterData();
  var /** @type {Box2D.Dynamics.b2FilterData} */ filter2 = fixtureB.GetFilterData();
  if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {
    return filter1.groupIndex > 0;
  }
  var /** @type {boolean} */ collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
  return collide;
};


/**
 * Return true if the given fixture should be considered for ray intersection.
 * By default, userData is cast as a b2Fixture and collision is resolved according to ShouldCollide
 * @see ShouldCollide()
 * @see b2World#Raycast
 * @asparam userData	arbitrary data passed from Raycast or RaycastOne
 * @asparam fixture		the fixture that we are testing for filtering
 * @asreturn a Boolean, with a value of false indicating that this fixture should be ignored.
 * @param {*} userData
 * @param {Box2D.Dynamics.b2Fixture} fixture
 * @return {boolean}
 */
Box2D.Dynamics.b2ContactFilter.prototype.RayCollide = function(userData, fixture) {
  if (!userData)
    return true;
  return this.ShouldCollide(userData, fixture);
};


/**
 * @nocollapse
 * @type {Box2D.Dynamics.b2ContactFilter}
 */
Box2D.Dynamics.b2ContactFilter.b2_defaultFilter;

Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new Box2D.Dynamics.b2ContactFilter();




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.b2ContactFilter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2ContactFilter', qName: 'Box2D.Dynamics.b2ContactFilter', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.b2ContactFilter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|b2_defaultFilter': { type: 'Box2D.Dynamics.b2ContactFilter', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = v : Box2D.Dynamics.b2ContactFilter.b2_defaultFilter;}}
      };
    },
    methods: function () {
      return {
        'ShouldCollide': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.b2ContactFilter', parameters: function () { return [ 'Box2D.Dynamics.b2Fixture', false ,'Box2D.Dynamics.b2Fixture', false ]; }},
        'RayCollide': { type: 'Boolean', declaredBy: 'Box2D.Dynamics.b2ContactFilter', parameters: function () { return [ '*', false ,'Box2D.Dynamics.b2Fixture', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.b2ContactFilter.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.b2ContactFilter.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.b2ContactFilter);
