/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/b2ContactListener.as
 * Box2D.Dynamics.b2ContactListener
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.b2ContactListener');
/* Royale Dependency List: Box2D.Collision.b2Manifold,Box2D.Dynamics.Contacts.b2Contact,Box2D.Dynamics.b2ContactImpulse*/




/**
 * @constructor
 */
Box2D.Dynamics.b2ContactListener = function() {
};


/**
 * Called when two fixtures begin to touch.
 * @param {Box2D.Dynamics.Contacts.b2Contact} contact
 */
Box2D.Dynamics.b2ContactListener.prototype.BeginContact = function(contact) {
};


/**
 * Called when two fixtures cease to touch.
 * @param {Box2D.Dynamics.Contacts.b2Contact} contact
 */
Box2D.Dynamics.b2ContactListener.prototype.EndContact = function(contact) {
};


/**
 * This is called after a contact is updated. This allows you to inspect a
 * contact before it goes to the solver. If you are careful, you can modify the
 * contact manifold (e.g. disable contact).
 * A copy of the old manifold is provided so that you can detect changes.
 * Note: this is called only for awake bodies.
 * Note: this is called even when the number of contact points is zero.
 * Note: this is not called for sensors.
 * Note: if you set the number of contact points to zero, you will not
 * get an EndContact callback. However, you may get a BeginContact callback
 * the next step.
 * @param {Box2D.Dynamics.Contacts.b2Contact} contact
 * @param {Box2D.Collision.b2Manifold} oldManifold
 */
Box2D.Dynamics.b2ContactListener.prototype.PreSolve = function(contact, oldManifold) {
};


/**
 * This lets you inspect a contact after the solver is finished. This is useful
 * for inspecting impulses.
 * Note: the contact manifold does not include time of impact impulses, which can be
 * arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly
 * in a separate data structure.
 * Note: this is only called for contacts that are touching, solid, and awake.
 * @param {Box2D.Dynamics.Contacts.b2Contact} contact
 * @param {Box2D.Dynamics.b2ContactImpulse} impulse
 */
Box2D.Dynamics.b2ContactListener.prototype.PostSolve = function(contact, impulse) {
};


/**
 * @nocollapse
 * @type {Box2D.Dynamics.b2ContactListener}
 */
Box2D.Dynamics.b2ContactListener.b2_defaultListener;

Box2D.Dynamics.b2ContactListener.b2_defaultListener = new Box2D.Dynamics.b2ContactListener();




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.b2ContactListener.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2ContactListener', qName: 'Box2D.Dynamics.b2ContactListener', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.b2ContactListener.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|b2_defaultListener': { type: 'Box2D.Dynamics.b2ContactListener', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2ContactListener.b2_defaultListener = v : Box2D.Dynamics.b2ContactListener.b2_defaultListener;}}
      };
    },
    methods: function () {
      return {
        'BeginContact': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactListener', parameters: function () { return [ 'Box2D.Dynamics.Contacts.b2Contact', false ]; }},
        'EndContact': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactListener', parameters: function () { return [ 'Box2D.Dynamics.Contacts.b2Contact', false ]; }},
        'PreSolve': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactListener', parameters: function () { return [ 'Box2D.Dynamics.Contacts.b2Contact', false ,'Box2D.Collision.b2Manifold', false ]; }},
        'PostSolve': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactListener', parameters: function () { return [ 'Box2D.Dynamics.Contacts.b2Contact', false ,'Box2D.Dynamics.b2ContactImpulse', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.b2ContactListener.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.b2ContactListener.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.b2ContactListener);
