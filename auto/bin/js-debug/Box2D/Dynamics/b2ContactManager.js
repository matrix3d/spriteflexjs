/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/b2ContactManager.as
 * Box2D.Dynamics.b2ContactManager
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.b2ContactManager');
/* Royale Dependency List: Box2D.Collision.IBroadPhase,Box2D.Collision.b2ContactPoint,Box2D.Collision.b2DynamicTreeBroadPhase,Box2D.Dynamics.Contacts.b2Contact,Box2D.Dynamics.Contacts.b2ContactEdge,Box2D.Dynamics.Contacts.b2ContactFactory,Box2D.Dynamics.b2Body,Box2D.Dynamics.b2ContactFilter,Box2D.Dynamics.b2ContactListener,Box2D.Dynamics.b2Fixture,Box2D.Dynamics.b2World,org.apache.royale.utils.Language*/




/**
 * @constructor
 */
Box2D.Dynamics.b2ContactManager = function() {
  this.m_world = null;
  this.m_contactCount = 0;
  this.m_contactFilter = Box2D.Dynamics.b2ContactFilter.b2_defaultFilter;
  this.m_contactListener = Box2D.Dynamics.b2ContactListener.b2_defaultListener;
  this.m_contactFactory = new Box2D.Dynamics.Contacts.b2ContactFactory(this.m_allocator);
  this.m_broadPhase = new Box2D.Collision.b2DynamicTreeBroadPhase();
};


/**
 * @param {*} proxyUserDataA
 * @param {*} proxyUserDataB
 */
Box2D.Dynamics.b2ContactManager.prototype.AddPair = function(proxyUserDataA, proxyUserDataB) {
  var /** @type {Box2D.Dynamics.b2Fixture} */ fixtureA = proxyUserDataA;
  var /** @type {Box2D.Dynamics.b2Fixture} */ fixtureB = proxyUserDataB;
  var /** @type {Box2D.Dynamics.b2Body} */ bodyA = fixtureA.GetBody();
  var /** @type {Box2D.Dynamics.b2Body} */ bodyB = fixtureB.GetBody();
  if (bodyA == bodyB)
    return;
  var /** @type {Box2D.Dynamics.Contacts.b2ContactEdge} */ edge = bodyB.GetContactList();
  while (edge) {
    if (edge.other == bodyA) {
      var /** @type {Box2D.Dynamics.b2Fixture} */ fA = edge.contact.GetFixtureA();
      var /** @type {Box2D.Dynamics.b2Fixture} */ fB = edge.contact.GetFixtureB();
      if (fA == fixtureA && fB == fixtureB)
        return;
      if (fA == fixtureB && fB == fixtureA)
        return;
    }
    edge = edge.next;
  }
  if (bodyB.ShouldCollide(bodyA) == false) {
    return;
  }
  if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
    return;
  }
  var /** @type {Box2D.Dynamics.Contacts.b2Contact} */ c = this.m_contactFactory.Create(fixtureA, fixtureB);
  fixtureA = c.GetFixtureA();
  fixtureB = c.GetFixtureB();
  bodyA = fixtureA.m_body;
  bodyB = fixtureB.m_body;
  c.m_prev = null;
  c.m_next = this.m_world.m_contactList;
  if (this.m_world.m_contactList != null) {
    this.m_world.m_contactList.m_prev = c;
  }
  this.m_world.m_contactList = c;
  c.m_nodeA.contact = c;
  c.m_nodeA.other = bodyB;
  c.m_nodeA.prev = null;
  c.m_nodeA.next = bodyA.m_contactList;
  if (bodyA.m_contactList != null) {
    bodyA.m_contactList.prev = c.m_nodeA;
  }
  bodyA.m_contactList = c.m_nodeA;
  c.m_nodeB.contact = c;
  c.m_nodeB.other = bodyA;
  c.m_nodeB.prev = null;
  c.m_nodeB.next = bodyB.m_contactList;
  if (bodyB.m_contactList != null) {
    bodyB.m_contactList.prev = c.m_nodeB;
  }
  bodyB.m_contactList = c.m_nodeB;
  ++this.m_world.m_contactCount;
  return;
};


/**
 */
Box2D.Dynamics.b2ContactManager.prototype.FindNewContacts = function() {
  this.m_broadPhase.UpdatePairs(org.apache.royale.utils.Language.closure(this.AddPair, this, 'AddPair'));
};


Box2D.Dynamics.b2ContactManager.get__s_evalCP = function() {
  var value = new Box2D.Collision.b2ContactPoint();
  Object.defineProperties(Box2D.Dynamics.b2ContactManager, { s_evalCP: { value: value, writable: false }});
  return value;
};
/**
 * @private
 * @const
 * @type {Box2D.Collision.b2ContactPoint}
 */
Box2D.Dynamics.b2ContactManager.s_evalCP;

Object.defineProperties(Box2D.Dynamics.b2ContactManager, /** @lends {Box2D.Dynamics.b2ContactManager} */ {
/**
 * @private
 * @const
 * @type {Box2D.Collision.b2ContactPoint}
 */
s_evalCP: {
  get: Box2D.Dynamics.b2ContactManager.get__s_evalCP,
  configurable: true}});


/**
 * @param {Box2D.Dynamics.Contacts.b2Contact} c
 */
Box2D.Dynamics.b2ContactManager.prototype.Destroy = function(c) {
  var /** @type {Box2D.Dynamics.b2Fixture} */ fixtureA = c.GetFixtureA();
  var /** @type {Box2D.Dynamics.b2Fixture} */ fixtureB = c.GetFixtureB();
  var /** @type {Box2D.Dynamics.b2Body} */ bodyA = fixtureA.GetBody();
  var /** @type {Box2D.Dynamics.b2Body} */ bodyB = fixtureB.GetBody();
  if (c.IsTouching()) {
    this.m_contactListener.EndContact(c);
  }
  if (c.m_prev) {
    c.m_prev.m_next = c.m_next;
  }
  if (c.m_next) {
    c.m_next.m_prev = c.m_prev;
  }
  if (c == this.m_world.m_contactList) {
    this.m_world.m_contactList = c.m_next;
  }
  if (c.m_nodeA.prev) {
    c.m_nodeA.prev.next = c.m_nodeA.next;
  }
  if (c.m_nodeA.next) {
    c.m_nodeA.next.prev = c.m_nodeA.prev;
  }
  if (c.m_nodeA == bodyA.m_contactList) {
    bodyA.m_contactList = c.m_nodeA.next;
  }
  if (c.m_nodeB.prev) {
    c.m_nodeB.prev.next = c.m_nodeB.next;
  }
  if (c.m_nodeB.next) {
    c.m_nodeB.next.prev = c.m_nodeB.prev;
  }
  if (c.m_nodeB == bodyB.m_contactList) {
    bodyB.m_contactList = c.m_nodeB.next;
  }
  this.m_contactFactory.Destroy(c);
  --this.m_contactCount;
};


/**
 */
Box2D.Dynamics.b2ContactManager.prototype.Collide = function() {
  var /** @type {Box2D.Dynamics.Contacts.b2Contact} */ c = this.m_world.m_contactList;
  while (c) {
    var /** @type {Box2D.Dynamics.b2Fixture} */ fixtureA = c.GetFixtureA();
    var /** @type {Box2D.Dynamics.b2Fixture} */ fixtureB = c.GetFixtureB();
    var /** @type {Box2D.Dynamics.b2Body} */ bodyA = fixtureA.GetBody();
    var /** @type {Box2D.Dynamics.b2Body} */ bodyB = fixtureB.GetBody();
    if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {
      c = c.GetNext();
      continue;
    }
    if (c.m_flags & Box2D.Dynamics.Contacts.b2Contact.e_filterFlag) {
      if (bodyB.ShouldCollide(bodyA) == false) {
        var /** @type {Box2D.Dynamics.Contacts.b2Contact} */ cNuke = c;
        c = cNuke.GetNext();
        this.Destroy(cNuke);
        continue;
      }
      if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
        cNuke = c;
        c = cNuke.GetNext();
        this.Destroy(cNuke);
        continue;
      }
      c.m_flags &= (~Box2D.Dynamics.Contacts.b2Contact.e_filterFlag) >>> 0;
    }
    var /** @type {*} */ proxyA = fixtureA.m_proxy;
    var /** @type {*} */ proxyB = fixtureB.m_proxy;
    var /** @type {boolean} */ overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);
    if (overlap == false) {
      cNuke = c;
      c = cNuke.GetNext();
      this.Destroy(cNuke);
      continue;
    }
    c.Update(this.m_contactListener);
    c = c.GetNext();
  }
};


/**
 * @type {Box2D.Dynamics.b2World}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_world = null;


/**
 * @type {Box2D.Collision.IBroadPhase}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_broadPhase = null;


/**
 * @type {Box2D.Dynamics.Contacts.b2Contact}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_contactList = null;


/**
 * @type {number}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_contactCount = 0;


/**
 * @type {Box2D.Dynamics.b2ContactFilter}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_contactFilter = null;


/**
 * @type {Box2D.Dynamics.b2ContactListener}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_contactListener = null;


/**
 * @type {Box2D.Dynamics.Contacts.b2ContactFactory}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_contactFactory = null;


/**
 * @type {*}
 */
Box2D.Dynamics.b2ContactManager.prototype.m_allocator = undefined;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.b2ContactManager.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2ContactManager', qName: 'Box2D.Dynamics.b2ContactManager', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.b2ContactManager.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'm_world': { type: 'Box2D.Dynamics.b2World', get_set: function (/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== undefined ? inst.m_world = v : inst.m_world;}},
        'm_broadPhase': { type: 'Box2D.Collision.IBroadPhase', get_set: function (/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== undefined ? inst.m_broadPhase = v : inst.m_broadPhase;}},
        'm_contactList': { type: 'Box2D.Dynamics.Contacts.b2Contact', get_set: function (/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== undefined ? inst.m_contactList = v : inst.m_contactList;}},
        'm_contactCount': { type: 'int', get_set: function (/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== undefined ? inst.m_contactCount = v : inst.m_contactCount;}},
        'm_contactFilter': { type: 'Box2D.Dynamics.b2ContactFilter', get_set: function (/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== undefined ? inst.m_contactFilter = v : inst.m_contactFilter;}},
        'm_contactListener': { type: 'Box2D.Dynamics.b2ContactListener', get_set: function (/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== undefined ? inst.m_contactListener = v : inst.m_contactListener;}},
        'm_contactFactory': { type: 'Box2D.Dynamics.Contacts.b2ContactFactory', get_set: function (/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== undefined ? inst.m_contactFactory = v : inst.m_contactFactory;}},
        'm_allocator': { type: '*', get_set: function f(/** Box2D.Dynamics.b2ContactManager */ inst, /** * */ v) {return v !== f ? inst.m_allocator = v : inst.m_allocator;}}
      };
    },
    methods: function () {
      return {
        'b2ContactManager': { type: '', declaredBy: 'Box2D.Dynamics.b2ContactManager'},
        'AddPair': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactManager', parameters: function () { return [ '*', false ,'*', false ]; }},
        'FindNewContacts': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactManager'},
        'Destroy': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactManager', parameters: function () { return [ 'Box2D.Dynamics.Contacts.b2Contact', false ]; }},
        'Collide': { type: 'void', declaredBy: 'Box2D.Dynamics.b2ContactManager'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.b2ContactManager.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.b2ContactManager.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.b2ContactManager);
