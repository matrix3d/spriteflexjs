/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/b2DebugDraw.as
 * Box2D.Dynamics.b2DebugDraw
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.b2DebugDraw');
/* Royale Dependency List: Box2D.Common.Math.b2Transform,Box2D.Common.Math.b2Vec2,Box2D.Common.b2Color,flash.display.Sprite*/




/**
 * @constructor
 */
Box2D.Dynamics.b2DebugDraw = function() {
  this.Box2D_Dynamics_b2DebugDraw_m_drawFlags = 0;
};


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.e_shapeBit = 0x1;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.e_jointBit = 0x2;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.e_aabbBit = 0x4;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.e_pairBit = 0x8;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = 0x10;


/**
 * @nocollapse
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.e_controllerBit = 0x20;


/**
 * Set the drawing flags.
 * @param {number} flags
 */
Box2D.Dynamics.b2DebugDraw.prototype.SetFlags = function(flags) {
  this.Box2D_Dynamics_b2DebugDraw_m_drawFlags = flags;
};


/**
 * Get the drawing flags.
 * @return {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.GetFlags = function() {
  return this.Box2D_Dynamics_b2DebugDraw_m_drawFlags;
};


/**
 * Append flags to the current flags.
 * @param {number} flags
 */
Box2D.Dynamics.b2DebugDraw.prototype.AppendFlags = function(flags) {
  this.Box2D_Dynamics_b2DebugDraw_m_drawFlags |= flags;
};


/**
 * Clear flags from the current flags.
 * @param {number} flags
 */
Box2D.Dynamics.b2DebugDraw.prototype.ClearFlags = function(flags) {
  this.Box2D_Dynamics_b2DebugDraw_m_drawFlags &= (~flags) >>> 0;
};


/**
 * Set the sprite
 * @param {flash.display.Sprite} sprite
 */
Box2D.Dynamics.b2DebugDraw.prototype.SetSprite = function(sprite) {
  this.m_sprite = sprite;
};


/**
 * Get the sprite
 * @return {flash.display.Sprite}
 */
Box2D.Dynamics.b2DebugDraw.prototype.GetSprite = function() {
  return this.m_sprite;
};


/**
 * Set the draw scale
 * @param {number} drawScale
 */
Box2D.Dynamics.b2DebugDraw.prototype.SetDrawScale = function(drawScale) {
  this.Box2D_Dynamics_b2DebugDraw_m_drawScale = drawScale;
};


/**
 * Get the draw
 * @return {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.GetDrawScale = function() {
  return this.Box2D_Dynamics_b2DebugDraw_m_drawScale;
};


/**
 * Set the line thickness
 * @param {number} lineThickness
 */
Box2D.Dynamics.b2DebugDraw.prototype.SetLineThickness = function(lineThickness) {
  this.Box2D_Dynamics_b2DebugDraw_m_lineThickness = lineThickness;
};


/**
 * Get the line thickness
 * @return {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.GetLineThickness = function() {
  return this.Box2D_Dynamics_b2DebugDraw_m_lineThickness;
};


/**
 * Set the alpha value used for lines
 * @param {number} alpha
 */
Box2D.Dynamics.b2DebugDraw.prototype.SetAlpha = function(alpha) {
  this.Box2D_Dynamics_b2DebugDraw_m_alpha = alpha;
};


/**
 * Get the alpha value used for lines
 * @return {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.GetAlpha = function() {
  return this.Box2D_Dynamics_b2DebugDraw_m_alpha;
};


/**
 * Set the alpha value used for fills
 * @param {number} alpha
 */
Box2D.Dynamics.b2DebugDraw.prototype.SetFillAlpha = function(alpha) {
  this.Box2D_Dynamics_b2DebugDraw_m_fillAlpha = alpha;
};


/**
 * Get the alpha value used for fills
 * @return {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.GetFillAlpha = function() {
  return this.Box2D_Dynamics_b2DebugDraw_m_fillAlpha;
};


/**
 * Set the scale used for drawing XForms
 * @param {number} xformScale
 */
Box2D.Dynamics.b2DebugDraw.prototype.SetXFormScale = function(xformScale) {
  this.Box2D_Dynamics_b2DebugDraw_m_xformScale = xformScale;
};


/**
 * Get the scale used for drawing XForms
 * @return {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.GetXFormScale = function() {
  return this.Box2D_Dynamics_b2DebugDraw_m_xformScale;
};


/**
 * Draw a closed polygon provided in CCW order.
 * @param {Array} vertices
 * @param {number} vertexCount
 * @param {Box2D.Common.b2Color} color
 */
Box2D.Dynamics.b2DebugDraw.prototype.DrawPolygon = function(vertices, vertexCount, color) {
  this.m_sprite.graphics.lineStyle(this.Box2D_Dynamics_b2DebugDraw_m_lineThickness, color.color, this.Box2D_Dynamics_b2DebugDraw_m_alpha);
  this.m_sprite.graphics.moveTo(vertices[0].x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, vertices[0].y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  for (var /** @type {number} */ i = 1; i < vertexCount; i++) {
    this.m_sprite.graphics.lineTo(vertices[i].x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, vertices[i].y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  }
  this.m_sprite.graphics.lineTo(vertices[0].x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, vertices[0].y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
};


/**
 * Draw a solid closed polygon provided in CCW order.
 * @param {Array} vertices
 * @param {number} vertexCount
 * @param {Box2D.Common.b2Color} color
 */
Box2D.Dynamics.b2DebugDraw.prototype.DrawSolidPolygon = function(vertices, vertexCount, color) {
  this.m_sprite.graphics.lineStyle(this.Box2D_Dynamics_b2DebugDraw_m_lineThickness, color.color, this.Box2D_Dynamics_b2DebugDraw_m_alpha);
  this.m_sprite.graphics.beginFill(color.color, this.Box2D_Dynamics_b2DebugDraw_m_fillAlpha);
  this.m_sprite.graphics.moveTo(vertices[0].x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, vertices[0].y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  for (var /** @type {number} */ i = 1; i < vertexCount; i++) {
    this.m_sprite.graphics.lineTo(vertices[i].x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, vertices[i].y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  }
  this.m_sprite.graphics.lineTo(vertices[0].x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, vertices[0].y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  this.m_sprite.graphics.endFill();
};


/**
 * Draw a circle.
 * @param {Box2D.Common.Math.b2Vec2} center
 * @param {number} radius
 * @param {Box2D.Common.b2Color} color
 */
Box2D.Dynamics.b2DebugDraw.prototype.DrawCircle = function(center, radius, color) {
  this.m_sprite.graphics.lineStyle(this.Box2D_Dynamics_b2DebugDraw_m_lineThickness, color.color, this.Box2D_Dynamics_b2DebugDraw_m_alpha);
  this.m_sprite.graphics.drawCircle(center.x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, center.y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, radius * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
};


/**
 * Draw a solid circle.
 * @param {Box2D.Common.Math.b2Vec2} center
 * @param {number} radius
 * @param {Box2D.Common.Math.b2Vec2} axis
 * @param {Box2D.Common.b2Color} color
 */
Box2D.Dynamics.b2DebugDraw.prototype.DrawSolidCircle = function(center, radius, axis, color) {
  this.m_sprite.graphics.lineStyle(this.Box2D_Dynamics_b2DebugDraw_m_lineThickness, color.color, this.Box2D_Dynamics_b2DebugDraw_m_alpha);
  this.m_sprite.graphics.moveTo(0, 0);
  this.m_sprite.graphics.beginFill(color.color, this.Box2D_Dynamics_b2DebugDraw_m_fillAlpha);
  this.m_sprite.graphics.drawCircle(center.x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, center.y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, radius * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  this.m_sprite.graphics.endFill();
  this.m_sprite.graphics.moveTo(center.x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, center.y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  this.m_sprite.graphics.lineTo((center.x + axis.x * radius) * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, (center.y + axis.y * radius) * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
};


/**
 * Draw a line segment.
 * @param {Box2D.Common.Math.b2Vec2} p1
 * @param {Box2D.Common.Math.b2Vec2} p2
 * @param {Box2D.Common.b2Color} color
 */
Box2D.Dynamics.b2DebugDraw.prototype.DrawSegment = function(p1, p2, color) {
  this.m_sprite.graphics.lineStyle(this.Box2D_Dynamics_b2DebugDraw_m_lineThickness, color.color, this.Box2D_Dynamics_b2DebugDraw_m_alpha);
  this.m_sprite.graphics.moveTo(p1.x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, p1.y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  this.m_sprite.graphics.lineTo(p2.x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, p2.y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
};


/**
 * Draw a transform. Choose your own length scale.
 * @asparam xf a transform.
 * @param {Box2D.Common.Math.b2Transform} xf
 */
Box2D.Dynamics.b2DebugDraw.prototype.DrawTransform = function(xf) {
  this.m_sprite.graphics.lineStyle(this.Box2D_Dynamics_b2DebugDraw_m_lineThickness, 0xff0000, this.Box2D_Dynamics_b2DebugDraw_m_alpha);
  this.m_sprite.graphics.moveTo(xf.position.x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, xf.position.y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  this.m_sprite.graphics.lineTo((xf.position.x + this.Box2D_Dynamics_b2DebugDraw_m_xformScale * xf.R.col1.x) * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, (xf.position.y + this.Box2D_Dynamics_b2DebugDraw_m_xformScale * xf.R.col1.y) * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  this.m_sprite.graphics.lineStyle(this.Box2D_Dynamics_b2DebugDraw_m_lineThickness, 0xff00, this.Box2D_Dynamics_b2DebugDraw_m_alpha);
  this.m_sprite.graphics.moveTo(xf.position.x * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, xf.position.y * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
  this.m_sprite.graphics.lineTo((xf.position.x + this.Box2D_Dynamics_b2DebugDraw_m_xformScale * xf.R.col2.x) * this.Box2D_Dynamics_b2DebugDraw_m_drawScale, (xf.position.y + this.Box2D_Dynamics_b2DebugDraw_m_xformScale * xf.R.col2.y) * this.Box2D_Dynamics_b2DebugDraw_m_drawScale);
};


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.Box2D_Dynamics_b2DebugDraw_m_drawFlags = 0;


/**
 * @type {flash.display.Sprite}
 */
Box2D.Dynamics.b2DebugDraw.prototype.m_sprite = null;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.Box2D_Dynamics_b2DebugDraw_m_drawScale = 1.0;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.Box2D_Dynamics_b2DebugDraw_m_lineThickness = 1.0;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.Box2D_Dynamics_b2DebugDraw_m_alpha = 1.0;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.Box2D_Dynamics_b2DebugDraw_m_fillAlpha = 1.0;


/**
 * @private
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.Box2D_Dynamics_b2DebugDraw_m_xformScale = 1.0;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.b2DebugDraw.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2DebugDraw', qName: 'Box2D.Dynamics.b2DebugDraw', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.b2DebugDraw.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '|e_shapeBit': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2DebugDraw.e_shapeBit = v : Box2D.Dynamics.b2DebugDraw.e_shapeBit;}},
        '|e_jointBit': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2DebugDraw.e_jointBit = v : Box2D.Dynamics.b2DebugDraw.e_jointBit;}},
        '|e_aabbBit': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2DebugDraw.e_aabbBit = v : Box2D.Dynamics.b2DebugDraw.e_aabbBit;}},
        '|e_pairBit': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2DebugDraw.e_pairBit = v : Box2D.Dynamics.b2DebugDraw.e_pairBit;}},
        '|e_centerOfMassBit': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = v : Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit;}},
        '|e_controllerBit': { type: 'uint', get_set: function (/** * */ v) {return v !== undefined ? Box2D.Dynamics.b2DebugDraw.e_controllerBit = v : Box2D.Dynamics.b2DebugDraw.e_controllerBit;}},
        'm_sprite': { type: 'flash.display.Sprite', get_set: function (/** Box2D.Dynamics.b2DebugDraw */ inst, /** * */ v) {return v !== undefined ? inst.m_sprite = v : inst.m_sprite;}}
      };
    },
    methods: function () {
      return {
        'b2DebugDraw': { type: '', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'SetFlags': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'uint', false ]; }},
        'GetFlags': { type: 'uint', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'AppendFlags': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'uint', false ]; }},
        'ClearFlags': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'uint', false ]; }},
        'SetSprite': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'flash.display.Sprite', false ]; }},
        'GetSprite': { type: 'flash.display.Sprite', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'SetDrawScale': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Number', false ]; }},
        'GetDrawScale': { type: 'Number', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'SetLineThickness': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Number', false ]; }},
        'GetLineThickness': { type: 'Number', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'SetAlpha': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Number', false ]; }},
        'GetAlpha': { type: 'Number', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'SetFillAlpha': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Number', false ]; }},
        'GetFillAlpha': { type: 'Number', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'SetXFormScale': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Number', false ]; }},
        'GetXFormScale': { type: 'Number', declaredBy: 'Box2D.Dynamics.b2DebugDraw'},
        'DrawPolygon': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Array', false ,'int', false ,'Box2D.Common.b2Color', false ]; }},
        'DrawSolidPolygon': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Array', false ,'int', false ,'Box2D.Common.b2Color', false ]; }},
        'DrawCircle': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Number', false ,'Box2D.Common.b2Color', false ]; }},
        'DrawSolidCircle': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Number', false ,'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.b2Color', false ]; }},
        'DrawSegment': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.Math.b2Vec2', false ,'Box2D.Common.b2Color', false ]; }},
        'DrawTransform': { type: 'void', declaredBy: 'Box2D.Dynamics.b2DebugDraw', parameters: function () { return [ 'Box2D.Common.Math.b2Transform', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.b2DebugDraw.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Box2D.Dynamics.b2DebugDraw.prototype.ROYALE_INITIAL_STATICS = Object.keys(Box2D.Dynamics.b2DebugDraw);
