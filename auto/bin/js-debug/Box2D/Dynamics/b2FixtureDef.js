/**
 * Generated by Apache Royale Compiler from Box2D/Dynamics/b2FixtureDef.as
 * Box2D.Dynamics.b2FixtureDef
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('Box2D.Dynamics.b2FixtureDef');
/* Royale Dependency List: Box2D.Collision.Shapes.b2Shape,Box2D.Dynamics.b2FilterData*/




/**
 * The constructor sets the default fixture definition values.
 * @constructor
 */
Box2D.Dynamics.b2FixtureDef = function() {
  
  this.filter = new Box2D.Dynamics.b2FilterData();
  this.shape = null;
  this.userData = null;
  this.friction = 0.2;
  this.restitution = 0.0;
  this.density = 0.0;
  this.filter.categoryBits = 0x1;
  this.filter.maskBits = 0xffff;
  this.filter.groupIndex = 0;
  this.isSensor = false;
};


/**
 * @type {Box2D.Collision.Shapes.b2Shape}
 */
Box2D.Dynamics.b2FixtureDef.prototype.shape = null;


/**
 * @type {*}
 */
Box2D.Dynamics.b2FixtureDef.prototype.userData = undefined;


/**
 * @type {number}
 */
Box2D.Dynamics.b2FixtureDef.prototype.friction = NaN;


/**
 * @type {number}
 */
Box2D.Dynamics.b2FixtureDef.prototype.restitution = NaN;


/**
 * @type {number}
 */
Box2D.Dynamics.b2FixtureDef.prototype.density = NaN;


/**
 * @type {boolean}
 */
Box2D.Dynamics.b2FixtureDef.prototype.isSensor = false;


/**
 * @type {Box2D.Dynamics.b2FilterData}
 */
Box2D.Dynamics.b2FixtureDef.prototype.filter = null;


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Box2D.Dynamics.b2FixtureDef.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'b2FixtureDef', qName: 'Box2D.Dynamics.b2FixtureDef', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Box2D.Dynamics.b2FixtureDef.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'shape': { type: 'Box2D.Collision.Shapes.b2Shape', get_set: function (/** Box2D.Dynamics.b2FixtureDef */ inst, /** * */ v) {return v !== undefined ? inst.shape = v : inst.shape;}},
        'userData': { type: '*', get_set: function f(/** Box2D.Dynamics.b2FixtureDef */ inst, /** * */ v) {return v !== f ? inst.userData = v : inst.userData;}},
        'friction': { type: 'Number', get_set: function (/** Box2D.Dynamics.b2FixtureDef */ inst, /** * */ v) {return v !== undefined ? inst.friction = v : inst.friction;}},
        'restitution': { type: 'Number', get_set: function (/** Box2D.Dynamics.b2FixtureDef */ inst, /** * */ v) {return v !== undefined ? inst.restitution = v : inst.restitution;}},
        'density': { type: 'Number', get_set: function (/** Box2D.Dynamics.b2FixtureDef */ inst, /** * */ v) {return v !== undefined ? inst.density = v : inst.density;}},
        'isSensor': { type: 'Boolean', get_set: function (/** Box2D.Dynamics.b2FixtureDef */ inst, /** * */ v) {return v !== undefined ? inst.isSensor = v : inst.isSensor;}},
        'filter': { type: 'Box2D.Dynamics.b2FilterData', get_set: function (/** Box2D.Dynamics.b2FixtureDef */ inst, /** * */ v) {return v !== undefined ? inst.filter = v : inst.filter;}}
      };
    },
    methods: function () {
      return {
        'b2FixtureDef': { type: '', declaredBy: 'Box2D.Dynamics.b2FixtureDef'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Box2D.Dynamics.b2FixtureDef.prototype.ROYALE_COMPILE_FLAGS = 9;
