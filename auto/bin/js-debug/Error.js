/**
 * Generated by Apache Royale Compiler from Error.as
 * Error
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('Error');
goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 * @param {*=} message
 * @param {*=} id
 */
Error = function(message, id) {
  message = typeof message !== 'undefined' ? message : "";
  id = typeof id !== 'undefined' ? id : 0;
  ;
  this.message = message;
  this.Error__errorID = (id) >> 0;
  this.name = "";
};


/**
 * @nocollapse
 * @const
 * @type {number}
 */
Error.length = 1;


/**
 * @type {Object}
 */
Error.prototype.message = null;


/**
 * @type {string}
 */
Error.prototype.name = null;


/**
 * @private
 * @type {number}
 */
Error.prototype.Error__errorID = 0;


/**
 * @nocollapse
 * @param {number} param1
 * @return {string}
 */
Error.getErrorMessage = function(param1) {
  return null;
};


/**
 * @nocollapse
 * @param {Object} type
 * @param {number} index
 * @param {...} rest
 * @return {*}
 */
Error.throwError = function(type, index, rest) {
  rest = Array.prototype.slice.call(arguments, 2);
  var /** @type {*} */ i = 0;
  var /** @type {*} */ f = function(match, pos, string) {
    var /** @type {*} */ arg_num = -1;
    switch (match.charAt(1)) {
      case "1":
        break;
      case "2":
        arg_num = 1;
        break;
      case "3":
        arg_num = 2;
        break;
      case "4":
        arg_num = 3;
        break;
      case "5":
        arg_num = 4;
        break;
      case "6":
      
      case 6:
        arg_num = 5;
        break;
      default:
        arg_num = 0;
    }
    if (arg_num > -1 && rest.length > arg_num) {
      return rest[arg_num];
    }
    return "";
  };
  throw org.apache.royale.utils.Language.resolveUncertain(new type(Error.getErrorMessage((index) >> 0).replace(new RegExp("%[0-9]", "g"), f), index));
};


/**
 * @return {string}
 */
Error.prototype.getStackTrace = function() {
  return null;
};


Error.prototype.get__errorID = function() {
  return this.Error__errorID;
};


Object.defineProperties(Error.prototype, /** @lends {Error.prototype} */ {
/**
 * @type {number}
 */
errorID: {
get: Error.prototype.get__errorID}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
Error.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Error', qName: 'Error', kind: 'class', isDynamic: true}] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
Error.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'message': { type: 'Object', get_set: function (/** Error */ inst, /** * */ v) {return v !== undefined ? inst.message = v : inst.message;}},
        'name': { type: 'String', get_set: function (/** Error */ inst, /** * */ v) {return v !== undefined ? inst.name = v : inst.name;}}
      };
    },
    accessors: function () {
      return {
        'errorID': { type: 'int', access: 'readonly', declaredBy: 'Error'}
      };
    },
    methods: function () {
      return {
        'Error': { type: '', declaredBy: 'Error', parameters: function () { return [ '*', true ,'*', true ]; }},
        '|getErrorMessage': { type: 'String', declaredBy: 'Error', parameters: function () { return [ 'int', false ]; }},
        '|throwError': { type: '*', declaredBy: 'Error', parameters: function () { return [ 'Class', false ,'uint', false ,'Array', false ]; }},
        'getStackTrace': { type: 'String', declaredBy: 'Error'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
Error.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
Error.prototype.ROYALE_INITIAL_STATICS = Object.keys(Error);