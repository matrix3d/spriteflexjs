/**
 * Generated by Apache Royale Compiler from flash/display/DisplayObject.as
 * flash.display.DisplayObject
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display.DisplayObject');
/* Royale Dependency List: SpriteFlexjs,flash.display.BlendMode,flash.display.DisplayObjectContainer,flash.display.Graphics,flash.display.LoaderInfo,flash.display.Stage,flash.events.Event,flash.events.MouseEvent,flash.filters.BitmapFilter,flash.filters.DropShadowFilter,flash.filters.GlowFilter,flash.geom.Matrix,flash.geom.Point,flash.geom.Rectangle,flash.geom.Transform,flash.geom.Vector3D,flash.utils.getTimer,org.apache.royale.utils.Language*/

goog.require('flash.events.EventDispatcher');
goog.require('flash.display.IBitmapDrawable');



/**
 * @constructor
 * @extends {flash.events.EventDispatcher}
 * @implements {flash.display.IBitmapDrawable}
 */
flash.display.DisplayObject = function() {
  flash.display.DisplayObject.base(this, 'constructor');
  
  this.flash_display_DisplayObject__filters = [];
  this.flash_display_DisplayObject__loaderInfo = new flash.display.LoaderInfo();
  this.flash_display_DisplayObject__stage = flash.display.DisplayObject._globalStage;
  if (this.flash_display_DisplayObject__stage)
    this.initDisplayObjectStage();
};
goog.inherits(flash.display.DisplayObject, flash.events.EventDispatcher);


/**
 * @private
 * @type {flash.display.Stage}
 */
flash.display.DisplayObject._globalStage = null;


/**
 * @private
 * @type {flash.display.Stage}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__stage = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__inited = false;


/**
 * @protected
 * @type {flash.display.DisplayObject}
 */
flash.display.DisplayObject.prototype._root = null;


/**
 * @type {boolean}
 */
flash.display.DisplayObject.prototype._off = false;


/**
 * @private
 * @type {number}
 */
flash.display.DisplayObject.ID = 0;


/**
 * @type {number}
 */
flash.display.DisplayObject.prototype.innerID = 0;


/**
 * @private
 * @type {string}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__name = null;


/**
 * @private
 * @type {number}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__rotation = 0;


/**
 * @private
 * @type {number}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject_rsin = 0;


/**
 * @private
 * @type {number}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject_rcos = 1;


/**
 * @type {flash.geom.Transform}
 */
flash.display.DisplayObject.prototype.transform = null;


/**
 * @type {flash.display.DisplayObjectContainer}
 */
flash.display.DisplayObject.prototype._parent = null;


/**
 * @private
 * @type {flash.display.DisplayObject}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__mask = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__visible = true;


/**
 * @private
 * @type {flash.display.DisplayObject}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject_lastMouseOverObj = null;


/**
 * @private
 * @type {string}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__blendMode = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__cacheAsBitmap = false;


/**
 * @private
 * @type {flash.display.LoaderInfo}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__loaderInfo = null;


/**
 * @private
 * @type {Array}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__filters = null;


/**
 * @private
 * @type {number}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__filterOffsetX = 0;


/**
 * @private
 * @type {number}
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject__filterOffsetY = 0;


/**
 */
flash.display.DisplayObject.prototype.initDisplayObjectStage = function() {
  if (!this.flash_display_DisplayObject__inited) {
    this.flash_display_DisplayObject__blendMode = flash.display.BlendMode.NORMAL;
    this.transform = new flash.geom.Transform(this);
    this.innerID = flash.display.DisplayObject.ID++;
    this.flash_display_DisplayObject__name = "instance" + this.innerID;
    if (this.innerID === 0) {
      flash.display.DisplayObject._globalStage.setRoot(this);
      this.flash_display_DisplayObject__stage = flash.display.DisplayObject._globalStage;
      this.flash_display_DisplayObject__stage.addEventListener(flash.events.Event.ENTER_FRAME, org.apache.royale.utils.Language.closure(this.flash_display_DisplayObject___enterFrame, this, 'flash_display_DisplayObject___enterFrame'));
      this.flash_display_DisplayObject__stage.addEventListener(flash.events.MouseEvent.CLICK, org.apache.royale.utils.Language.closure(this.flash_display_DisplayObject___mouseevent, this, 'flash_display_DisplayObject___mouseevent'));
      this.flash_display_DisplayObject__stage.addEventListener(flash.events.MouseEvent.CONTEXT_MENU, org.apache.royale.utils.Language.closure(this.flash_display_DisplayObject___mouseevent, this, 'flash_display_DisplayObject___mouseevent'));
      this.flash_display_DisplayObject__stage.addEventListener(flash.events.MouseEvent.DOUBLE_CLICK, org.apache.royale.utils.Language.closure(this.flash_display_DisplayObject___mouseevent, this, 'flash_display_DisplayObject___mouseevent'));
      this.flash_display_DisplayObject__stage.addEventListener(flash.events.MouseEvent.MOUSE_DOWN, org.apache.royale.utils.Language.closure(this.flash_display_DisplayObject___mouseevent, this, 'flash_display_DisplayObject___mouseevent'));
      this.flash_display_DisplayObject__stage.addEventListener(flash.events.MouseEvent.MOUSE_MOVE, org.apache.royale.utils.Language.closure(this.flash_display_DisplayObject___mouseevent, this, 'flash_display_DisplayObject___mouseevent'));
      this.flash_display_DisplayObject__stage.addEventListener(flash.events.MouseEvent.MOUSE_UP, org.apache.royale.utils.Language.closure(this.flash_display_DisplayObject___mouseevent, this, 'flash_display_DisplayObject___mouseevent'));
    }
    this.flash_display_DisplayObject__inited = true;
  }
};


/**
 */
flash.display.DisplayObject.prototype.updateTransforms = function() {
  this.transform.updateTransforms();
  SpriteFlexjs.dirtyGraphics = true;
};


/**
 * @param {flash.geom.Point} v
 * @return {flash.geom.Point}
 */
flash.display.DisplayObject.prototype.globalToLocal = function(v) {
  return this.transform.invMatrix.transformPoint(v);
};


/**
 * @param {flash.geom.Point} v
 * @return {flash.geom.Point}
 */
flash.display.DisplayObject.prototype.localToGlobal = function(v) {
  return this.transform.concatenatedMatrix.transformPoint(v);
};


/**
 * @param {flash.display.DisplayObject} v
 * @return {flash.geom.Rectangle}
 */
flash.display.DisplayObject.prototype.getBounds = function(v) {
  var /** @type {flash.display.Graphics} */ gfx = org.apache.royale.utils.Language.resolveUncertain(Object(v)).graphics;
  return (gfx && gfx.bound) ? gfx.bound.clone() : new flash.geom.Rectangle();
};


/**
 * Use to provide proper bounds when object is rotated, scaled, or has filters applied.  Mainly used for cacheAsBitmap.
 * @asparam	v	DisplayObject to get bounds from.
 * @asreturn		Rectangle of bounds
 * @param {flash.display.DisplayObject} v
 * @return {flash.geom.Rectangle}
 */
flash.display.DisplayObject.prototype.getFullBounds = function(v) {
  var /** @type {flash.display.Graphics} */ gfx = org.apache.royale.utils.Language.resolveUncertain(Object(v)).graphics;
  var /** @type {flash.geom.Rectangle} */ bounds = (gfx && gfx.bound) ? gfx.bound.clone() : new flash.geom.Rectangle();
  var /** @type {number} */ rot = (this.flash_display_DisplayObject__rotation >= 180) ? this.flash_display_DisplayObject__rotation - 180 : this.flash_display_DisplayObject__rotation;
  var /** @type {number} */ radians = rot * (Math.PI / 180);
  var /** @type {number} */ w = Math.round((bounds.height * Math.abs(Math.sin(radians)) + bounds.width * Math.abs(Math.cos(radians))) * 10) / 10;
  var /** @type {number} */ h = Math.round((bounds.height * Math.abs(Math.cos(radians)) + bounds.width * Math.abs(Math.sin(radians))) * 10) / 10;
  w = (w > bounds.width) ? w - bounds.width : 0;
  h = (h > bounds.height) ? h - bounds.width : 0;
  bounds.inflate(w / 2, h / 2);
  bounds.inflate(this.filterOffsetX, this.filterOffsetY);
  return bounds;
};


/**
 * @param {flash.display.DisplayObject} v
 * @return {flash.geom.Rectangle}
 */
flash.display.DisplayObject.prototype.getRect = function(v) {
  var /** @type {flash.display.Graphics} */ gfx = org.apache.royale.utils.Language.resolveUncertain(Object(v)).graphics;
  return (gfx && gfx.rect) ? gfx.rect.clone() : new flash.geom.Rectangle();
};


/**
 * @return {flash.geom.Rectangle}
 */
flash.display.DisplayObject.prototype.__getRect = function() {
  return null;
};


/**
 * @param {flash.display.DisplayObject} obj
 * @return {boolean}
 */
flash.display.DisplayObject.prototype.hitTestObject = function(obj) {
  return false;
};


/**
 * @param {number} x
 * @param {number} y
 * @param {boolean=} shapeFlag
 * @return {boolean}
 */
flash.display.DisplayObject.prototype.hitTestPoint = function(x, y, shapeFlag) {
  shapeFlag = typeof shapeFlag !== 'undefined' ? shapeFlag : false;
  return false;
};


/**
 * @param {flash.geom.Point} param1
 * @return {flash.geom.Vector3D}
 */
flash.display.DisplayObject.prototype.globalToLocal3D = function(param1) {
  return null;
};


/**
 * @param {flash.geom.Vector3D} param1
 * @return {flash.geom.Point}
 */
flash.display.DisplayObject.prototype.local3DToGlobal = function(param1) {
  return null;
};


/**
 * @protected
 * @param {CanvasRenderingContext2D} ctx
 * @param {boolean=} isText
 * @param {boolean=} shadowsOnly
 * @param {boolean=} noShadows
 */
flash.display.DisplayObject.prototype.ApplyFilters = function(ctx, isText, shadowsOnly, noShadows) {
  isText = typeof isText !== 'undefined' ? isText : false;
  shadowsOnly = typeof shadowsOnly !== 'undefined' ? shadowsOnly : false;
  noShadows = typeof noShadows !== 'undefined' ? noShadows : false;
  var foreachiter0_target = this.flash_display_DisplayObject__filters;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var filter = foreachiter0_target[foreachiter0];
  {
    if (org.apache.royale.utils.Language.is(filter, flash.filters.DropShadowFilter) && !noShadows) {
      var /** @type {flash.filters.DropShadowFilter} */ ds = filter;
      ctx.shadowOffsetX = ds.offsetX;
      ctx.shadowOffsetY = ds.offsetY;
      ctx.shadowColor = ds.rgba;
      ctx.shadowBlur = ds.blur;
      if (!isText) {
        ctx.fill();
        ctx.shadowColor = "0";
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
        ctx.shadowBlur = 0;
        ctx.stroke();
      }
    } else if (org.apache.royale.utils.Language.is(filter, flash.filters.GlowFilter) && !shadowsOnly) {
      org.apache.royale.utils.Language.as(filter, flash.filters.GlowFilter, true).applyFilter(ctx, this, isText);
    }
  }}
  
};


/**
 * @param {CanvasRenderingContext2D} ctx
 */
flash.display.DisplayObject.prototype.__update = function(ctx) {
};


/**
 * @private
 * @param {flash.events.Event} e
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject___enterFrame = function(e) {
  if (SpriteFlexjs.dirtyGraphics) {
    SpriteFlexjs.dirtyGraphics = false;
    var /** @type {CanvasRenderingContext2D} */ ctx = this.stage.ctx;
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, this.stage.stageWidth, this.stage.stageHeight);
    SpriteFlexjs.drawCounter = 0;
    SpriteFlexjs.renderer.start(ctx);
    this.__update(ctx);
    SpriteFlexjs.renderer.finish(ctx);
  }
};


/**
 * @private
 * @param {flash.events.MouseEvent} e
 */
flash.display.DisplayObject.prototype.flash_display_DisplayObject___mouseevent = function(e) {
  var /** @type {number} */ time = flash.utils.getTimer();
  var /** @type {flash.display.DisplayObject} */ obj = this.__doMouse(e);
  time = flash.utils.getTimer();
  if (e.type === flash.events.MouseEvent.MOUSE_MOVE) {
    var /** @type {flash.display.DisplayObject} */ t = this.flash_display_DisplayObject_lastMouseOverObj;
    while (t) {
      if (t == obj) {
        break;
      } else {
        t.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.MOUSE_OUT, false, false, e.localX, e.localY, null, e.ctrlKey, e.altKey, e.shiftKey, e.buttonDown));
        t.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.ROLL_OUT, false, false, e.localX, e.localY, null, e.ctrlKey, e.altKey, e.shiftKey, e.buttonDown));
      }
      t = t.parent;
    }
    if (obj && obj != t) {
      var /** @type {flash.events.MouseEvent} */ over = new flash.events.MouseEvent(flash.events.MouseEvent.MOUSE_OVER, true, false, e.localX, e.localY, null, e.ctrlKey, e.altKey, e.shiftKey, e.buttonDown);
      var /** @type {flash.events.MouseEvent} */ rollover = new flash.events.MouseEvent(flash.events.MouseEvent.ROLL_OVER, true, false, e.localX, e.localY, null, e.ctrlKey, e.altKey, e.shiftKey, e.buttonDown);
      obj.dispatchEvent(over);
      obj.dispatchEvent(rollover);
    }
    this.flash_display_DisplayObject_lastMouseOverObj = obj;
  }
  if (obj)
    obj.dispatchEvent(e);
  if (SpriteFlexjs.debug)
    org.apache.royale.utils.Language.trace("__dispatchmouseevent", flash.utils.getTimer() - time);
};


/**
 * @protected
 * @param {flash.events.MouseEvent} e
 * @return {flash.display.DisplayObject}
 */
flash.display.DisplayObject.prototype.__doMouse = function(e) {
  return null;
};


/**
 * @override
 */
flash.display.DisplayObject.prototype.dispatchEvent = function(event) {
  var /** @type {boolean} */ b = flash.display.DisplayObject.superClass_.dispatchEvent.apply(this, [ event] );
  if (event.bubbles && this.parent) {
    this.parent.dispatchEvent(event);
  }
  return b;
};


flash.display.DisplayObject.prototype.get__stage = function() {
  return this.flash_display_DisplayObject__stage;
};


flash.display.DisplayObject.prototype.set__stage = function(v) {
  this.flash_display_DisplayObject__stage = v;
  if (this.flash_display_DisplayObject__stage) {
    this.dispatchEvent(new flash.events.Event(flash.events.Event.ADDED_TO_STAGE));
  } else {
    SpriteFlexjs.dirtyGraphics = true;
    this.dispatchEvent(new flash.events.Event(flash.events.Event.REMOVED_FROM_STAGE));
  }
};


flash.display.DisplayObject.prototype.get__loaderInfo = function() {
  return this.flash_display_DisplayObject__loaderInfo;
};


flash.display.DisplayObject.prototype.get__root = function() {
  return this._root;
};


flash.display.DisplayObject.prototype.get__name = function() {
  return this.flash_display_DisplayObject__name;
};


flash.display.DisplayObject.prototype.set__name = function(v) {
  this.flash_display_DisplayObject__name = v;
};


flash.display.DisplayObject.prototype.get__parent = function() {
  return this._parent;
};


flash.display.DisplayObject.prototype.get__mask = function() {
  return this.flash_display_DisplayObject__mask;
};


flash.display.DisplayObject.prototype.set__mask = function(param1) {
  this.flash_display_DisplayObject__mask = param1;
};


flash.display.DisplayObject.prototype.get__visible = function() {
  return this.flash_display_DisplayObject__visible;
};


flash.display.DisplayObject.prototype.set__visible = function(v) {
  this.flash_display_DisplayObject__visible = v;
};


flash.display.DisplayObject.prototype.get__x = function() {
  return this.transform.matrix.tx;
};


flash.display.DisplayObject.prototype.set__x = function(v) {
  this.transform.matrix.tx = v;
  this.updateTransforms();
};


flash.display.DisplayObject.prototype.get__y = function() {
  return this.transform.matrix.ty;
};


flash.display.DisplayObject.prototype.set__y = function(v) {
  this.transform.matrix.ty = v;
  this.updateTransforms();
};


flash.display.DisplayObject.prototype.get__z = function() {
  return 0;
};


flash.display.DisplayObject.prototype.set__z = function(v) {
};


flash.display.DisplayObject.prototype.get__scaleX = function() {
  var /** @type {flash.geom.Matrix} */ m = this.transform.matrix;
  if (m.b === 0)
    return m.a;
  return Math.sqrt(m.a * m.a + m.b * m.b);
};


flash.display.DisplayObject.prototype.set__scaleX = function(v) {
  var /** @type {flash.geom.Matrix} */ m = this.transform.matrix;
  if (m.c === 0) {
    m.a = v;
  } else {
    m.a = this.flash_display_DisplayObject_rcos * v;
    m.b = this.flash_display_DisplayObject_rsin * v;
  }
  this.updateTransforms();
};


flash.display.DisplayObject.prototype.get__scaleY = function() {
  var /** @type {flash.geom.Matrix} */ m = this.transform.matrix;
  if (m.c === 0) {
    return m.d;
  }
  return Math.sqrt(m.c * m.c + m.d * m.d);
};


flash.display.DisplayObject.prototype.set__scaleY = function(v) {
  var /** @type {flash.geom.Matrix} */ m = this.transform.matrix;
  if (m.c === 0) {
    m.d = v;
  } else {
    m.c = -this.flash_display_DisplayObject_rsin * v;
    m.d = this.flash_display_DisplayObject_rcos * v;
  }
  this.updateTransforms();
};


flash.display.DisplayObject.prototype.get__scaleZ = function() {
  return 1;
};


flash.display.DisplayObject.prototype.set__scaleZ = function(v) {
};


flash.display.DisplayObject.prototype.get__mouseX = function() {
  if (this.stage)
    return this.transform.invMatrix.transformPoint(new flash.geom.Point(this.stage.mouseX, this.stage.mouseY)).x;
  return 0;
};


flash.display.DisplayObject.prototype.get__mouseY = function() {
  if (this.stage)
    return this.transform.invMatrix.transformPoint(new flash.geom.Point(this.stage.mouseX, this.stage.mouseY)).y;
  return 0;
};


flash.display.DisplayObject.prototype.get__rotation = function() {
  return this.flash_display_DisplayObject__rotation;
};


flash.display.DisplayObject.prototype.set__rotation = function(v) {
  this.flash_display_DisplayObject__rotation = (v >= 360) ? v - 360 : v;
  var /** @type {flash.geom.Matrix} */ m = this.transform.matrix;
  var /** @type {number} */ r = v * Math.PI / 180;
  this.flash_display_DisplayObject_rsin = Math.sin(r);
  this.flash_display_DisplayObject_rcos = Math.cos(r);
  var /** @type {number} */ sx = m.b === 0 ? m.a : Math.sqrt(m.a * m.a + m.b * m.b);
  var /** @type {number} */ sy = m.c === 0 ? m.d : Math.sqrt(m.c * m.c + m.d * m.d);
  m.a = this.flash_display_DisplayObject_rcos * sx;
  m.b = this.flash_display_DisplayObject_rsin * sx;
  m.c = -this.flash_display_DisplayObject_rsin * sy;
  m.d = this.flash_display_DisplayObject_rcos * sy;
  this.updateTransforms();
};


flash.display.DisplayObject.prototype.get__rotationX = function() {
  return 0;
};


flash.display.DisplayObject.prototype.set__rotationX = function(v) {
};


flash.display.DisplayObject.prototype.get__rotationY = function() {
  return 0;
};


flash.display.DisplayObject.prototype.set__rotationY = function(v) {
};


flash.display.DisplayObject.prototype.get__rotationZ = function() {
  return 0;
};


flash.display.DisplayObject.prototype.set__rotationZ = function(v) {
};


flash.display.DisplayObject.prototype.get__alpha = function() {
  return this.transform.colorTransform.alphaMultiplier;
};


flash.display.DisplayObject.prototype.set__alpha = function(v) {
  this.transform.colorTransform.alphaMultiplier = v;
  this.transform.updateColorTransforms();
};


flash.display.DisplayObject.prototype.get__width = function() {
  var /** @type {flash.geom.Rectangle} */ rect = this.getRect(this);
  var /** @type {number} */ radians = this.flash_display_DisplayObject__rotation * (Math.PI / 180);
  rect.width = Math.round((rect.height * Math.abs(Math.sin(radians)) + rect.width * Math.abs(Math.cos(radians))) * 10) / 10;
  if (rect)
    return rect.width;
  return 0;
};


flash.display.DisplayObject.prototype.set__width = function(v) {
};


flash.display.DisplayObject.prototype.get__height = function() {
  var /** @type {flash.geom.Rectangle} */ rect = this.getRect(this);
  var /** @type {number} */ radians = this.flash_display_DisplayObject__rotation * (Math.PI / 180);
  rect.height = Math.round((rect.height * Math.abs(Math.cos(radians)) + rect.width * Math.abs(Math.sin(radians))) * 10) / 10;
  if (rect)
    return rect.height;
  return 0;
};


flash.display.DisplayObject.prototype.set__height = function(v) {
};


flash.display.DisplayObject.prototype.get__cacheAsBitmap = function() {
  return this.flash_display_DisplayObject__cacheAsBitmap;
};


flash.display.DisplayObject.prototype.set__cacheAsBitmap = function(v) {
  this.flash_display_DisplayObject__cacheAsBitmap = v;
  if (SpriteFlexjs.wmode.indexOf("gpu") != -1)
    this.flash_display_DisplayObject__cacheAsBitmap = false;
};


flash.display.DisplayObject.prototype.get__opaqueBackground = function() {
  return null;
};


flash.display.DisplayObject.prototype.set__opaqueBackground = function(v) {
};


flash.display.DisplayObject.prototype.get__scrollRect = function() {
  return null;
};


flash.display.DisplayObject.prototype.set__scrollRect = function(v) {
};


flash.display.DisplayObject.prototype.get__filters = function() {
  return this.flash_display_DisplayObject__filters;
};


flash.display.DisplayObject.prototype.set__filters = function(v) {
  this.flash_display_DisplayObject__filters = v;
  this.flash_display_DisplayObject__filterOffsetX = this.flash_display_DisplayObject__filterOffsetY = 0;
  var foreachiter1_target = this.flash_display_DisplayObject__filters;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var f = foreachiter1_target[foreachiter1];
  {
    this.flash_display_DisplayObject__filterOffsetX = Math.max(f.offsetX, this.flash_display_DisplayObject__filterOffsetX);
    this.flash_display_DisplayObject__filterOffsetY = Math.max(f.offsetY, this.flash_display_DisplayObject__filterOffsetY);
  }}
  
};


flash.display.DisplayObject.prototype.get__blendMode = function() {
  return this.flash_display_DisplayObject__blendMode;
};


flash.display.DisplayObject.prototype.set__blendMode = function(v) {
  this.flash_display_DisplayObject__blendMode = v;
};


flash.display.DisplayObject.prototype.get__scale9Grid = function() {
  return null;
};


flash.display.DisplayObject.prototype.set__scale9Grid = function(v) {
};


flash.display.DisplayObject.prototype.get__metaData = function() {
  return null;
};


flash.display.DisplayObject.prototype.set__metaData = function(param1) {
};


flash.display.DisplayObject.prototype.get__filterOffsetX = function() {
  return this.flash_display_DisplayObject__filterOffsetX;
};


flash.display.DisplayObject.prototype.get__filterOffsetY = function() {
  return this.flash_display_DisplayObject__filterOffsetY;
};


Object.defineProperties(flash.display.DisplayObject.prototype, /** @lends {flash.display.DisplayObject.prototype} */ {
/**
 * @type {flash.display.Stage}
 */
stage: {
get: flash.display.DisplayObject.prototype.get__stage,
set: flash.display.DisplayObject.prototype.set__stage},
/**
 * @type {flash.display.LoaderInfo}
 */
loaderInfo: {
get: flash.display.DisplayObject.prototype.get__loaderInfo},
/**
 * @type {flash.display.DisplayObject}
 */
root: {
get: flash.display.DisplayObject.prototype.get__root},
/**
 * @type {string}
 */
name: {
get: flash.display.DisplayObject.prototype.get__name,
set: flash.display.DisplayObject.prototype.set__name},
/**
 * @type {flash.display.DisplayObjectContainer}
 */
parent: {
get: flash.display.DisplayObject.prototype.get__parent},
/**
 * @type {flash.display.DisplayObject}
 */
mask: {
get: flash.display.DisplayObject.prototype.get__mask,
set: flash.display.DisplayObject.prototype.set__mask},
/**
 * @type {boolean}
 */
visible: {
get: flash.display.DisplayObject.prototype.get__visible,
set: flash.display.DisplayObject.prototype.set__visible},
/**
 * @type {number}
 */
x: {
get: flash.display.DisplayObject.prototype.get__x,
set: flash.display.DisplayObject.prototype.set__x},
/**
 * @type {number}
 */
y: {
get: flash.display.DisplayObject.prototype.get__y,
set: flash.display.DisplayObject.prototype.set__y},
/**
 * @type {number}
 */
z: {
get: flash.display.DisplayObject.prototype.get__z,
set: flash.display.DisplayObject.prototype.set__z},
/**
 * @type {number}
 */
scaleX: {
get: flash.display.DisplayObject.prototype.get__scaleX,
set: flash.display.DisplayObject.prototype.set__scaleX},
/**
 * @type {number}
 */
scaleY: {
get: flash.display.DisplayObject.prototype.get__scaleY,
set: flash.display.DisplayObject.prototype.set__scaleY},
/**
 * @type {number}
 */
scaleZ: {
get: flash.display.DisplayObject.prototype.get__scaleZ,
set: flash.display.DisplayObject.prototype.set__scaleZ},
/**
 * @type {number}
 */
mouseX: {
get: flash.display.DisplayObject.prototype.get__mouseX},
/**
 * @type {number}
 */
mouseY: {
get: flash.display.DisplayObject.prototype.get__mouseY},
/**
 * @type {number}
 */
rotation: {
get: flash.display.DisplayObject.prototype.get__rotation,
set: flash.display.DisplayObject.prototype.set__rotation},
/**
 * @type {number}
 */
rotationX: {
get: flash.display.DisplayObject.prototype.get__rotationX,
set: flash.display.DisplayObject.prototype.set__rotationX},
/**
 * @type {number}
 */
rotationY: {
get: flash.display.DisplayObject.prototype.get__rotationY,
set: flash.display.DisplayObject.prototype.set__rotationY},
/**
 * @type {number}
 */
rotationZ: {
get: flash.display.DisplayObject.prototype.get__rotationZ,
set: flash.display.DisplayObject.prototype.set__rotationZ},
/**
 * @type {number}
 */
alpha: {
get: flash.display.DisplayObject.prototype.get__alpha,
set: flash.display.DisplayObject.prototype.set__alpha},
/**
 * @type {number}
 */
width: {
get: flash.display.DisplayObject.prototype.get__width,
set: flash.display.DisplayObject.prototype.set__width},
/**
 * @type {number}
 */
height: {
get: flash.display.DisplayObject.prototype.get__height,
set: flash.display.DisplayObject.prototype.set__height},
/**
 * @type {boolean}
 */
cacheAsBitmap: {
get: flash.display.DisplayObject.prototype.get__cacheAsBitmap,
set: flash.display.DisplayObject.prototype.set__cacheAsBitmap},
/**
 * @type {Object}
 */
opaqueBackground: {
get: flash.display.DisplayObject.prototype.get__opaqueBackground,
set: flash.display.DisplayObject.prototype.set__opaqueBackground},
/**
 * @type {flash.geom.Rectangle}
 */
scrollRect: {
get: flash.display.DisplayObject.prototype.get__scrollRect,
set: flash.display.DisplayObject.prototype.set__scrollRect},
/**
 * @type {Array}
 */
filters: {
get: flash.display.DisplayObject.prototype.get__filters,
set: flash.display.DisplayObject.prototype.set__filters},
/**
 * @type {string}
 */
blendMode: {
get: flash.display.DisplayObject.prototype.get__blendMode,
set: flash.display.DisplayObject.prototype.set__blendMode},
/**
 * @type {flash.geom.Rectangle}
 */
scale9Grid: {
get: flash.display.DisplayObject.prototype.get__scale9Grid,
set: flash.display.DisplayObject.prototype.set__scale9Grid},
/**
 * @type {Object}
 */
metaData: {
get: flash.display.DisplayObject.prototype.get__metaData,
set: flash.display.DisplayObject.prototype.set__metaData},
/**
 * @type {number}
 */
filterOffsetX: {
get: flash.display.DisplayObject.prototype.get__filterOffsetX},
/**
 * @type {number}
 */
filterOffsetY: {
get: flash.display.DisplayObject.prototype.get__filterOffsetY}}
);


/**
 * @nocollapse
 * @export
 * @type {flash.display.Stage}
 */
flash.display.DisplayObject.initStage;


flash.display.DisplayObject.set__initStage = function(value) {
  flash.display.DisplayObject._globalStage = value;
};


Object.defineProperties(flash.display.DisplayObject, /** @lends {flash.display.DisplayObject} */ {
/**
 * @type {flash.display.Stage}
 */
initStage: {
set: flash.display.DisplayObject.set__initStage}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display.DisplayObject.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'DisplayObject', qName: 'flash.display.DisplayObject', kind: 'class' }], interfaces: [flash.display.IBitmapDrawable] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display.DisplayObject.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '_off': { type: 'Boolean', get_set: function (/** flash.display.DisplayObject */ inst, /** * */ v) {return v !== undefined ? inst._off = v : inst._off;}},
        'innerID': { type: 'int', get_set: function (/** flash.display.DisplayObject */ inst, /** * */ v) {return v !== undefined ? inst.innerID = v : inst.innerID;}},
        'transform': { type: 'flash.geom.Transform', get_set: function (/** flash.display.DisplayObject */ inst, /** * */ v) {return v !== undefined ? inst.transform = v : inst.transform;}},
        '_parent': { type: 'flash.display.DisplayObjectContainer', get_set: function (/** flash.display.DisplayObject */ inst, /** * */ v) {return v !== undefined ? inst._parent = v : inst._parent;}}
      };
    },
    accessors: function () {
      return {
        '|initStage': { type: 'flash.display.Stage', access: 'writeonly', declaredBy: 'flash.display.DisplayObject'},
        'stage': { type: 'flash.display.Stage', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'loaderInfo': { type: 'flash.display.LoaderInfo', access: 'readonly', declaredBy: 'flash.display.DisplayObject'},
        'root': { type: 'flash.display.DisplayObject', access: 'readonly', declaredBy: 'flash.display.DisplayObject'},
        'name': { type: 'String', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'parent': { type: 'flash.display.DisplayObjectContainer', access: 'readonly', declaredBy: 'flash.display.DisplayObject'},
        'mask': { type: 'flash.display.DisplayObject', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'visible': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'x': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'y': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'z': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'scaleX': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'scaleY': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'scaleZ': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'mouseX': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.DisplayObject'},
        'mouseY': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.DisplayObject'},
        'rotation': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'rotationX': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'rotationY': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'rotationZ': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'alpha': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'width': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'height': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'cacheAsBitmap': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'opaqueBackground': { type: 'Object', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'scrollRect': { type: 'flash.geom.Rectangle', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'filters': { type: 'Array', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'blendMode': { type: 'String', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'scale9Grid': { type: 'flash.geom.Rectangle', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'metaData': { type: 'Object', access: 'readwrite', declaredBy: 'flash.display.DisplayObject'},
        'filterOffsetX': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.DisplayObject'},
        'filterOffsetY': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.DisplayObject'}
      };
    },
    methods: function () {
      return {
        'DisplayObject': { type: '', declaredBy: 'flash.display.DisplayObject'},
        'initDisplayObjectStage': { type: 'void', declaredBy: 'flash.display.DisplayObject'},
        'updateTransforms': { type: 'void', declaredBy: 'flash.display.DisplayObject'},
        'globalToLocal': { type: 'flash.geom.Point', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.geom.Point', false ]; }},
        'localToGlobal': { type: 'flash.geom.Point', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.geom.Point', false ]; }},
        'getBounds': { type: 'flash.geom.Rectangle', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }},
        'getFullBounds': { type: 'flash.geom.Rectangle', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }},
        'getRect': { type: 'flash.geom.Rectangle', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }},
        '__getRect': { type: 'flash.geom.Rectangle', declaredBy: 'flash.display.DisplayObject'},
        'hitTestObject': { type: 'Boolean', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }},
        'hitTestPoint': { type: 'Boolean', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'Number', false ,'Number', false ,'Boolean', true ]; }},
        'globalToLocal3D': { type: 'flash.geom.Vector3D', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.geom.Point', false ]; }},
        'local3DToGlobal': { type: 'flash.geom.Point', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.geom.Vector3D', false ]; }},
        '__update': { type: 'void', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'CanvasRenderingContext2D', false ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'flash.display.DisplayObject', parameters: function () { return [ 'flash.events.Event', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.display.DisplayObject.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
flash.display.DisplayObject.prototype.ROYALE_INITIAL_STATICS = Object.keys(flash.display.DisplayObject);
