/**
 * Generated by Apache Royale Compiler from flash/display/Sprite.as
 * flash.display.Sprite
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display.Sprite');
/* Royale Dependency List: SpriteFlexjs,flash.display.BitmapData,flash.display.DisplayObject,flash.display.Graphics,flash.display.Stage,flash.events.Event,flash.events.MouseEvent,flash.geom.Matrix,flash.geom.Point,flash.geom.Rectangle,org.apache.royale.utils.Language*/

goog.require('flash.display.DisplayObjectContainer');



/**
 * @constructor
 * @extends {flash.display.DisplayObjectContainer}
 */
flash.display.Sprite = function() {
  
  this.graphics = new flash.display.Graphics();
  this.flash_display_Sprite__cacheImage = new flash.display.BitmapData(1, 1);
  flash.display.Sprite.base(this, 'constructor');
  flash.display.DisplayObject.initStage = flash.display.Stage.instance;
  this.initDisplayObjectStage();
};
goog.inherits(flash.display.Sprite, flash.display.DisplayObjectContainer);


/**
 * @type {flash.display.Graphics}
 */
flash.display.Sprite.prototype.graphics = null;


/**
 * @private
 * @type {flash.geom.Point}
 */
flash.display.Sprite.prototype.flash_display_Sprite_tempPos = null;


/**
 * @private
 * @type {HTMLCanvasElement}
 */
flash.display.Sprite.prototype.flash_display_Sprite__cacheCanvas = null;


/**
 * @private
 * @type {CanvasRenderingContext2D}
 */
flash.display.Sprite.prototype.flash_display_Sprite__cacheCTX = null;


/**
 * @private
 * @type {flash.display.BitmapData}
 */
flash.display.Sprite.prototype.flash_display_Sprite__cacheImage = null;


/**
 * @private
 * @type {flash.geom.Matrix}
 */
flash.display.Sprite.prototype.flash_display_Sprite__cacheMatrix = null;


/**
 * @private
 * @type {number}
 */
flash.display.Sprite.prototype.flash_display_Sprite__cacheOffsetX = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Sprite.prototype.flash_display_Sprite__cacheOffsetY = 0;


/**
 * @private
 * @type {boolean}
 */
flash.display.Sprite.prototype.flash_display_Sprite__buttonMode = false;


/**
 * @param {boolean=} lockCenter
 * @param {flash.geom.Rectangle=} bounds
 */
flash.display.Sprite.prototype.startDrag = function(lockCenter, bounds) {
  lockCenter = typeof lockCenter !== 'undefined' ? lockCenter : false;
  bounds = typeof bounds !== 'undefined' ? bounds : null;
  flash.display.Stage.instance.setDragSprite(this, lockCenter, bounds);
};


/**
 */
flash.display.Sprite.prototype.stopDrag = function() {
  flash.display.Stage.instance.setDragSprite(null);
};


/**
 * @param {number} param1
 * @param {boolean=} param2
 * @param {flash.geom.Rectangle=} param3
 */
flash.display.Sprite.prototype.startTouchDrag = function(param1, param2, param3) {
  param2 = typeof param2 !== 'undefined' ? param2 : false;
  param3 = typeof param3 !== 'undefined' ? param3 : null;
};


/**
 * @param {number} param1
 */
flash.display.Sprite.prototype.stopTouchDrag = function(param1) {
};


/**
 * @override
 */
flash.display.Sprite.prototype.__getRect = function() {
  return this.graphics.bound;
};


/**
 * @override
 */
flash.display.Sprite.prototype.__update = function(ctx) {
  if (!this._off && this.visible && (this.graphics.graphicsData.length || this.numChildren)) {
    if (this.filters.length && !this.cacheAsBitmap && !this.parent.cacheAsBitmap)
      this.cacheAsBitmap = true;
    if (this.cacheAsBitmap && !this.parent.cacheAsBitmap) {
      SpriteFlexjs.renderer.renderImage(ctx, this.flash_display_Sprite__cacheImage, this.transform.concatenatedMatrix, this.blendMode, this.transform.concatenatedColorTransform, -this.x - this.flash_display_Sprite__cacheOffsetX, -this.y - this.flash_display_Sprite__cacheOffsetY);
    } else {
      this.graphics.draw(ctx, this.transform.concatenatedMatrix, this.blendMode, this.transform.concatenatedColorTransform, this.cacheAsBitmap, this.flash_display_Sprite__cacheImage);
      this.ApplyFilters(ctx);
    }
  }
  if (!this.cacheAsBitmap && !this._off)
    flash.display.Sprite.superClass_.__update.apply(this, [ ctx] );
};


/**
 * @protected
 * @override
 */
flash.display.Sprite.prototype.__doMouse = function(e) {
  flash.display.Stage.instance.canvas.style.cursor = "default";
  if (this.mouseEnabled && this.visible) {
    var /** @type {flash.display.DisplayObject} */ obj = flash.display.Sprite.superClass_.__doMouse.apply(this, [ e] );
    if (obj)
      return obj;
    if (this.hitTestPoint(this.stage.mouseX, this.stage.mouseY)) {
      if (this.flash_display_Sprite__buttonMode)
        flash.display.Stage.instance.canvas.style.cursor = "pointer";
      return this;
    }
  }
  return null;
};


/**
 * @override
 */
flash.display.Sprite.prototype.addEventListener = function(type, listener, useCapture, priority, useWeakReference) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  priority = typeof priority !== 'undefined' ? priority : 0;
  useWeakReference = typeof useWeakReference !== 'undefined' ? useWeakReference : false;
  if (type == flash.events.Event.ENTER_FRAME) {
    flash.display.Stage.instance.__enterframeSprites.push(this);
  }
  flash.display.Sprite.superClass_.addEventListener.apply(this, [ type, listener, useCapture, priority, useWeakReference] );
};


flash.display.Sprite.prototype.get__buttonMode = function() {
  return this.flash_display_Sprite__buttonMode;
};


flash.display.Sprite.prototype.set__buttonMode = function(value) {
  this.flash_display_Sprite__buttonMode = value;
};


flash.display.Sprite.prototype.get__dropTarget = function() {
  return null;
};


flash.display.Sprite.prototype.get__hitArea = function() {
  return null;
};


flash.display.Sprite.prototype.set__hitArea = function(param1) {
};


flash.display.Sprite.prototype.get__useHandCursor = function() {
  return false;
};


flash.display.Sprite.prototype.set__useHandCursor = function(param1) {
};


flash.display.Sprite.prototype.set__cacheAsBitmap = function(value) {
  flash.display.Sprite.superClass_.set__cacheAsBitmap.apply(this, [ value] );
  if (this.cacheAsBitmap) {
    var /** @type {boolean} */ hasGraphics = !!((this.graphics && this.graphics.bound));
    var /** @type {flash.geom.Rectangle} */ bounds = this.getFullBounds(this);
    if (!hasGraphics) {
      bounds.width += bounds.x;
      bounds.height += bounds.y;
      bounds.x = 0;
      bounds.y = 0;
    }
    this.flash_display_Sprite__cacheCanvas = document.createElement("canvas");
    this.flash_display_Sprite__cacheCanvas.width = bounds.width;
    this.flash_display_Sprite__cacheCanvas.height = bounds.height;
    this.flash_display_Sprite__cacheCTX = this.flash_display_Sprite__cacheCanvas.getContext('2d');
    if (SpriteFlexjs.debug) {
      this.flash_display_Sprite__cacheCTX.fillStyle = "blue";
      this.flash_display_Sprite__cacheCTX.fillRect(0, 0, this.flash_display_Sprite__cacheCanvas.width, this.flash_display_Sprite__cacheCanvas.height);
    }
    this.flash_display_Sprite__cacheOffsetX = hasGraphics ? bounds.width - bounds.right - this.x : -this.x;
    this.flash_display_Sprite__cacheOffsetY = hasGraphics ? bounds.height - bounds.bottom - this.y : -this.y;
    if (this.parent) {
      this.flash_display_Sprite__cacheOffsetX -= this.parent.x;
      this.flash_display_Sprite__cacheOffsetY -= this.parent.y;
    }
    var /** @type {flash.geom.Matrix} */ mat = this.transform.concatenatedMatrix.clone();
    mat.translate(this.flash_display_Sprite__cacheOffsetX, this.flash_display_Sprite__cacheOffsetY);
    this.graphics.draw(this.flash_display_Sprite__cacheCTX, mat, this.blendMode, this.transform.concatenatedColorTransform);
    this.ApplyFilters(this.flash_display_Sprite__cacheCTX);
    for (var /** @type {number} */ i = 0; i < this.numChildren; i++) {
      var /** @type {flash.display.DisplayObject} */ child = this.getChildAt(i);
      child.cacheAsBitmap = true;
      this.flash_display_Sprite__cacheCTX.drawImage(org.apache.royale.utils.Language.resolveUncertain(Object(child)).cacheImage.image, -(org.apache.royale.utils.Language.resolveUncertain(Object(child)).cacheOffsetX + this.x), -(org.apache.royale.utils.Language.resolveUncertain(Object(child)).cacheOffsetY + this.y));
    }
    this.flash_display_Sprite__cacheImage.image = this.flash_display_Sprite__cacheCanvas;
    this.updateTransforms();
  } else {
    this.flash_display_Sprite__cacheCanvas = null;
    this.flash_display_Sprite__cacheCTX = null;
  }
};


flash.display.Sprite.prototype.get__cacheImage = function() {
  return this.flash_display_Sprite__cacheImage;
};


flash.display.Sprite.prototype.get__cacheOffsetX = function() {
  return this.flash_display_Sprite__cacheOffsetX;
};


flash.display.Sprite.prototype.get__cacheOffsetY = function() {
  return this.flash_display_Sprite__cacheOffsetY;
};


Object.defineProperties(flash.display.Sprite.prototype, /** @lends {flash.display.Sprite.prototype} */ {
/**
 * @type {boolean}
 */
buttonMode: {
get: flash.display.Sprite.prototype.get__buttonMode,
set: flash.display.Sprite.prototype.set__buttonMode},
/**
 * @type {flash.display.DisplayObject}
 */
dropTarget: {
get: flash.display.Sprite.prototype.get__dropTarget},
/**
 * @type {flash.display.Sprite}
 */
hitArea: {
get: flash.display.Sprite.prototype.get__hitArea,
set: flash.display.Sprite.prototype.set__hitArea},
/**
 * @type {boolean}
 */
useHandCursor: {
get: flash.display.Sprite.prototype.get__useHandCursor,
set: flash.display.Sprite.prototype.set__useHandCursor},
/**
 * @type {boolean}
 */
cacheAsBitmap: {
get: flash.display.DisplayObject.prototype.get__cacheAsBitmap,
set: flash.display.Sprite.prototype.set__cacheAsBitmap},
/**
 * @type {flash.display.BitmapData}
 */
cacheImage: {
get: flash.display.Sprite.prototype.get__cacheImage},
/**
 * @type {number}
 */
cacheOffsetX: {
get: flash.display.Sprite.prototype.get__cacheOffsetX},
/**
 * @type {number}
 */
cacheOffsetY: {
get: flash.display.Sprite.prototype.get__cacheOffsetY}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display.Sprite.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Sprite', qName: 'flash.display.Sprite', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display.Sprite.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'graphics': { type: 'flash.display.Graphics', get_set: function (/** flash.display.Sprite */ inst, /** * */ v) {return v !== undefined ? inst.graphics = v : inst.graphics;}}
      };
    },
    accessors: function () {
      return {
        'buttonMode': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.Sprite'},
        'dropTarget': { type: 'flash.display.DisplayObject', access: 'readonly', declaredBy: 'flash.display.Sprite'},
        'hitArea': { type: 'flash.display.Sprite', access: 'readwrite', declaredBy: 'flash.display.Sprite'},
        'useHandCursor': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.Sprite'},
        'cacheAsBitmap': { type: 'Boolean', access: 'writeonly', declaredBy: 'flash.display.Sprite'},
        'cacheImage': { type: 'flash.display.BitmapData', access: 'readonly', declaredBy: 'flash.display.Sprite'},
        'cacheOffsetX': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.Sprite'},
        'cacheOffsetY': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.Sprite'}
      };
    },
    methods: function () {
      return {
        'Sprite': { type: '', declaredBy: 'flash.display.Sprite'},
        'startDrag': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [ 'Boolean', true ,'flash.geom.Rectangle', true ]; }},
        'stopDrag': { type: 'void', declaredBy: 'flash.display.Sprite'},
        'startTouchDrag': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [ 'int', false ,'Boolean', true ,'flash.geom.Rectangle', true ]; }},
        'stopTouchDrag': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [ 'int', false ]; }},
        '__getRect': { type: 'flash.geom.Rectangle', declaredBy: 'flash.display.Sprite'},
        '__update': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [ 'CanvasRenderingContext2D', false ]; }},
        'addEventListener': { type: 'void', declaredBy: 'flash.display.Sprite', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ,'int', true ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.display.Sprite.prototype.ROYALE_COMPILE_FLAGS = 9;
