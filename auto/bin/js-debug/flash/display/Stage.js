/**
 * Generated by Apache Royale Compiler from flash/display/Stage.as
 * flash.display.Stage
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display.Stage');
/* Royale Dependency List: SpriteFlexjs,flash.__native.BaseRenderer,flash.__native.GLCanvasRenderingContext2D,flash.__native.WebGLRenderer,flash.accessibility.AccessibilityImplementation,flash.accessibility.AccessibilityProperties,flash.display.BlendMode,flash.display.DisplayObject,flash.display.InteractiveObject,flash.display.Sprite,flash.display.Stage3D,flash.display.StageAlign,flash.display.StageQuality,flash.display.StageScaleMode,flash.events.Event,flash.events.KeyboardEvent,flash.events.MouseEvent,flash.events.TouchEvent,flash.geom.Rectangle,flash.geom.Transform,flash.text.TextSnapshot,flash.ui.ContextMenu,org.apache.royale.utils.Language*/

goog.require('flash.display.DisplayObjectContainer');



/**
 * Stage is a singular instance per window and cannot be instantiated twice.
 * @constructor
 * @extends {flash.display.DisplayObjectContainer}
 */
flash.display.Stage = function() {
  
  this.flash_display_Stage__align = flash.display.StageAlign.TOP_LEFT;
  this.flash_display_Stage__blendMode = flash.display.BlendMode.NORMAL;
  this.flash_display_Stage__filters = [];
  this.flash_display_Stage__quality = flash.display.StageQuality.BEST;
  this.flash_display_Stage__scaleMode = flash.display.StageScaleMode.SHOW_ALL;
  this.__enterframeSprites = [];
  flash.display.Stage.base(this, 'constructor');
  if (flash.display.Stage._instance && !flash.display.Stage._instantiate)
    throw new Error("Stage is a singular instance and can't be instantiated twice. Access using instance.");
  org.apache.royale.utils.Language.trace("powered by SpriteFlexJS");
  this.transform = new flash.geom.Transform(this);
  this.flash_display_Stage_prevTime = window.performance.now();
  if (SpriteFlexjs.rootHTMLElement) {
    this.__rootHtmlElement = SpriteFlexjs.rootHTMLElement;
    this.__rootHtmlElement.innerHTML = '';
  } else {
    this.__rootHtmlElement = document.createElement("div");
    document.body.appendChild(this.__rootHtmlElement);
  }
  this.__htmlWrapper = document.createElement("div");
  this.__htmlWrapper.style.position = "absolute";
  this.__htmlWrapper.style.left = "0px";
  this.__htmlWrapper.style.top = "0px";
  this.__htmlWrapper.style.zIndex = 0;
  document.body.appendChild(this.__htmlWrapper);
  if (SpriteFlexjs.startTime === 0)
    SpriteFlexjs.startTime = Date.now();
  this.flash_display_Stage__frameRate = 60;
  this.flash_display_Stage__stage3Ds = org.apache.royale.utils.Language.synthVector('flash.display.Stage3D')['coerce']([new flash.display.Stage3D(), new flash.display.Stage3D(), new flash.display.Stage3D(), new flash.display.Stage3D()]);
  this.flash_display_Stage__stage3Ds[0].__stage = this;
  this.flash_display_Stage__stage3Ds[1].__stage = this;
  this.flash_display_Stage__stage3Ds[2].__stage = this;
  this.flash_display_Stage__stage3Ds[3].__stage = this;
  this.flash_display_Stage_window_resize();
  window.addEventListener("resize", org.apache.royale.utils.Language.closure(this.flash_display_Stage_window_resize, this, 'flash_display_Stage_window_resize'), false);
  window.addEventListener("orientationchange", org.apache.royale.utils.Language.closure(this.flash_display_Stage_window_resize, this, 'flash_display_Stage_window_resize'), false);
  setTimeout(org.apache.royale.utils.Language.closure(this.flash_display_Stage__updateStage, this, 'flash_display_Stage__updateStage'));
  flash.display.Stage._instance = this;
  flash.display.Stage._instance.name = "Stage";
};
goog.inherits(flash.display.Stage, flash.display.DisplayObjectContainer);


/**
 * @private
 * @type {flash.display.Stage}
 */
flash.display.Stage._instance = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage._instantiate = false;


/**
 * @private
 * @const
 * @type {number}
 */
flash.display.Stage.kInvalidParamError = 2004;


/**
 * @type {Element}
 */
flash.display.Stage.prototype.__rootHtmlElement = null;


/**
 * @type {Element}
 */
flash.display.Stage.prototype.__htmlWrapper = null;


/**
 * @private
 * @type {HTMLCanvasElement}
 */
flash.display.Stage.prototype.flash_display_Stage__canvas = null;


/**
 * @private
 * @type {CanvasRenderingContext2D}
 */
flash.display.Stage.prototype.flash_display_Stage__ctx = null;


/**
 * @private
 * @type {CanvasRenderingContext2D}
 */
flash.display.Stage.prototype.flash_display_Stage__ctx2d = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_prevTime = NaN;


/**
 * @private
 * @type {Object}
 */
flash.display.Stage.prototype.flash_display_Stage_needSendMouseMove = null;


/**
 * @private
 * @type {Object}
 */
flash.display.Stage.prototype.flash_display_Stage_needSendTouchMove = false;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_lastUpdateTime = -1000;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_origWidth = -1;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_origHeight = -1;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__align = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__allowsFullScreen = true;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__allowsFullScreenInteractive = true;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__alpha = 1;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__blendMode = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__browserZoomFactor = 1;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__cacheAsBitmap = false;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__color = 0xffffff;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__colorCorrection = null;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__colorCorrectionSupport = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__contentsScaleFactor = 1;


/**
 * @private
 * @type {flash.ui.ContextMenu}
 */
flash.display.Stage.prototype.flash_display_Stage__contextMenu = null;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__displayContextInfo = null;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__displayState = null;


/**
 * @private
 * @type {Array}
 */
flash.display.Stage.prototype.flash_display_Stage__filters = null;


/**
 * @private
 * @type {flash.display.InteractiveObject}
 */
flash.display.Stage.prototype.flash_display_Stage__focus = null;


/**
 * @private
 * @type {Object}
 */
flash.display.Stage.prototype.flash_display_Stage__focusRect = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__frameRate = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__fullScreenHeight = 0;


/**
 * @private
 * @type {flash.geom.Rectangle}
 */
flash.display.Stage.prototype.flash_display_Stage__fullScreenSourceRect = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__fullScreenWidth = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__height = NaN;


/**
 * @private
 * @type {flash.display.DisplayObject}
 */
flash.display.Stage.prototype.flash_display_Stage__mask = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__mouseChildren = true;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__mouseEnabled = true;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__mouseLock = false;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__mouseX = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__mouseY = 0;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__name = null;


/**
 * @private
 * @type {Object}
 */
flash.display.Stage.prototype.flash_display_Stage__opaqueBackground = null;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__quality = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__rotation = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__rotationX = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__rotationY = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__rotationZ = 0;


/**
 * @private
 * @type {flash.geom.Rectangle}
 */
flash.display.Stage.prototype.flash_display_Stage__scale9Grid = null;


/**
 * @private
 * @type {string}
 */
flash.display.Stage.prototype.flash_display_Stage__scaleMode = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__scaleX = 1;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__scaleY = 1;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__scaleZ = 1;


/**
 * @private
 * @type {flash.geom.Rectangle}
 */
flash.display.Stage.prototype.flash_display_Stage__scrollRect = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__showDefaultContextMenu = true;


/**
 * @private
 * @type {flash.geom.Rectangle}
 */
flash.display.Stage.prototype.flash_display_Stage__softKeyboardRect = null;


/**
 * @private
 * @type {Array.<flash.display.Stage3D>}
 */
flash.display.Stage.prototype.flash_display_Stage__stage3Ds = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__stageFocusRec = true;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__stageHeight = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__stageWidth = 0;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__tabChildren = true;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__tabIndex = 0;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__tabEnabled = true;


/**
 * @private
 * @type {flash.text.TextSnapshot}
 */
flash.display.Stage.prototype.flash_display_Stage__textSnapshot = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__visible = true;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__width = NaN;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage__wmodeGPU = true;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__x = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__y = 0;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage__z = 0;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage_isButtonDown = false;


/**
 * @type {Array}
 */
flash.display.Stage.prototype.__enterframeSprites = null;


/**
 * @private
 * @param {Object=} e
 */
flash.display.Stage.prototype.flash_display_Stage_window_resize = function(e) {
  e = typeof e !== 'undefined' ? e : null;
  if (this.flash_display_Stage_origWidth == -1)
    this.flash_display_Stage_origWidth = (SpriteFlexjs.stageWidth) >> 0;
  if (this.flash_display_Stage_origHeight == -1)
    this.flash_display_Stage_origHeight = (SpriteFlexjs.stageHeight) >> 0;
  SpriteFlexjs.dirtyGraphics = true;
  if (SpriteFlexjs.autoSize) {
    SpriteFlexjs.stageWidth = (SpriteFlexjs.rootHTMLElement) ? SpriteFlexjs.rootHTMLElement.clientWidth : window.innerWidth;
    SpriteFlexjs.stageHeight = (SpriteFlexjs.rootHTMLElement) ? SpriteFlexjs.rootHTMLElement.clientHeight : window.innerHeight;
  }
  this.flash_display_Stage__stageWidth = (SpriteFlexjs.stageWidth) >> 0;
  this.flash_display_Stage__stageHeight = (SpriteFlexjs.stageHeight) >> 0;
  this.canvas.width = this.flash_display_Stage__stageWidth;
  this.canvas.height = this.flash_display_Stage__stageHeight;
  this.canvas.style.width = this.flash_display_Stage__stageWidth + "px";
  this.canvas.style.height = this.flash_display_Stage__stageHeight + "px";
  if (flash.display.Stage._instance && flash.display.Stage._instance.root) {
    if (flash.display.Stage._instance.scaleMode == flash.display.StageScaleMode.SHOW_ALL) {
      flash.display.Stage._instance.root.scaleX = SpriteFlexjs.stageWidth / this.flash_display_Stage_origWidth;
      flash.display.Stage._instance.root.scaleY = flash.display.Stage._instance.root.scaleX;
      if (flash.display.Stage._instance.root.scaleY * this.flash_display_Stage_origHeight > this.flash_display_Stage__stageHeight) {
        flash.display.Stage._instance.root.scaleY = SpriteFlexjs.stageHeight / this.flash_display_Stage_origHeight;
        flash.display.Stage._instance.root.scaleX = flash.display.Stage._instance.root.scaleY;
      }
    } else if (flash.display.Stage._instance.scaleMode == flash.display.StageScaleMode.EXACT_FIT) {
      flash.display.Stage._instance.root.scaleX = SpriteFlexjs.stageWidth / this.flash_display_Stage_origWidth;
      flash.display.Stage._instance.root.scaleY = SpriteFlexjs.stageHeight / this.flash_display_Stage_origHeight;
    }
  }
  this.dispatchEvent(new flash.events.Event(flash.events.Event.RESIZE));
};


/**
 * @private
 */
flash.display.Stage.prototype.flash_display_Stage__updateStage = function() {
  SpriteFlexjs.requestAnimationFrame.call(window, org.apache.royale.utils.Language.closure(this.flash_display_Stage__updateStage, this, 'flash_display_Stage__updateStage'));
  if (this.flash_display_Stage__stageWidth != SpriteFlexjs.stageWidth || this.flash_display_Stage__stageHeight != SpriteFlexjs.stageHeight) {
    this.flash_display_Stage_window_resize(null);
  }
  if (this.flash_display_Stage_needSendMouseMove) {
    this.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.MOUSE_MOVE, true, false, this.flash_display_Stage__mouseX, this.flash_display_Stage__mouseY, null, this.flash_display_Stage_needSendMouseMove.ctrlKey, this.flash_display_Stage_needSendMouseMove.altKey, this.flash_display_Stage_needSendMouseMove.shiftKey, (this.flash_display_Stage_needSendMouseMove.buttons != null) ? (this.flash_display_Stage_needSendMouseMove.buttons > 0) : this.flash_display_Stage_isButtonDown));
    this.flash_display_Stage_needSendMouseMove = null;
  }
  if (this.flash_display_Stage_needSendTouchMove) {
    this.dispatchEvent(new flash.events.TouchEvent(flash.events.TouchEvent.TOUCH_MOVE, true, false, 0, true, this.flash_display_Stage__mouseX, this.flash_display_Stage__mouseY, null, this.flash_display_Stage_needSendTouchMove.ctrlKey, this.flash_display_Stage_needSendTouchMove.altKey, this.flash_display_Stage_needSendTouchMove.shiftKey, (this.flash_display_Stage_needSendTouchMove.buttons != null) ? (this.flash_display_Stage_needSendTouchMove.buttons > 0) : this.flash_display_Stage_isButtonDown));
    this.flash_display_Stage_needSendTouchMove = null;
  }
  var /** @type {number} */ fpsInterval = 1000 / this.flash_display_Stage__frameRate;
  var /** @type {number} */ now = window.performance.now();
  var /** @type {number} */ elapsed = now - this.flash_display_Stage_prevTime;
  if (elapsed > fpsInterval) {
    var foreachiter0_target = this.__enterframeSprites;
    for (var foreachiter0 in foreachiter0_target) 
    {
    var es = foreachiter0_target[foreachiter0];
    {
      es.dispatchEvent(new flash.events.Event(flash.events.Event.ENTER_FRAME));
    }}
    
    this.flash_display_Stage_prevTime = now - (elapsed % fpsInterval);
    this.dispatchEvent(new flash.events.Event(flash.events.Event.ENTER_FRAME, true));
  }
};


/**
 * Adds a child DisplayObject instance to this DisplayObjectContainer instance. The child is added
 * to the front (top) of all other children in this DisplayObjectContainer instance. (To add a child to a 
 * specific index position, use the addChildAt() method.)
 * 
 *   If you add a child object that already has a different display object container as
 * a parent, the object is removed from the child list of the other display object container. Note: The command stage.addChild() can cause problems with a published SWF file,
 * including security problems and conflicts with other loaded SWF files. There is only one Stage within a Flash runtime instance, 
 * no matter how many SWF files you load into the runtime. So, generally, objects
 * should not be added to the Stage, directly, at all. The only object the Stage should
 * contain is the root object. Create a DisplayObjectContainer to contain all of the items on the
 * display list. Then, if necessary, add that DisplayObjectContainer instance to the Stage.
 * @asparam	child	The DisplayObject instance to add as a child of this DisplayObjectContainer instance.
 * @asreturn	The DisplayObject instance that you pass in the 
 *   child parameter.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @throws	SecurityError Calling the addChild() method of a Stage object throws an exception for
 *   any caller that is not in the same security sandbox as the Stage owner (the main SWF file).
 *   To avoid this, the Stage owner can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.addChild = function(child) {
  return flash.display.Stage.superClass_.addChild.apply(this, [ child] );
};


/**
 * Adds a child DisplayObject instance to this DisplayObjectContainer 
 * instance.  The child is added
 * at the index position specified. An index of 0 represents the back (bottom) 
 * of the display list for this DisplayObjectContainer object.
 * 
 *   For example, the following example shows three display objects, labeled a, b, and c, at
 * index positions 0, 2, and 1, respectively:If you add a child object that already has a different display object container as
 * a parent, the object is removed from the child list of the other display object container.
 * @asparam	child	The DisplayObject instance to add as a child of this 
 *   DisplayObjectContainer instance.
 * @asparam	index	The index position to which the child is added. If you specify a 
 *   currently occupied index position, the child object that exists at that position and all
 *   higher positions are moved up one position in the child list.
 * @asreturn	The DisplayObject instance that you pass in the 
 *   child parameter.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @throws	SecurityError Calling the addChildAt() method of a Stage object throws an exception for
 *   any caller that is not in the same security sandbox as the Stage owner (the main SWF file).
 *   To avoid this, the Stage owner can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.addChildAt = function(child, index) {
  return flash.display.Stage.superClass_.addChildAt.apply(this, [ child, index] );
};


/**
 * Registers an event listener object with an EventDispatcher object so that the listener 
 * receives notification of an event. You can register event listeners on all nodes in the 
 * display list for a specific type of event, phase, and priority.After you successfully register an event listener, you cannot change its priority
 * through additional calls to addEventListener(). To change a listener's
 * priority, you must first call removeListener(). Then you can register the
 * listener again with the new priority level. Keep in mind that after the listener is registered, subsequent calls to
 * addEventListener() with a different type or
 * useCapture value result in the creation of a separate listener registration. 
 * For example, if you first register a listener with useCapture set to 
 * true, it listens only during the capture phase. If you call 
 * addEventListener() again using the same listener object, but with
 * useCapture set to false, you have two separate listeners: one
 * that listens during the capture phase and another that listens during the target and
 * bubbling phases.You cannot register an event listener for only the target phase or the bubbling 
 * phase. Those phases are coupled during registration because bubbling 
 * applies only to the ancestors of the target node.If you no longer need an event listener, remove it by calling 
 * removeEventListener(), or memory problems could result. Event listeners are not automatically
 * removed from memory because the garbage
 * collector does not remove the listener as long as the dispatching object exists (unless the useWeakReference
 * parameter is set to true).Copying an EventDispatcher instance does not copy the event listeners attached to it. 
 * (If your newly created node needs an event listener, you must attach the listener after
 * creating the node.) However, if you move an EventDispatcher instance, the event listeners 
 * attached to it move along with it.If the event listener is being registered on a node while an event is being processed
 * on this node, the event listener is not triggered during the current phase but can be 
 * triggered during a later phase in the event flow, such as the bubbling phase.If an event listener is removed from a node while an event is being processed on the node,
 * it is still triggered by the current actions. After it is removed, the event listener is
 * never invoked again (unless registered again for future processing).
 * @asparam	type	The type of event.
 * @asparam	listener	The listener function that processes the event. This function must accept
 *   an Event object as its only parameter and must return nothing, as this example shows:
 *   <codeblock>
 *   function(evt:Event):void
 *   </codeblock>
 *   The function can have any name.
 * @asparam	useCapture	Determines whether the listener works in the capture phase or the 
 *   target and bubbling phases. If useCapture is set to true, 
 *   the listener processes the event only during the capture phase and not in the 
 *   target or bubbling phase. If useCapture is false, the
 *   listener processes the event only during the target or bubbling phase. To listen for
 *   the event in all three phases, call addEventListener twice, once with 
 *   useCapture set to true, then again with
 *   useCapture set to false.
 * @asparam	priority	The priority level of the event listener. The priority is designated by
 *   a signed 32-bit integer. The higher the number, the higher the priority. All listeners
 *   with priority n are processed before listeners of priority n-1. If two
 *   or more listeners share the same priority, they are processed in the order in which they
 *   were added. The default priority is 0.
 * @asparam	useWeakReference	Determines whether the reference to the listener is strong or
 *   weak. A strong reference (the default) prevents your listener from being garbage-collected.
 *   A weak reference does not. Class-level member functions are not subject to garbage 
 *   collection, so you can set useWeakReference to true for 
 *   class-level member functions without subjecting them to garbage collection. If you set
 *   useWeakReference to true for a listener that is a nested inner 
 *   function, the function will be garbage-collected and no longer persistent. If you create 
 *   references to the inner function (save it in another variable) then it is not 
 *   garbage-collected and stays persistent.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @throws	SecurityError Calling the addEventListener method of a Stage object throws an exception for 
 *   any caller that is not in the same security sandbox as the Stage owner (the main SWF file).
 *   To avoid this situation, the Stage owner can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.addEventListener = function(type, listener, useCapture, priority, useWeakReference) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  priority = typeof priority !== 'undefined' ? priority : 0;
  useWeakReference = typeof useWeakReference !== 'undefined' ? useWeakReference : false;
  flash.display.Stage.superClass_.addEventListener.apply(this, [ type, listener, useCapture, priority, useWeakReference] );
};


/**
 * Dispatches an event into the event flow. The event target is the EventDispatcher 
 * object upon which the dispatchEvent() method is called.
 * @asparam	event	The Event object that is dispatched into the event flow.
 *   If the event is being redispatched, a clone of the event is created automatically.
 *   After an event is dispatched, its target property cannot be changed, so you
 *   must create a new copy of the event for redispatching to work.
 * @asreturn	A value of true if the event was successfully dispatched. A value of false indicates failure or that preventDefault() was called 
 *   on the event.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @throws	SecurityError Calling the dispatchEvent() method of a Stage object throws an exception for 
 *   any caller that is not in the same security sandbox as the Stage owner (the main SWF file).
 *   To avoid this, the Stage owner can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.dispatchEvent = function(event) {
  return flash.display.Stage.superClass_.dispatchEvent.apply(this, [ event] );
};


/**
 * Checks whether the EventDispatcher object has any listeners registered for a specific type 
 * of event. This allows you to determine where an EventDispatcher object has altered
 * handling of an event type in the event flow hierarchy. To determine whether a specific
 * event type actually triggers an event listener, use willTrigger().
 * 
 *   The difference between hasEventListener() and willTrigger() 
 * is that hasEventListener() examines only the object to 
 * which it belongs, whereas willTrigger() examines the entire 
 * event flow for the event specified by the type parameter.
 * 
 *   When hasEventListener() is called from a LoaderInfo object, only the 
 * listeners that the caller can access are considered.
 * @asparam	type	The type of event.
 * @asreturn	A value of true if a listener of the specified type is registered; 
 *   false otherwise.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @throws	SecurityError Calling the hasEventListener() method of a Stage object throws an exception for 
 *   any caller that is not in the same security sandbox as the Stage owner (the main SWF file).
 *   To avoid this, the Stage owner can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.hasEventListener = function(type) {
  return flash.display.Stage.superClass_.hasEventListener.apply(this, [ type] );
};


/**
 * Calling the invalidate() method signals Flash runtimes to alert display objects 
 * on the next opportunity it has to render the display list (for example, when the playhead 
 * advances to a new frame). After you call the invalidate() method, when the display 
 * list is next rendered, the Flash runtime sends a render event to each display object that has 
 * registered to listen for the render event. You must call the invalidate() 
 * method each time you want the Flash runtime to send render events.
 * 
 *   The render event gives you an opportunity to make changes to the display list 
 * immediately before it is actually rendered. This lets you defer updates to the display list until the 
 * latest opportunity. This can increase performance by eliminating unnecessary screen updates.The render event is dispatched only to display objects that are in the same 
 * security domain as the code that calls the stage.invalidate() method, 
 * or to display objects from a security domain that has been granted permission via the 
 * Security.allowDomain() method.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 */
flash.display.Stage.prototype.invalidate = function() {
};


/**
 * Determines whether the Stage.focus property returns null for 
 * security reasons.
 * In other words, isFocusInaccessible returns true if the 
 * object that has focus belongs to a security sandbox to which the SWF file does not have access.
 * @asreturn	true if the object that has focus belongs to a security sandbox to which
 *   the SWF file does not have access.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @return {boolean}
 */
flash.display.Stage.prototype.isFocusInaccessible = function() {
  return false;
};


/**
 * Removes a child DisplayObject from the specified index position in the child list of 
 * the DisplayObjectContainer. The parent property of the removed child is set to 
 * null, and the object is garbage collected if no other references to the child exist. The index  
 * positions of any display objects above the child in the DisplayObjectContainer are decreased by 1.
 * 
 *   The garbage collector reallocates unused memory space. When a variable or
 * object is no longer actively referenced or stored somewhere, the garbage collector sweeps 
 * through and wipes out the memory space it used to occupy if no other references to it exist.
 * @asparam	index	The child index of the DisplayObject to remove.
 * @asreturn	The DisplayObject instance that was removed.
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @throws	SecurityError Calling the removeChildAt() method of a Stage object throws an exception for
 *   any caller that is not in the same security sandbox as the object to be removed. To avoid this, 
 *   the owner of that object can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.removeChildAt = function(i) {
  return flash.display.Stage.superClass_.removeChildAt.apply(this, [ i] );
};


/**
 * Changes the  position of an existing child in the display object container.
 * This affects the layering of child objects. For example, the following example shows three 
 * display objects, labeled a, b, and c, at index positions 0, 1, and 2, respectively:
 * 
 *   When you use the setChildIndex() method and specify an index position
 * that is already occupied, the only positions that change are those in between the display object's former and new position. 
 * All others will stay the same. 
 * If a child is moved to an index LOWER than its current index, all children in between will INCREASE by 1 for their index reference.
 * If a child is moved to an index HIGHER than its current index, all children in between will DECREASE by 1 for their index reference.
 * For example, if the display object container
 * in the previous example is named container, you can swap the position 
 * of the display objects labeled a and b by calling the following code:
 * <codeblock>
 * container.setChildIndex(container.getChildAt(1), 0);
 * </codeblock>
 * This code results in the following arrangement of objects:
 * @asparam	child	The child DisplayObject instance for which you want to change
 *   the index number.
 * @asparam	index	The resulting index number for the child display object.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @playerversion	Lite 4
 * @throws	SecurityError Calling the setChildIndex() method of a Stage object throws an exception for
 *   any caller that is not in the same security sandbox as the Stage owner (the main SWF file).
 *   To avoid this, the Stage owner can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.setChildIndex = function(child, index) {
  flash.display.Stage.superClass_.setChildIndex.apply(this, [ child, index] );
};


/**
 * @override
 */
flash.display.Stage.prototype.swapChildrenAt = function(i1, i2) {
  flash.display.Stage.superClass_.swapChildrenAt.apply(this, [ i1, i2] );
};


/**
 * Checks whether an event listener is registered with this EventDispatcher object or any of 
 * its ancestors for the specified event type. This method returns true if an 
 * event listener is triggered during any phase of the event flow when an event of the 
 * specified type is dispatched to this EventDispatcher object or any of its descendants.
 * 
 *   The difference between the hasEventListener() and the willTrigger() 
 * methods is that hasEventListener() examines only the object to which it belongs, 
 * whereas the willTrigger() method examines the entire event flow for the event specified by the
 * type parameter. When willTrigger() is called from a LoaderInfo object, only the 
 * listeners that the caller can access are considered.
 * @asparam	type	The type of event.
 * @asreturn	A value of true if a listener of the specified type will be triggered; false otherwise.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @throws	SecurityError Calling the willTrigger() method of a Stage object throws an exception for
 *   any caller that is not in the same security sandbox as the Stage owner (the main SWF file).
 *   To avoid this, the Stage owner can grant permission to the domain of the caller by calling 
 *   the Security.allowDomain() method or the Security.allowInsecureDomain() method.
 *   For more information, see the "Security" chapter in the ActionScript 3.0 Developer's Guide.
 * @override
 */
flash.display.Stage.prototype.willTrigger = function(param1) {
  return flash.display.Stage.superClass_.willTrigger.apply(this, [ param1] );
};


/**
 * @private
 * @param {Object} e
 */
flash.display.Stage.prototype.flash_display_Stage_canvas_touchevent = function(e) {
  var /** @type {string} */ flashType = null;
  var /** @type {string} */ flashType2 = null;
  var /** @type {string} */ jsType = org.apache.royale.utils.Language.string(e.type);
  //var /** @type {string} */ flashType = null;
  //var /** @type {string} */ flashType2 = null;
  switch (jsType) {
    case "touchcancel":
      flashType = flash.events.TouchEvent.TOUCH_END;
      flashType2 = flash.events.MouseEvent.MOUSE_UP;
      this.flash_display_Stage_isButtonDown = false;
      break;
    case "touchend":
      flashType = flash.events.TouchEvent.TOUCH_END;
      flashType2 = flash.events.MouseEvent.MOUSE_UP;
      this.flash_display_Stage_isButtonDown = false;
      break;
    case "touchmove":
      flashType = flash.events.TouchEvent.TOUCH_MOVE;
      flashType2 = flash.events.MouseEvent.MOUSE_MOVE;
      break;
    case "touchstart":
      flashType = flash.events.TouchEvent.TOUCH_BEGIN;
      flashType2 = flash.events.MouseEvent.MOUSE_DOWN;
      this.flash_display_Stage_isButtonDown = true;
      e.preventDefault();
      break;
  }
  if (flashType) {
    if (e.targetTouches.length) {
      this.flash_display_Stage__mouseX = e.targetTouches[0].pageX - this.canvas.offsetLeft - (SpriteFlexjs.rootHTMLElement ? SpriteFlexjs.rootHTMLElement.offsetLeft : 0);
      this.flash_display_Stage__mouseY = e.targetTouches[0].pageY - this.canvas.offsetTop - (SpriteFlexjs.rootHTMLElement ? SpriteFlexjs.rootHTMLElement.offsetTop : 0);
    }
    if (this.hasEventListener(flashType)) {
      if (flashType != flash.events.TouchEvent.TOUCH_MOVE) {
        this.dispatchEvent(new flash.events.TouchEvent(flashType, true, false, 0, true, this.flash_display_Stage__mouseX, this.flash_display_Stage__mouseY, null, e.ctrlKey, e.altKey, e.shiftKey, (e.buttons != null) ? (e.buttons > 0) : this.flash_display_Stage_isButtonDown));
      } else {
        this.flash_display_Stage_needSendTouchMove = true;
      }
    }
    if (this.hasEventListener(flashType2)) {
      if (flashType2 != flash.events.MouseEvent.MOUSE_MOVE) {
        this.dispatchEvent(new flash.events.MouseEvent(flashType2, true, false, this.flash_display_Stage__mouseX, this.flash_display_Stage__mouseY, null, e.ctrlKey, e.altKey, e.shiftKey, (e.buttons != null) ? (e.buttons > 0) : this.flash_display_Stage_isButtonDown));
      } else {
        this.flash_display_Stage_updateDragSprite();
        this.flash_display_Stage_needSendMouseMove = e;
      }
    }
    if (flashType === flash.events.TouchEvent.TOUCH_END && this.hasEventListener(flash.events.MouseEvent.CLICK)) {
      this.dispatchEvent(new flash.events.MouseEvent(flash.events.MouseEvent.CLICK, true, false, this.flash_display_Stage__mouseX, this.flash_display_Stage__mouseY, null, e.ctrlKey, e.altKey, e.shiftKey, (e.buttons != null) ? (e.buttons > 0) : this.flash_display_Stage_isButtonDown));
    }
  }
};


/**
 * @private
 * @param {Object} e
 */
flash.display.Stage.prototype.flash_display_Stage_canvas_keyevent = function(e) {
  var /** @type {string} */ flashType = null;
  var /** @type {string} */ jsType = org.apache.royale.utils.Language.string(e.type);
  //var /** @type {string} */ flashType = null;
  switch (jsType) {
    case "keydown":
      flashType = flash.events.KeyboardEvent.KEY_DOWN;
      break;
    case "keyup":
      flashType = flash.events.KeyboardEvent.KEY_UP;
      break;
  }
  if (this.hasEventListener(flashType)) {
    this.dispatchEvent(new flash.events.KeyboardEvent(flashType, true, false, e.charCode, e.keyCode, e.location, e.ctrlKey, e.altKey, e.shiftKey));
  }
};


/**
 * @private
 * @param {Object} e
 */
flash.display.Stage.prototype.flash_display_Stage_canvas_mouseevent = function(e) {
  var /** @type {string} */ flashType = null;
  var /** @type {string} */ jsType = org.apache.royale.utils.Language.string(e.type);
  //var /** @type {string} */ flashType = null;
  switch (jsType) {
    case "click":
      flashType = flash.events.MouseEvent.CLICK;
      break;
    case "contextmenu":
      flashType = flash.events.MouseEvent.CONTEXT_MENU;
      break;
    case "dblclick":
      flashType = flash.events.MouseEvent.DOUBLE_CLICK;
      break;
    case "mousedown":
      flashType = flash.events.MouseEvent.MOUSE_DOWN;
      this.flash_display_Stage_isButtonDown = true;
      break;
    case "mouseenter":
      flashType = flash.events.MouseEvent.ROLL_OVER;
      break;
    case "mouseleave":
      flashType = flash.events.MouseEvent.MOUSE_OUT;
      break;
    case "mousemove":
      flashType = flash.events.MouseEvent.MOUSE_MOVE;
      break;
    case "mouseover":
      flashType = flash.events.MouseEvent.MOUSE_OVER;
      break;
    case "mouseout":
      flashType = flash.events.MouseEvent.MOUSE_OUT;
      break;
    case "mouseup":
      flashType = flash.events.MouseEvent.MOUSE_UP;
      this.flash_display_Stage_isButtonDown = false;
      break;
    case "mousewheel":
      flashType = flash.events.MouseEvent.MOUSE_WHEEL;
      break;
  }
  if (flashType) {
    this.flash_display_Stage__mouseX = e.pageX - this.canvas.offsetLeft - (SpriteFlexjs.rootHTMLElement ? SpriteFlexjs.rootHTMLElement.offsetLeft : 0);
    this.flash_display_Stage__mouseY = e.pageY - this.canvas.offsetTop - (SpriteFlexjs.rootHTMLElement ? SpriteFlexjs.rootHTMLElement.offsetTop : 0);
    if (this.hasEventListener(flashType)) {
      if (flashType != flash.events.MouseEvent.MOUSE_MOVE) {
        this.dispatchEvent(new flash.events.MouseEvent(flashType, true, false, this.flash_display_Stage__mouseX, this.flash_display_Stage__mouseY, null, e.ctrlKey, e.altKey, e.shiftKey, (e.buttons != null) ? (e.buttons > 0) : this.flash_display_Stage_isButtonDown, e.wheelDelta));
      } else {
        this.flash_display_Stage_updateDragSprite();
        this.flash_display_Stage_needSendMouseMove = e;
      }
    }
  }
};


/**
 * @private
 * @type {flash.display.DisplayObject}
 */
flash.display.Stage.prototype.flash_display_Stage_currentDragSprite = null;


/**
 * @private
 * @type {boolean}
 */
flash.display.Stage.prototype.flash_display_Stage_currentDragLockCenter = false;


/**
 * @private
 * @type {flash.geom.Rectangle}
 */
flash.display.Stage.prototype.flash_display_Stage_currentDragBounds = null;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_currentDragSX = NaN;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_currentDragSY = NaN;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_currentDragMX = NaN;


/**
 * @private
 * @type {number}
 */
flash.display.Stage.prototype.flash_display_Stage_currentDragMY = NaN;


/**
 * @param {flash.display.DisplayObject} s
 * @param {boolean=} lockCenter
 * @param {flash.geom.Rectangle=} bounds
 */
flash.display.Stage.prototype.setDragSprite = function(s, lockCenter, bounds) {
  lockCenter = typeof lockCenter !== 'undefined' ? lockCenter : false;
  bounds = typeof bounds !== 'undefined' ? bounds : null;
  this.flash_display_Stage_currentDragSprite = s;
  this.flash_display_Stage_currentDragLockCenter = lockCenter;
  this.flash_display_Stage_currentDragBounds = bounds;
  if (s) {
    this.flash_display_Stage_currentDragSX = s.x;
    this.flash_display_Stage_currentDragSY = s.y;
    this.flash_display_Stage_currentDragMX = this.flash_display_Stage__mouseX;
    this.flash_display_Stage_currentDragMY = this.flash_display_Stage__mouseY;
  }
};


/**
 * @private
 */
flash.display.Stage.prototype.flash_display_Stage_updateDragSprite = function() {
  if (this.flash_display_Stage_currentDragSprite) {
    if (this.flash_display_Stage_currentDragLockCenter) {
      var /** @type {number} */ dx = this.flash_display_Stage__mouseX;
      var /** @type {number} */ dy = this.flash_display_Stage__mouseY;
    } else {
      var /** @type {number} */ dx = this.flash_display_Stage_currentDragSX + this.flash_display_Stage__mouseX - this.flash_display_Stage_currentDragMX;
      var /** @type {number} */ dy = this.flash_display_Stage_currentDragSY + this.flash_display_Stage__mouseY - this.flash_display_Stage_currentDragMY;
    }
    if (this.flash_display_Stage_currentDragBounds) {
      if (dx < this.flash_display_Stage_currentDragBounds.left) {
        dx = this.flash_display_Stage_currentDragBounds.left;
      }
      if (dy < this.flash_display_Stage_currentDragBounds.top) {
        dy = this.flash_display_Stage_currentDragBounds.top;
      }
      if (dx > this.flash_display_Stage_currentDragBounds.right) {
        dx = this.flash_display_Stage_currentDragBounds.right;
      }
      if (dy > this.flash_display_Stage_currentDragBounds.bottom) {
        dy = this.flash_display_Stage_currentDragBounds.bottom;
      }
    }
    this.flash_display_Stage_currentDragSprite.x = dx;
    this.flash_display_Stage_currentDragSprite.y = dy;
  }
};


/**
 * @param {flash.display.DisplayObject} value
 */
flash.display.Stage.prototype.setRoot = function(value) {
  this._root = value;
};


flash.display.Stage.prototype.set__accessibilityImplementation = function(value) {
};


flash.display.Stage.prototype.set__accessibilityProperties = function(value) {
};


flash.display.Stage.prototype.get__align = function() {
  return this.flash_display_Stage__align;
};


flash.display.Stage.prototype.set__align = function(value) {
  this.flash_display_Stage__align = value;
};


flash.display.Stage.prototype.get__allowsFullScreen = function() {
  return this.flash_display_Stage__allowsFullScreen;
};


flash.display.Stage.prototype.get__allowsFullScreenInteractive = function() {
  return this.flash_display_Stage__allowsFullScreenInteractive;
};


flash.display.Stage.prototype.set__alpha = function(value) {
  this.flash_display_Stage__alpha = value;
  flash.display.Stage.superClass_.set__alpha.apply(this, [ value] );
};


flash.display.Stage.prototype.set__blendMode = function(value) {
  this.flash_display_Stage__blendMode = value;
  flash.display.Stage.superClass_.set__blendMode.apply(this, [ value] );
};


flash.display.Stage.prototype.get__browserZoomFactor = function() {
  return this.flash_display_Stage__browserZoomFactor;
};


flash.display.Stage.prototype.set__cacheAsBitmap = function(value) {
  flash.display.Stage.superClass_.set__cacheAsBitmap.apply(this, [ value] );
};


flash.display.Stage.prototype.get__color = function() {
  return this.flash_display_Stage__color;
};


flash.display.Stage.prototype.set__color = function(color) {
  this.flash_display_Stage__color = color;
};


flash.display.Stage.prototype.get__colorCorrection = function() {
  return this.flash_display_Stage__colorCorrection;
};


flash.display.Stage.prototype.set__colorCorrection = function(value) {
  this.flash_display_Stage__colorCorrection = value;
};


flash.display.Stage.prototype.get__colorCorrectionSupport = function() {
  return this.flash_display_Stage__colorCorrectionSupport;
};


flash.display.Stage.prototype.get__contentsScaleFactor = function() {
  return this.flash_display_Stage__contentsScaleFactor;
};


flash.display.Stage.prototype.set__contextMenu = function(value) {
  this.flash_display_Stage__contextMenu = value;
};


flash.display.Stage.prototype.get__displayContextInfo = function() {
  return this.flash_display_Stage__displayContextInfo;
};


flash.display.Stage.prototype.get__displayState = function() {
  return (document["fullscreen"] || document["webkitIsFullScreen"] || document["mozFullScreen"]) ? "fullScreen" : "normal";
};


flash.display.Stage.prototype.set__displayState = function(value) {
  if (value.indexOf("fullScreen") != -1) {
    var /** @type {Function} */ requestFunc = /* implicit cast */ org.apache.royale.utils.Language.as((this.flash_display_Stage__canvas["requestFullscreen"] || this.flash_display_Stage__canvas["webkitRequestFullScreen"] || this.flash_display_Stage__canvas["mozRequestFullScreen"] || this.flash_display_Stage__canvas["msRequestFullscreen"]), Function, true);
    requestFunc.call(this.flash_display_Stage__canvas);
  } else {
    var /** @type {Function} */ cancelFunc = /* implicit cast */ org.apache.royale.utils.Language.as((document["exitFullscreen"] || document["webkitExitFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"]), Function, true);
    cancelFunc.call(document);
  }
};


flash.display.Stage.prototype.set__filters = function(value) {
  this.flash_display_Stage__filters = value;
};


flash.display.Stage.prototype.get__focus = function() {
  return this.flash_display_Stage__focus;
};


flash.display.Stage.prototype.set__focus = function(newFocus) {
  this.flash_display_Stage__focus = newFocus;
};


flash.display.Stage.prototype.set__focusRect = function(value) {
  this.flash_display_Stage__focusRect = value;
};


flash.display.Stage.prototype.get__frameRate = function() {
  return this.flash_display_Stage__frameRate;
};


flash.display.Stage.prototype.set__frameRate = function(value) {
  this.flash_display_Stage__frameRate = (value) >> 0;
};


flash.display.Stage.prototype.get__fullScreenHeight = function() {
  return this.flash_display_Stage__fullScreenHeight;
};


flash.display.Stage.prototype.get__fullScreenSourceRect = function() {
  return this.flash_display_Stage__fullScreenSourceRect;
};


flash.display.Stage.prototype.set__fullScreenSourceRect = function(value) {
  this.flash_display_Stage__fullScreenSourceRect = value;
};


flash.display.Stage.prototype.get__fullScreenWidth = function() {
  return this.flash_display_Stage__fullScreenWidth;
};


flash.display.Stage.prototype.get__height = function() {
  return this.flash_display_Stage__height;
};


flash.display.Stage.prototype.set__height = function(value) {
  this.flash_display_Stage__height = value;
  flash.display.Stage.superClass_.set__height.apply(this, [ this.flash_display_Stage__height] );
};


flash.display.Stage.prototype.set__mask = function(value) {
  this.flash_display_Stage__mask = value;
  flash.display.Stage.superClass_.set__mask.apply(this, [ value] );
};


flash.display.Stage.prototype.get__mouseChildren = function() {
  return flash.display.Stage.superClass_.get__mouseChildren.apply(this);
};


flash.display.Stage.prototype.set__mouseChildren = function(value) {
  this.flash_display_Stage__mouseChildren = value;
  flash.display.Stage.superClass_.set__mouseChildren.apply(this, [ value] );
};


flash.display.Stage.prototype.set__mouseEnabled = function(value) {
  this.flash_display_Stage__mouseEnabled = value;
  flash.display.Stage.superClass_.set__mouseEnabled.apply(this, [ value] );
};


flash.display.Stage.prototype.get__mouseLock = function() {
  return this.flash_display_Stage__mouseLock;
};


flash.display.Stage.prototype.set__mouseLock = function(value) {
  this.flash_display_Stage__mouseLock = value;
};


flash.display.Stage.prototype.get__mouseX = function() {
  return this.flash_display_Stage__mouseX;
};


flash.display.Stage.prototype.get__mouseY = function() {
  return this.flash_display_Stage__mouseY;
};


flash.display.Stage.prototype.set__name = function(value) {
  this.flash_display_Stage__name = value;
  flash.display.Stage.superClass_.set__name.apply(this, [ value] );
};


flash.display.Stage.prototype.get__numChildren = function() {
  return flash.display.Stage.superClass_.get__numChildren.apply(this);
};


flash.display.Stage.prototype.set__opaqueBackground = function(value) {
  this.flash_display_Stage__opaqueBackground = value;
  flash.display.Stage.superClass_.set__opaqueBackground.apply(this, [ value] );
};


flash.display.Stage.prototype.get__quality = function() {
  return this.flash_display_Stage__quality;
};


flash.display.Stage.prototype.set__quality = function(value) {
  this.flash_display_Stage__quality = value;
};


flash.display.Stage.prototype.set__rotation = function(value) {
  this.flash_display_Stage__rotation = value;
  flash.display.Stage.superClass_.set__rotation.apply(this, [ value] );
};


flash.display.Stage.prototype.set__rotationX = function(value) {
  this.flash_display_Stage__rotationX = value;
  flash.display.Stage.superClass_.set__rotationX.apply(this, [ value] );
};


flash.display.Stage.prototype.set__rotationY = function(value) {
  this.flash_display_Stage__rotationY = value;
  flash.display.Stage.superClass_.set__rotationY.apply(this, [ value] );
};


flash.display.Stage.prototype.set__rotationZ = function(value) {
  this.flash_display_Stage__rotationZ = value;
  flash.display.Stage.superClass_.set__rotationZ.apply(this, [ value] );
};


flash.display.Stage.prototype.set__scale9Grid = function(value) {
  this.flash_display_Stage__scale9Grid = value;
  flash.display.Stage.superClass_.set__scale9Grid.apply(this, [ value] );
};


flash.display.Stage.prototype.get__scaleMode = function() {
  return this.flash_display_Stage__scaleMode;
};


flash.display.Stage.prototype.set__scaleMode = function(value) {
  this.flash_display_Stage__scaleMode = value;
};


flash.display.Stage.prototype.set__scaleX = function(value) {
  this.flash_display_Stage__scaleX = value;
  flash.display.Stage.superClass_.set__scaleX.apply(this, [ value] );
};


flash.display.Stage.prototype.set__scaleY = function(value) {
  this.flash_display_Stage__scaleY = value;
  flash.display.Stage.superClass_.set__scaleY.apply(this, [ value] );
};


flash.display.Stage.prototype.set__scaleZ = function(value) {
  this.flash_display_Stage__scaleZ = value;
  flash.display.Stage.superClass_.set__scaleZ.apply(this, [ value] );
};


flash.display.Stage.prototype.set__scrollRect = function(value) {
  this.flash_display_Stage__scrollRect = value;
  flash.display.Stage.superClass_.set__scrollRect.apply(this, [ value] );
};


flash.display.Stage.prototype.get__showDefaultContextMenu = function() {
  return this.flash_display_Stage__showDefaultContextMenu;
};


flash.display.Stage.prototype.set__showDefaultContextMenu = function(value) {
  this.flash_display_Stage__showDefaultContextMenu = value;
};


flash.display.Stage.prototype.get__softKeyboardRect = function() {
  return this.flash_display_Stage__softKeyboardRect;
};


flash.display.Stage.prototype.get__stage3Ds = function() {
  return this.flash_display_Stage__stage3Ds;
};


flash.display.Stage.prototype.get__stageFocusRect = function() {
  return this.flash_display_Stage__stageFocusRec;
};


flash.display.Stage.prototype.set__stageFocusRect = function(on) {
  this.flash_display_Stage__stageFocusRec = on;
};


flash.display.Stage.prototype.get__stageHeight = function() {
  if (SpriteFlexjs.autoSize)
    this.flash_display_Stage__stageHeight = (window.innerHeight) >> 0;
  return this.flash_display_Stage__stageHeight;
};


flash.display.Stage.prototype.set__stageHeight = function(value) {
  this.flash_display_Stage__stageHeight = value;
};


flash.display.Stage.prototype.get__stageWidth = function() {
  if (SpriteFlexjs.autoSize)
    this.flash_display_Stage__stageWidth = (window.innerWidth) >> 0;
  return this.flash_display_Stage__stageWidth;
};


flash.display.Stage.prototype.set__stageWidth = function(value) {
  this.flash_display_Stage__stageWidth = value;
};


flash.display.Stage.prototype.get__tabChildren = function() {
  return flash.display.Stage.superClass_.get__tabChildren.apply(this);
};


flash.display.Stage.prototype.set__tabChildren = function(value) {
  this.flash_display_Stage__tabChildren = value;
  flash.display.Stage.superClass_.set__tabChildren.apply(this, [ value] );
};


flash.display.Stage.prototype.set__tabEnabled = function(value) {
  this.flash_display_Stage__tabEnabled = value;
  flash.display.Stage.superClass_.set__tabEnabled.apply(this, [ value] );
};


flash.display.Stage.prototype.set__tabIndex = function(value) {
  this.flash_display_Stage__tabIndex = value;
  flash.display.Stage.superClass_.set__tabIndex.apply(this, [ value] );
};


flash.display.Stage.prototype.get__textSnapshot = function() {
  return this.flash_display_Stage__textSnapshot;
};


flash.display.Stage.prototype.set__visible = function(value) {
  this.flash_display_Stage__visible = value;
  flash.display.Stage.superClass_.set__visible.apply(this, [ value] );
};


flash.display.Stage.prototype.get__width = function() {
  return flash.display.Stage.superClass_.get__width.apply(this);
};


flash.display.Stage.prototype.set__width = function(value) {
  this.flash_display_Stage__width = value;
  flash.display.Stage.superClass_.set__width.apply(this, [ value] );
};


flash.display.Stage.prototype.get__wmodeGPU = function() {
  return this.flash_display_Stage__wmodeGPU;
};


flash.display.Stage.prototype.set__x = function(value) {
  this.flash_display_Stage__x = value;
  flash.display.Stage.superClass_.set__x.apply(this, [ value] );
};


flash.display.Stage.prototype.set__y = function(value) {
  this.flash_display_Stage__y = value;
  flash.display.Stage.superClass_.set__y.apply(this, [ value] );
};


flash.display.Stage.prototype.set__z = function(value) {
  this.flash_display_Stage__z = value;
  flash.display.Stage.superClass_.set__z.apply(this, [ value] );
};


flash.display.Stage.prototype.get__canvas = function() {
  if (!this.flash_display_Stage__canvas) {
    this.flash_display_Stage__canvas = document.getElementById("spriteflexjsstage");
    if (this.flash_display_Stage__canvas == null) {
      this.flash_display_Stage__canvas = document.createElement("canvas");
      this.flash_display_Stage__canvas.style.position = "absolute";
      this.flash_display_Stage__canvas.style.left = "0px";
      this.flash_display_Stage__canvas.style.top = "0px";
      this.__rootHtmlElement.appendChild(this.flash_display_Stage__canvas);
    }
    this.flash_display_Stage__canvas.addEventListener("click", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("contextmenu", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("dblclick", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mousedown", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mouseenter", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mouseleave", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mousemove", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mouseover", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mouseout", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mouseup", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("mousewheel", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_mouseevent, this, 'flash_display_Stage_canvas_mouseevent'), false);
    this.flash_display_Stage__canvas.addEventListener("touchcancel", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_touchevent, this, 'flash_display_Stage_canvas_touchevent'), false);
    this.flash_display_Stage__canvas.addEventListener("touchend", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_touchevent, this, 'flash_display_Stage_canvas_touchevent'), false);
    this.flash_display_Stage__canvas.addEventListener("touchmove", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_touchevent, this, 'flash_display_Stage_canvas_touchevent'), false);
    this.flash_display_Stage__canvas.addEventListener("touchstart", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_touchevent, this, 'flash_display_Stage_canvas_touchevent'), false);
    document.addEventListener("keydown", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_keyevent, this, 'flash_display_Stage_canvas_keyevent'), false);
    document.addEventListener("keyup", org.apache.royale.utils.Language.closure(this.flash_display_Stage_canvas_keyevent, this, 'flash_display_Stage_canvas_keyevent'), false);
  }
  return this.flash_display_Stage__canvas;
};


flash.display.Stage.prototype.get__ctx = function() {
  if (!this.flash_display_Stage__ctx) {
    if (SpriteFlexjs.wmode === "gpu") {
      this.flash_display_Stage__ctx = new flash.__native.GLCanvasRenderingContext2D(this);
      SpriteFlexjs.renderer = new flash.__native.WebGLRenderer();
    } else if (SpriteFlexjs.wmode === "gpu batch") {
      this.flash_display_Stage__ctx = new flash.__native.GLCanvasRenderingContext2D(this, true);
      SpriteFlexjs.renderer = new flash.__native.WebGLRenderer();
    } else {
      this.flash_display_Stage__ctx = this.canvas.getContext("2d");
      SpriteFlexjs.renderer = new flash.__native.BaseRenderer();
    }
  }
  return this.flash_display_Stage__ctx;
};


flash.display.Stage.prototype.get__ctx2d = function() {
  if (!this.flash_display_Stage__ctx2d) {
    var /** @type {HTMLCanvasElement} */ can = document.createElement("canvas");
    this.flash_display_Stage__ctx2d = can.getContext("2d");
  }
  return this.flash_display_Stage__ctx2d;
};


Object.defineProperties(flash.display.Stage.prototype, /** @lends {flash.display.Stage.prototype} */ {
/**
 * @type {flash.accessibility.AccessibilityImplementation}
 */
accessibilityImplementation: {
set: flash.display.Stage.prototype.set__accessibilityImplementation},
/**
 * @type {flash.accessibility.AccessibilityProperties}
 */
accessibilityProperties: {
set: flash.display.Stage.prototype.set__accessibilityProperties},
/**
 * @type {string}
 */
align: {
get: flash.display.Stage.prototype.get__align,
set: flash.display.Stage.prototype.set__align},
/**
 * @type {boolean}
 */
allowsFullScreen: {
get: flash.display.Stage.prototype.get__allowsFullScreen},
/**
 * @type {boolean}
 */
allowsFullScreenInteractive: {
get: flash.display.Stage.prototype.get__allowsFullScreenInteractive},
/**
 * @type {number}
 */
alpha: {
get: flash.display.DisplayObject.prototype.get__alpha,
set: flash.display.Stage.prototype.set__alpha},
/**
 * @type {string}
 */
blendMode: {
get: flash.display.DisplayObject.prototype.get__blendMode,
set: flash.display.Stage.prototype.set__blendMode},
/**
 * @type {number}
 */
browserZoomFactor: {
get: flash.display.Stage.prototype.get__browserZoomFactor},
/**
 * @type {boolean}
 */
cacheAsBitmap: {
get: flash.display.DisplayObject.prototype.get__cacheAsBitmap,
set: flash.display.Stage.prototype.set__cacheAsBitmap},
/**
 * @type {number}
 */
color: {
get: flash.display.Stage.prototype.get__color,
set: flash.display.Stage.prototype.set__color},
/**
 * @type {string}
 */
colorCorrection: {
get: flash.display.Stage.prototype.get__colorCorrection,
set: flash.display.Stage.prototype.set__colorCorrection},
/**
 * @type {string}
 */
colorCorrectionSupport: {
get: flash.display.Stage.prototype.get__colorCorrectionSupport},
/**
 * @type {number}
 */
contentsScaleFactor: {
get: flash.display.Stage.prototype.get__contentsScaleFactor},
/**
 * @type {flash.ui.ContextMenu}
 */
contextMenu: {
set: flash.display.Stage.prototype.set__contextMenu},
/**
 * @type {string}
 */
displayContextInfo: {
get: flash.display.Stage.prototype.get__displayContextInfo},
/**
 * @type {string}
 */
displayState: {
get: flash.display.Stage.prototype.get__displayState,
set: flash.display.Stage.prototype.set__displayState},
/**
 * @type {Array}
 */
filters: {
get: flash.display.DisplayObject.prototype.get__filters,
set: flash.display.Stage.prototype.set__filters},
/**
 * @type {flash.display.InteractiveObject}
 */
focus: {
get: flash.display.Stage.prototype.get__focus,
set: flash.display.Stage.prototype.set__focus},
/**
 * @type {Object}
 */
focusRect: {
get: flash.display.InteractiveObject.prototype.get__focusRect,
set: flash.display.Stage.prototype.set__focusRect},
/**
 * @type {number}
 */
frameRate: {
get: flash.display.Stage.prototype.get__frameRate,
set: flash.display.Stage.prototype.set__frameRate},
/**
 * @type {number}
 */
fullScreenHeight: {
get: flash.display.Stage.prototype.get__fullScreenHeight},
/**
 * @type {flash.geom.Rectangle}
 */
fullScreenSourceRect: {
get: flash.display.Stage.prototype.get__fullScreenSourceRect,
set: flash.display.Stage.prototype.set__fullScreenSourceRect},
/**
 * @type {number}
 */
fullScreenWidth: {
get: flash.display.Stage.prototype.get__fullScreenWidth},
/**
 * @type {number}
 */
height: {
get: flash.display.Stage.prototype.get__height,
set: flash.display.Stage.prototype.set__height},
/**
 * @type {flash.display.DisplayObject}
 */
mask: {
get: flash.display.DisplayObject.prototype.get__mask,
set: flash.display.Stage.prototype.set__mask},
/**
 * @type {boolean}
 */
mouseChildren: {
get: flash.display.Stage.prototype.get__mouseChildren,
set: flash.display.Stage.prototype.set__mouseChildren},
/**
 * @type {boolean}
 */
mouseEnabled: {
get: flash.display.InteractiveObject.prototype.get__mouseEnabled,
set: flash.display.Stage.prototype.set__mouseEnabled},
/**
 * @type {boolean}
 */
mouseLock: {
get: flash.display.Stage.prototype.get__mouseLock,
set: flash.display.Stage.prototype.set__mouseLock},
/**
 * @type {number}
 */
mouseX: {
get: flash.display.Stage.prototype.get__mouseX},
/**
 * @type {number}
 */
mouseY: {
get: flash.display.Stage.prototype.get__mouseY},
/**
 * @type {string}
 */
name: {
get: flash.display.DisplayObject.prototype.get__name,
set: flash.display.Stage.prototype.set__name},
/**
 * @type {number}
 */
numChildren: {
get: flash.display.Stage.prototype.get__numChildren},
/**
 * @type {Object}
 */
opaqueBackground: {
get: flash.display.DisplayObject.prototype.get__opaqueBackground,
set: flash.display.Stage.prototype.set__opaqueBackground},
/**
 * @type {string}
 */
quality: {
get: flash.display.Stage.prototype.get__quality,
set: flash.display.Stage.prototype.set__quality},
/**
 * @type {number}
 */
rotation: {
get: flash.display.DisplayObject.prototype.get__rotation,
set: flash.display.Stage.prototype.set__rotation},
/**
 * @type {number}
 */
rotationX: {
get: flash.display.DisplayObject.prototype.get__rotationX,
set: flash.display.Stage.prototype.set__rotationX},
/**
 * @type {number}
 */
rotationY: {
get: flash.display.DisplayObject.prototype.get__rotationY,
set: flash.display.Stage.prototype.set__rotationY},
/**
 * @type {number}
 */
rotationZ: {
get: flash.display.DisplayObject.prototype.get__rotationZ,
set: flash.display.Stage.prototype.set__rotationZ},
/**
 * @type {flash.geom.Rectangle}
 */
scale9Grid: {
get: flash.display.DisplayObject.prototype.get__scale9Grid,
set: flash.display.Stage.prototype.set__scale9Grid},
/**
 * @type {string}
 */
scaleMode: {
get: flash.display.Stage.prototype.get__scaleMode,
set: flash.display.Stage.prototype.set__scaleMode},
/**
 * @type {number}
 */
scaleX: {
get: flash.display.DisplayObject.prototype.get__scaleX,
set: flash.display.Stage.prototype.set__scaleX},
/**
 * @type {number}
 */
scaleY: {
get: flash.display.DisplayObject.prototype.get__scaleY,
set: flash.display.Stage.prototype.set__scaleY},
/**
 * @type {number}
 */
scaleZ: {
get: flash.display.DisplayObject.prototype.get__scaleZ,
set: flash.display.Stage.prototype.set__scaleZ},
/**
 * @type {flash.geom.Rectangle}
 */
scrollRect: {
get: flash.display.DisplayObject.prototype.get__scrollRect,
set: flash.display.Stage.prototype.set__scrollRect},
/**
 * @type {boolean}
 */
showDefaultContextMenu: {
get: flash.display.Stage.prototype.get__showDefaultContextMenu,
set: flash.display.Stage.prototype.set__showDefaultContextMenu},
/**
 * @type {flash.geom.Rectangle}
 */
softKeyboardRect: {
get: flash.display.Stage.prototype.get__softKeyboardRect},
/**
 * @type {Array.<Stage3D>}
 */
stage3Ds: {
get: flash.display.Stage.prototype.get__stage3Ds},
/**
 * @type {boolean}
 */
stageFocusRect: {
get: flash.display.Stage.prototype.get__stageFocusRect,
set: flash.display.Stage.prototype.set__stageFocusRect},
/**
 * @type {number}
 */
stageHeight: {
get: flash.display.Stage.prototype.get__stageHeight,
set: flash.display.Stage.prototype.set__stageHeight},
/**
 * @type {number}
 */
stageWidth: {
get: flash.display.Stage.prototype.get__stageWidth,
set: flash.display.Stage.prototype.set__stageWidth},
/**
 * @type {boolean}
 */
tabChildren: {
get: flash.display.Stage.prototype.get__tabChildren,
set: flash.display.Stage.prototype.set__tabChildren},
/**
 * @type {boolean}
 */
tabEnabled: {
get: flash.display.InteractiveObject.prototype.get__tabEnabled,
set: flash.display.Stage.prototype.set__tabEnabled},
/**
 * @type {number}
 */
tabIndex: {
get: flash.display.InteractiveObject.prototype.get__tabIndex,
set: flash.display.Stage.prototype.set__tabIndex},
/**
 * @type {flash.text.TextSnapshot}
 */
textSnapshot: {
get: flash.display.Stage.prototype.get__textSnapshot},
/**
 * @type {boolean}
 */
visible: {
get: flash.display.DisplayObject.prototype.get__visible,
set: flash.display.Stage.prototype.set__visible},
/**
 * @type {number}
 */
width: {
get: flash.display.Stage.prototype.get__width,
set: flash.display.Stage.prototype.set__width},
/**
 * @type {boolean}
 */
wmodeGPU: {
get: flash.display.Stage.prototype.get__wmodeGPU},
/**
 * @type {number}
 */
x: {
get: flash.display.DisplayObject.prototype.get__x,
set: flash.display.Stage.prototype.set__x},
/**
 * @type {number}
 */
y: {
get: flash.display.DisplayObject.prototype.get__y,
set: flash.display.Stage.prototype.set__y},
/**
 * @type {number}
 */
z: {
get: flash.display.DisplayObject.prototype.get__z,
set: flash.display.Stage.prototype.set__z},
/**
 * @type {HTMLCanvasElement}
 */
canvas: {
get: flash.display.Stage.prototype.get__canvas},
/**
 * @type {CanvasRenderingContext2D}
 */
ctx: {
get: flash.display.Stage.prototype.get__ctx},
/**
 * @type {CanvasRenderingContext2D}
 */
ctx2d: {
get: flash.display.Stage.prototype.get__ctx2d}}
);


/**
 * @nocollapse
 * @export
 * @type {flash.display.Stage}
 */
flash.display.Stage.instance;


flash.display.Stage.get__instance = function() {
  if (!flash.display.Stage._instance) {
    flash.display.Stage._instantiate = true;
    flash.display.Stage._instance = new flash.display.Stage();
    flash.display.Stage._instantiate = false;
  }
  return flash.display.Stage._instance;
};


Object.defineProperties(flash.display.Stage, /** @lends {flash.display.Stage} */ {
/**
 * @type {flash.display.Stage}
 */
instance: {
get: flash.display.Stage.get__instance}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display.Stage.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Stage', qName: 'flash.display.Stage', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display.Stage.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        '__rootHtmlElement': { type: 'Element', get_set: function (/** flash.display.Stage */ inst, /** * */ v) {return v !== undefined ? inst.__rootHtmlElement = v : inst.__rootHtmlElement;}},
        '__htmlWrapper': { type: 'Element', get_set: function (/** flash.display.Stage */ inst, /** * */ v) {return v !== undefined ? inst.__htmlWrapper = v : inst.__htmlWrapper;}},
        '__enterframeSprites': { type: 'Array', get_set: function (/** flash.display.Stage */ inst, /** * */ v) {return v !== undefined ? inst.__enterframeSprites = v : inst.__enterframeSprites;}}
      };
    },
    accessors: function () {
      return {
        '|instance': { type: 'flash.display.Stage', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'accessibilityImplementation': { type: 'flash.accessibility.AccessibilityImplementation', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'accessibilityProperties': { type: 'flash.accessibility.AccessibilityProperties', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'align': { type: 'String', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'allowsFullScreen': { type: 'Boolean', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'allowsFullScreenInteractive': { type: 'Boolean', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'alpha': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'blendMode': { type: 'String', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'browserZoomFactor': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'cacheAsBitmap': { type: 'Boolean', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'color': { type: 'uint', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'colorCorrection': { type: 'String', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'colorCorrectionSupport': { type: 'String', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'contentsScaleFactor': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'contextMenu': { type: 'flash.ui.ContextMenu', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'displayContextInfo': { type: 'String', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'displayState': { type: 'String', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'filters': { type: 'Array', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'focus': { type: 'flash.display.InteractiveObject', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'focusRect': { type: 'Object', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'frameRate': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'fullScreenHeight': { type: 'uint', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'fullScreenSourceRect': { type: 'flash.geom.Rectangle', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'fullScreenWidth': { type: 'uint', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'height': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'mask': { type: 'flash.display.DisplayObject', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'mouseChildren': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'mouseEnabled': { type: 'Boolean', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'mouseLock': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'mouseX': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'mouseY': { type: 'Number', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'name': { type: 'String', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'numChildren': { type: 'int', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'opaqueBackground': { type: 'Object', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'quality': { type: 'String', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'rotation': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'rotationX': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'rotationY': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'rotationZ': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'scale9Grid': { type: 'flash.geom.Rectangle', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'scaleMode': { type: 'String', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'scaleX': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'scaleY': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'scaleZ': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'scrollRect': { type: 'flash.geom.Rectangle', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'showDefaultContextMenu': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'softKeyboardRect': { type: 'flash.geom.Rectangle', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'stage3Ds': { type: 'Vector.<flash.display.Stage3D>', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'stageFocusRect': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'stageHeight': { type: 'int', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'stageWidth': { type: 'int', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'tabChildren': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'tabEnabled': { type: 'Boolean', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'tabIndex': { type: 'int', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'textSnapshot': { type: 'flash.text.TextSnapshot', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'visible': { type: 'Boolean', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'width': { type: 'Number', access: 'readwrite', declaredBy: 'flash.display.Stage'},
        'wmodeGPU': { type: 'Boolean', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'x': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'y': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'z': { type: 'Number', access: 'writeonly', declaredBy: 'flash.display.Stage'},
        'canvas': { type: 'HTMLCanvasElement', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'ctx': { type: 'CanvasRenderingContext2D', access: 'readonly', declaredBy: 'flash.display.Stage'},
        'ctx2d': { type: 'CanvasRenderingContext2D', access: 'readonly', declaredBy: 'flash.display.Stage'}
      };
    },
    methods: function () {
      return {
        'Stage': { type: '', declaredBy: 'flash.display.Stage'},
        'addChild': { type: 'flash.display.DisplayObject', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }},
        'addChildAt': { type: 'flash.display.DisplayObject', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'flash.display.DisplayObject', false ,'int', false ]; }},
        'addEventListener': { type: 'void', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ,'int', true ,'Boolean', true ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'flash.events.Event', false ]; }},
        'hasEventListener': { type: 'Boolean', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'String', false ]; }},
        'invalidate': { type: 'void', declaredBy: 'flash.display.Stage'},
        'isFocusInaccessible': { type: 'Boolean', declaredBy: 'flash.display.Stage'},
        'removeChildAt': { type: 'flash.display.DisplayObject', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'int', false ]; }},
        'setChildIndex': { type: 'void', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'flash.display.DisplayObject', false ,'int', false ]; }},
        'swapChildrenAt': { type: 'void', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'willTrigger': { type: 'Boolean', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'String', false ]; }},
        'setDragSprite': { type: 'void', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'flash.display.DisplayObject', false ,'Boolean', true ,'flash.geom.Rectangle', true ]; }},
        'setRoot': { type: 'void', declaredBy: 'flash.display.Stage', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.display.Stage.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
flash.display.Stage.prototype.ROYALE_INITIAL_STATICS = Object.keys(flash.display.Stage);
