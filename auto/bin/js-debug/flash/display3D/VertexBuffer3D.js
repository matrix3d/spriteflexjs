/**
 * Generated by Apache Royale Compiler from flash/display3D/VertexBuffer3D.as
 * flash.display3D.VertexBuffer3D
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display3D.VertexBuffer3D');
/* Royale Dependency List: flash.utils.ByteArray*/




/**
 * @constructor
 */
flash.display3D.VertexBuffer3D = function() {
  ;
};


/**
 * @type {WebGLBuffer}
 */
flash.display3D.VertexBuffer3D.prototype.buff = null;


/**
 * @type {WebGLRenderingContext}
 */
flash.display3D.VertexBuffer3D.prototype.gl = null;


/**
 * @type {number}
 */
flash.display3D.VertexBuffer3D.prototype.data32PerVertex = 0;


/**
 * @type {boolean}
 */
flash.display3D.VertexBuffer3D.prototype.dirty = true;


/**
 * @royaleignorecoercion Object
 * @param {Array.<number>} data
 * @param {number} startVertex
 * @param {number} numVertices
 */
flash.display3D.VertexBuffer3D.prototype.uploadFromVector = function(data, startVertex, numVertices) {
  this.dirty = true;
  this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buff);
  this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(data), this.gl.STATIC_DRAW);
};


/**
 * @param {flash.utils.ByteArray} data
 * @param {number} byteArrayOffset
 * @param {number} startVertex
 * @param {number} numVertices
 */
flash.display3D.VertexBuffer3D.prototype.uploadFromByteArray = function(data, byteArrayOffset, startVertex, numVertices) {
};


/**
 */
flash.display3D.VertexBuffer3D.prototype.dispose = function() {
  this.gl.deleteBuffer(this.buff);
  this.buff = null;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display3D.VertexBuffer3D.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'VertexBuffer3D', qName: 'flash.display3D.VertexBuffer3D', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display3D.VertexBuffer3D.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'buff': { type: 'WebGLBuffer', get_set: function (/** flash.display3D.VertexBuffer3D */ inst, /** * */ v) {return v !== undefined ? inst.buff = v : inst.buff;}},
        'gl': { type: 'WebGLRenderingContext', get_set: function (/** flash.display3D.VertexBuffer3D */ inst, /** * */ v) {return v !== undefined ? inst.gl = v : inst.gl;}},
        'data32PerVertex': { type: 'int', get_set: function (/** flash.display3D.VertexBuffer3D */ inst, /** * */ v) {return v !== undefined ? inst.data32PerVertex = v : inst.data32PerVertex;}},
        'dirty': { type: 'Boolean', get_set: function (/** flash.display3D.VertexBuffer3D */ inst, /** * */ v) {return v !== undefined ? inst.dirty = v : inst.dirty;}}
      };
    },
    methods: function () {
      return {
        'VertexBuffer3D': { type: '', declaredBy: 'flash.display3D.VertexBuffer3D'},
        'uploadFromVector': { type: 'void', declaredBy: 'flash.display3D.VertexBuffer3D', parameters: function () { return [ 'Vector.<Number>', false ,'int', false ,'int', false ]; }},
        'uploadFromByteArray': { type: 'void', declaredBy: 'flash.display3D.VertexBuffer3D', parameters: function () { return [ 'flash.utils.ByteArray', false ,'int', false ,'int', false ,'int', false ]; }},
        'dispose': { type: 'void', declaredBy: 'flash.display3D.VertexBuffer3D'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.display3D.VertexBuffer3D.prototype.ROYALE_COMPILE_FLAGS = 9;
