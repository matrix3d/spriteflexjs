/**
 * Generated by Apache Royale Compiler from flash/display3D/textures/Texture.as
 * flash.display3D.textures.Texture
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.display3D.textures.Texture');
/* Royale Dependency List: flash.display.BitmapData,flash.utils.ByteArray*/

goog.require('flash.display3D.textures.TextureBase');



/**
 * @constructor
 * @extends {flash.display3D.textures.TextureBase}
 */
flash.display3D.textures.Texture = function() {
  flash.display3D.textures.Texture.base(this, 'constructor');
};
goog.inherits(flash.display3D.textures.Texture, flash.display3D.textures.TextureBase);


/**
 * @type {WebGLRenderingContext}
 */
flash.display3D.textures.Texture.prototype.gl = null;


/**
 * @type {WebGLTexture}
 */
flash.display3D.textures.Texture.prototype.texture = null;


/**
 * @type {boolean}
 */
flash.display3D.textures.Texture.prototype.repeat = true;


/**
 * @type {boolean}
 */
flash.display3D.textures.Texture.prototype.up = false;


/**
 * @param {flash.display.BitmapData} bitmapData
 * @param {number=} maplevel
 */
flash.display3D.textures.Texture.prototype.uploadFromBitmapData = function(bitmapData, maplevel) {
  maplevel = typeof maplevel !== 'undefined' ? maplevel : 0;
  this.uploadFromImg(bitmapData.image, maplevel);
};


/**
 * @param {Object} img
 * @param {number=} maplevel
 */
flash.display3D.textures.Texture.prototype.uploadFromImg = function(img, maplevel) {
  maplevel = typeof maplevel !== 'undefined' ? maplevel : 0;
  this.up = true;
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
  this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, img);
  if (this.repeat) {
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.REPEAT);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.REPEAT);
  } else {
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
  }
  if (maplevel > 0) {
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);
    this.gl.generateMipmap(this.gl.TEXTURE_2D);
  } else {
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
  }
  this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
  this.gl.bindTexture(this.gl.TEXTURE_2D, null);
};


/**
 * @param {flash.utils.ByteArray} param1
 * @param {number} param2
 * @param {number=} param3
 */
flash.display3D.textures.Texture.prototype.uploadFromByteArray = function(param1, param2, param3) {
  param3 = typeof param3 !== 'undefined' ? param3 : 0;
};


/**
 * @param {flash.utils.ByteArray} param1
 * @param {number} param2
 * @param {boolean=} param3
 */
flash.display3D.textures.Texture.prototype.uploadCompressedTextureFromByteArray = function(param1, param2, param3) {
  param3 = typeof param3 !== 'undefined' ? param3 : false;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.display3D.textures.Texture.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Texture', qName: 'flash.display3D.textures.Texture', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.display3D.textures.Texture.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'gl': { type: 'WebGLRenderingContext', get_set: function (/** flash.display3D.textures.Texture */ inst, /** * */ v) {return v !== undefined ? inst.gl = v : inst.gl;}},
        'texture': { type: 'WebGLTexture', get_set: function (/** flash.display3D.textures.Texture */ inst, /** * */ v) {return v !== undefined ? inst.texture = v : inst.texture;}},
        'repeat': { type: 'Boolean', get_set: function (/** flash.display3D.textures.Texture */ inst, /** * */ v) {return v !== undefined ? inst.repeat = v : inst.repeat;}},
        'up': { type: 'Boolean', get_set: function (/** flash.display3D.textures.Texture */ inst, /** * */ v) {return v !== undefined ? inst.up = v : inst.up;}}
      };
    },
    methods: function () {
      return {
        'Texture': { type: '', declaredBy: 'flash.display3D.textures.Texture'},
        'uploadFromBitmapData': { type: 'void', declaredBy: 'flash.display3D.textures.Texture', parameters: function () { return [ 'flash.display.BitmapData', false ,'uint', true ]; }},
        'uploadFromImg': { type: 'void', declaredBy: 'flash.display3D.textures.Texture', parameters: function () { return [ 'Object', false ,'uint', true ]; }},
        'uploadFromByteArray': { type: 'void', declaredBy: 'flash.display3D.textures.Texture', parameters: function () { return [ 'flash.utils.ByteArray', false ,'uint', false ,'uint', true ]; }},
        'uploadCompressedTextureFromByteArray': { type: 'void', declaredBy: 'flash.display3D.textures.Texture', parameters: function () { return [ 'flash.utils.ByteArray', false ,'uint', false ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.display3D.textures.Texture.prototype.ROYALE_COMPILE_FLAGS = 9;
