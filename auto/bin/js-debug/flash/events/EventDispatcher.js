/**
 * Generated by Apache Royale Compiler from flash/events/EventDispatcher.as
 * flash.events.EventDispatcher
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.events.EventDispatcher');
/* Royale Dependency List: flash.events.Event,org.apache.royale.utils.Language*/

goog.require('flash.events.IEventDispatcher');



/**
 * @constructor
 * @implements {flash.events.IEventDispatcher}
 * @param {flash.events.IEventDispatcher=} target
 */
flash.events.EventDispatcher = function(target) {
  target = typeof target !== 'undefined' ? target : null;
  ;
  this.flash_events_EventDispatcher_ctor(target);
};


/**
 * @private
 * @type {Object}
 */
flash.events.EventDispatcher.prototype.flash_events_EventDispatcher_listeners = null;


/**
 * @private
 * @param {string} headerValue
 * @return {string}
 */
flash.events.EventDispatcher.trimHeaderValue = function(headerValue) {
  var /** @type {string} */ currChar = null;
  var /** @type {number} */ indexOfFirstValueChar = 0;
  var /** @type {number} */ headerValueLen = (headerValue.length) >>> 0;
  var /** @type {boolean} */ done = false;
  while (indexOfFirstValueChar < headerValueLen && !done) {
    currChar = headerValue.charAt(indexOfFirstValueChar);
    done = currChar != " " && currChar != "\t";
    if (!done) {
      indexOfFirstValueChar++;
    }
  }
  var /** @type {number} */ indexOfLastValueChar = headerValueLen;
  done = false;
  while (indexOfLastValueChar > indexOfFirstValueChar && !done) {
    currChar = headerValue.charAt(indexOfLastValueChar - 1);
    done = currChar != " " && currChar != "\t";
    if (!done) {
      indexOfLastValueChar--;
    }
  }
  return headerValue.substring(indexOfFirstValueChar, indexOfLastValueChar);
};


/**
 * @private
 * @param {flash.events.IEventDispatcher} param1
 */
flash.events.EventDispatcher.prototype.flash_events_EventDispatcher_ctor = function(param1) {
};


/**
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 * @param {number=} priority
 * @param {boolean=} useWeakReference
 */
flash.events.EventDispatcher.prototype.addEventListener = function(type, listener, useCapture, priority, useWeakReference) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  priority = typeof priority !== 'undefined' ? priority : 0;
  useWeakReference = typeof useWeakReference !== 'undefined' ? useWeakReference : false;
  this.flash_events_EventDispatcher_listeners = this.flash_events_EventDispatcher_listeners || {};
  var /** @type {Array} */ funcs = /* implicit cast */ org.apache.royale.utils.Language.as(this.flash_events_EventDispatcher_listeners[type] = this.flash_events_EventDispatcher_listeners[type] || [], Array, true);
  var /** @type {Object} */ i = funcs.indexOf(listener);
  if (i != -1) {
    funcs.splice(i, 1);
  }
  funcs.push(listener);
};


/**
 * @param {string} type
 * @param {Function} listener
 * @param {boolean=} useCapture
 */
flash.events.EventDispatcher.prototype.removeEventListener = function(type, listener, useCapture) {
  useCapture = typeof useCapture !== 'undefined' ? useCapture : false;
  if (this.flash_events_EventDispatcher_listeners == null) {
    return;
  }
  var /** @type {Array} */ funcs = /* implicit cast */ org.apache.royale.utils.Language.as(this.flash_events_EventDispatcher_listeners[type], Array, true);
  if (funcs) {
    var /** @type {Object} */ i = funcs.indexOf(listener);
    if (i != -1) {
      funcs.splice(i, 1);
    }
    if (funcs.length === 0) {
      this.flash_events_EventDispatcher_listeners[type] = null;
      delete this.flash_events_EventDispatcher_listeners[type];
    }
  }
};


/**
 * @param {flash.events.Event} event
 * @return {boolean}
 */
flash.events.EventDispatcher.prototype.dispatchEvent = function(event) {
  if (event.target) {
    return this.flash_events_EventDispatcher_dispatchEventFunction(event.clone());
  }
  return this.flash_events_EventDispatcher_dispatchEventFunction(event);
};


/**
 * @param {string} type
 * @return {boolean}
 */
flash.events.EventDispatcher.prototype.hasEventListener = function(type) {
  if (this.flash_events_EventDispatcher_listeners == null) {
    return false;
  }
  return this.flash_events_EventDispatcher_listeners[type] != null;
};


/**
 * @param {string} param1
 * @return {boolean}
 */
flash.events.EventDispatcher.prototype.willTrigger = function(param1) {
  return false;
};


/**
 * @private
 * @param {flash.events.Event} event
 * @return {boolean}
 */
flash.events.EventDispatcher.prototype.flash_events_EventDispatcher_dispatchEventFunction = function(event) {
  if (this.flash_events_EventDispatcher_listeners == null) {
    return false;
  }
  event.target = this;
  event.currentTarget = this;
  var /** @type {Array} */ funcs = /* implicit cast */ org.apache.royale.utils.Language.as(this.flash_events_EventDispatcher_listeners[event.type], Array, true);
  if (funcs) {
    var /** @type {number} */ len = (funcs.length) >> 0;
    for (var /** @type {number} */ i = 0; i < len; i++) {
      var /** @type {Function} */ func = /* implicit cast */ org.apache.royale.utils.Language.as(funcs[i], Function, true);
      func(event);
    }
  }
  return false;
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.events.EventDispatcher.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'EventDispatcher', qName: 'flash.events.EventDispatcher', kind: 'class' }], interfaces: [flash.events.IEventDispatcher] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.events.EventDispatcher.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    methods: function () {
      return {
        'EventDispatcher': { type: '', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [ 'flash.events.IEventDispatcher', true ]; }},
        'addEventListener': { type: 'void', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ,'int', true ,'Boolean', true ]; }},
        'removeEventListener': { type: 'void', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [ 'String', false ,'Function', false ,'Boolean', true ]; }},
        'dispatchEvent': { type: 'Boolean', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [ 'flash.events.Event', false ]; }},
        'hasEventListener': { type: 'Boolean', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [ 'String', false ]; }},
        'willTrigger': { type: 'Boolean', declaredBy: 'flash.events.EventDispatcher', parameters: function () { return [ 'String', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.events.EventDispatcher.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
flash.events.EventDispatcher.prototype.ROYALE_INITIAL_STATICS = Object.keys(flash.events.EventDispatcher);
