/**
 * Generated by Apache Royale Compiler from flash/events/KeyboardEvent.as
 * flash.events.KeyboardEvent
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.events.KeyboardEvent');
/* Royale Dependency List: */

goog.require('flash.events.Event');



/**
 * @constructor
 * @extends {flash.events.Event}
 * @param {string} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @param {number=} charCodeValue
 * @param {number=} keyCodeValue
 * @param {number=} keyLocationValue
 * @param {boolean=} ctrlKeyValue
 * @param {boolean=} altKeyValue
 * @param {boolean=} shiftKeyValue
 */
flash.events.KeyboardEvent = function(type, bubbles, cancelable, charCodeValue, keyCodeValue, keyLocationValue, ctrlKeyValue, altKeyValue, shiftKeyValue) {
  bubbles = typeof bubbles !== 'undefined' ? bubbles : true;
  cancelable = typeof cancelable !== 'undefined' ? cancelable : false;
  charCodeValue = typeof charCodeValue !== 'undefined' ? charCodeValue : 0;
  keyCodeValue = typeof keyCodeValue !== 'undefined' ? keyCodeValue : 0;
  keyLocationValue = typeof keyLocationValue !== 'undefined' ? keyLocationValue : 0;
  ctrlKeyValue = typeof ctrlKeyValue !== 'undefined' ? ctrlKeyValue : false;
  altKeyValue = typeof altKeyValue !== 'undefined' ? altKeyValue : false;
  shiftKeyValue = typeof shiftKeyValue !== 'undefined' ? shiftKeyValue : false;
  flash.events.KeyboardEvent.base(this, 'constructor', type, bubbles, cancelable);
  this.charCode = charCodeValue;
  this.keyCode = keyCodeValue;
  this.keyLocation = keyLocationValue;
  this.ctrlKey = ctrlKeyValue;
  this.altKey = altKeyValue;
  this.shiftKey = shiftKeyValue;
};
goog.inherits(flash.events.KeyboardEvent, flash.events.Event);


/**
 * @nocollapse
 * @const
 * @type {string}
 */
flash.events.KeyboardEvent.KEY_DOWN = "keyDown";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
flash.events.KeyboardEvent.KEY_UP = "keyUp";


/**
 * @private
 * @type {number}
 */
flash.events.KeyboardEvent.prototype.flash_events_KeyboardEvent_m_keyLocation = 0;


/**
 * @private
 * @type {number}
 */
flash.events.KeyboardEvent.prototype.flash_events_KeyboardEvent_m_keyCode = 0;


/**
 * @private
 * @type {boolean}
 */
flash.events.KeyboardEvent.prototype.flash_events_KeyboardEvent_m_ctrlKey = false;


/**
 * @private
 * @type {boolean}
 */
flash.events.KeyboardEvent.prototype.flash_events_KeyboardEvent_m_altKey = false;


/**
 * @private
 * @type {boolean}
 */
flash.events.KeyboardEvent.prototype.flash_events_KeyboardEvent_m_shiftKey = false;


/**
 * @override
 */
flash.events.KeyboardEvent.prototype.clone = function() {
  return new flash.events.KeyboardEvent(this.type, this.bubbles, this.cancelable, this.charCode, this.keyCode, this.keyLocation, this.ctrlKey, this.altKey, this.shiftKey);
};


/**
 * @override
 */
flash.events.KeyboardEvent.prototype.toString = function() {
  return this.formatToString("KeyboardEvent", "type", "bubbles", "cancelable", "eventPhase", "charCode", "keyCode", "keyLocation", "ctrlKey", "altKey", "shiftKey");
};


/**
 */
flash.events.KeyboardEvent.prototype.updateAfterEvent = function() {
};


flash.events.KeyboardEvent.prototype.get__charCode = function() {
  return 0;
};


flash.events.KeyboardEvent.prototype.set__charCode = function(param1) {
};


flash.events.KeyboardEvent.prototype.get__keyCode = function() {
  return this.flash_events_KeyboardEvent_m_keyCode;
};


flash.events.KeyboardEvent.prototype.set__keyCode = function(value) {
  this.flash_events_KeyboardEvent_m_keyCode = value;
};


flash.events.KeyboardEvent.prototype.get__keyLocation = function() {
  return this.flash_events_KeyboardEvent_m_keyLocation;
};


flash.events.KeyboardEvent.prototype.set__keyLocation = function(value) {
  this.flash_events_KeyboardEvent_m_keyLocation = value;
};


flash.events.KeyboardEvent.prototype.get__ctrlKey = function() {
  return this.flash_events_KeyboardEvent_m_ctrlKey;
};


flash.events.KeyboardEvent.prototype.set__ctrlKey = function(param1) {
  this.flash_events_KeyboardEvent_m_ctrlKey = param1;
};


flash.events.KeyboardEvent.prototype.get__altKey = function() {
  return this.flash_events_KeyboardEvent_m_altKey;
};


flash.events.KeyboardEvent.prototype.set__altKey = function(param1) {
  this.flash_events_KeyboardEvent_m_altKey = param1;
};


flash.events.KeyboardEvent.prototype.get__shiftKey = function() {
  return this.flash_events_KeyboardEvent_m_shiftKey;
};


flash.events.KeyboardEvent.prototype.set__shiftKey = function(param1) {
  this.flash_events_KeyboardEvent_m_shiftKey = param1;
};


Object.defineProperties(flash.events.KeyboardEvent.prototype, /** @lends {flash.events.KeyboardEvent.prototype} */ {
/**
 * @type {number}
 */
charCode: {
get: flash.events.KeyboardEvent.prototype.get__charCode,
set: flash.events.KeyboardEvent.prototype.set__charCode},
/**
 * @type {number}
 */
keyCode: {
get: flash.events.KeyboardEvent.prototype.get__keyCode,
set: flash.events.KeyboardEvent.prototype.set__keyCode},
/**
 * @type {number}
 */
keyLocation: {
get: flash.events.KeyboardEvent.prototype.get__keyLocation,
set: flash.events.KeyboardEvent.prototype.set__keyLocation},
/**
 * @type {boolean}
 */
ctrlKey: {
get: flash.events.KeyboardEvent.prototype.get__ctrlKey,
set: flash.events.KeyboardEvent.prototype.set__ctrlKey},
/**
 * @type {boolean}
 */
altKey: {
get: flash.events.KeyboardEvent.prototype.get__altKey,
set: flash.events.KeyboardEvent.prototype.set__altKey},
/**
 * @type {boolean}
 */
shiftKey: {
get: flash.events.KeyboardEvent.prototype.get__shiftKey,
set: flash.events.KeyboardEvent.prototype.set__shiftKey}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.events.KeyboardEvent.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'KeyboardEvent', qName: 'flash.events.KeyboardEvent', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.events.KeyboardEvent.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'charCode': { type: 'uint', access: 'readwrite', declaredBy: 'flash.events.KeyboardEvent'},
        'keyCode': { type: 'uint', access: 'readwrite', declaredBy: 'flash.events.KeyboardEvent'},
        'keyLocation': { type: 'uint', access: 'readwrite', declaredBy: 'flash.events.KeyboardEvent'},
        'ctrlKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.events.KeyboardEvent'},
        'altKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.events.KeyboardEvent'},
        'shiftKey': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.events.KeyboardEvent'}
      };
    },
    methods: function () {
      return {
        'KeyboardEvent': { type: '', declaredBy: 'flash.events.KeyboardEvent', parameters: function () { return [ 'String', false ,'Boolean', true ,'Boolean', true ,'uint', true ,'uint', true ,'uint', true ,'Boolean', true ,'Boolean', true ,'Boolean', true ]; }},
        'clone': { type: 'flash.events.Event', declaredBy: 'flash.events.KeyboardEvent'},
        'toString': { type: 'String', declaredBy: 'flash.events.KeyboardEvent'},
        'updateAfterEvent': { type: 'void', declaredBy: 'flash.events.KeyboardEvent'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.events.KeyboardEvent.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
flash.events.KeyboardEvent.prototype.ROYALE_INITIAL_STATICS = Object.keys(flash.events.KeyboardEvent);
