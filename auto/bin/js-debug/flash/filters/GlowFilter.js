/**
 * Generated by Apache Royale Compiler from flash/filters/GlowFilter.as
 * flash.filters.GlowFilter
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.filters.GlowFilter');
/* Royale Dependency List: flash.display.DisplayObject,flash.geom.Rectangle,org.apache.royale.utils.Language*/

goog.require('flash.filters.BitmapFilter');



/**
 * Initializes a new GlowFilter instance with the specified parameters.
 * @asparam	color	The color of the glow, in the hexadecimal format 
 *   0xRRGGBB. The default value is 0xFF0000.
 * @asparam	alpha	The alpha transparency value for the color. Valid values are 0 to 1. For example,
 *   .25 sets a transparency value of 25%.
 * @asparam	blurX	The amount of horizontal blur. Valid values are 0 to 255 (floating point). Values
 *   that are a power of 2 (such as 2, 4, 8, 16 and 32) are optimized 
 *   to render more quickly than other values.
 * @asparam	blurY	The amount of vertical blur. Valid values are 0 to 255 (floating point). 
 *   Values that are a power of 2 (such as 2, 4, 8, 16 and 32) are optimized 
 *   to render more quickly than other values.
 * @asparam	strength	The strength of the imprint or spread. The higher the value, 
 *   the more color is imprinted and the stronger the contrast between the glow and the background. 
 *   Valid values are 0 to 255.
 * @asparam	quality	The number of times to apply the filter. Use the BitmapFilterQuality constants:
 *   BitmapFilterQuality.LOWBitmapFilterQuality.MEDIUMBitmapFilterQuality.HIGHFor more information, see the description of the quality property.
 * @asparam	inner	Specifies whether the glow is an inner glow. The value  true specifies
 *   an inner glow. The value false specifies an outer glow (a glow
 *   around the outer edges of the object).
 * @asparam	knockout	Specifies whether the object has a knockout effect. The value true
 *   makes the object's fill transparent and reveals the background color of the document.
 * @langversion	3.0
 * @playerversion	Flash 9
 * @example	The following example instantiates a new GlowFilter instance and applies
 *   it to a flat, rectangular shape.
 *   <listing version="2.0">
 *   import flash.filters.GlowFilter;
 *   
 *     var rect:MovieClip = createRectangle(100, 100, 0x003366, "gradientGlowFilterExample");
 *   
 *     var color:Number = 0x33CCFF;
 *   var alpha:Number = .8;
 *   var blurX:Number = 35;
 *   var blurY:Number = 35;
 *   var strength:Number = 2;
 *   var quality:Number = 3;
 *   var inner:Boolean = false;
 *   var knockout:Boolean = false;
 *   
 *     var filter:GlowFilter = new GlowFilter(color, 
 *   alpha, 
 *   blurX, 
 *   blurY, 
 *   strength, 
 *   quality, 
 *   inner, 
 *   knockout);
 *   var filterArray:Array = new Array();
 *   filterArray.push(filter);
 *   rect.filters = filterArray;
 *   
 *     function createRectangle(w:Number, h:Number, bgColor:Number, name:String):MovieClip {
 *   var mc:MovieClip = this.createEmptyMovieClip(name, this.getNextHighestDepth());
 *   mc.beginFill(bgColor);
 *   mc.lineTo(w, 0);
 *   mc.lineTo(w, h);
 *   mc.lineTo(0, h);
 *   mc.lineTo(0, 0);
 *   mc._x = 20;
 *   mc._y = 20;
 *   return mc;
 *   }
 *   </listing>
 * @constructor
 * @extends {flash.filters.BitmapFilter}
 * @param {number=} color
 * @param {number=} alpha
 * @param {number=} blurX
 * @param {number=} blurY
 * @param {number=} strength
 * @param {number=} quality
 * @param {boolean=} inner
 * @param {boolean=} knockout
 */
flash.filters.GlowFilter = function(color, alpha, blurX, blurY, strength, quality, inner, knockout) {
  flash.filters.GlowFilter.base(this, 'constructor');
  color = typeof color !== 'undefined' ? color : 0xFF0000;
  alpha = typeof alpha !== 'undefined' ? alpha : 1;
  blurX = typeof blurX !== 'undefined' ? blurX : 6;
  blurY = typeof blurY !== 'undefined' ? blurY : 6;
  strength = typeof strength !== 'undefined' ? strength : 2;
  quality = typeof quality !== 'undefined' ? quality : 1;
  inner = typeof inner !== 'undefined' ? inner : false;
  knockout = typeof knockout !== 'undefined' ? knockout : false;
  this.flash_filters_GlowFilter__color = color;
  this.flash_filters_GlowFilter__alpha = alpha;
  if (this.flash_filters_GlowFilter__alpha < 0)
    this.flash_filters_GlowFilter__alpha = 0;
  if (this.flash_filters_GlowFilter__alpha > 1)
    this.flash_filters_GlowFilter__alpha = 1;
  this.flash_filters_GlowFilter__blurX = blurX;
  this.flash_filters_GlowFilter__blurY = blurY;
  this.flash_filters_GlowFilter__strength = strength;
  this.flash_filters_GlowFilter__quality = quality;
  this.flash_filters_GlowFilter__inner = inner;
  this.flash_filters_GlowFilter__knockout = knockout;
  this.flash_filters_GlowFilter__red = color >> 16 & 0xff;
  this.flash_filters_GlowFilter__green = color >> 8 & 0xff;
  this.flash_filters_GlowFilter__blue = color & 0xff;
  this.flash_filters_GlowFilter__rgba = "rgba(" + this.flash_filters_GlowFilter__red + "," + this.flash_filters_GlowFilter__green + "," + this.flash_filters_GlowFilter__blue + "," + this.flash_filters_GlowFilter__alpha + ")";
  this._offsetX = this._offsetY = this.flash_filters_GlowFilter__blur = Math.max(blurX, blurY);
};
goog.inherits(flash.filters.GlowFilter, flash.filters.BitmapFilter);


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__color = 0;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__alpha = NaN;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__blurX = NaN;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__blurY = NaN;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__strength = NaN;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__quality = 0;


/**
 * @private
 * @type {boolean}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__inner = false;


/**
 * @private
 * @type {boolean}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__knockout = false;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__blur = NaN;


/**
 * @private
 * @type {string}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__rgba = null;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__red = 0;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__green = 0;


/**
 * @private
 * @type {number}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter__blue = 0;


/**
 * @type {ImageData}
 */
flash.filters.GlowFilter.prototype.origImage = null;


/**
 * @type {ImageData}
 */
flash.filters.GlowFilter.prototype.copyData = null;


/**
 * @type {HTMLCanvasElement}
 */
flash.filters.GlowFilter.prototype.copyCanvas = null;


/**
 * @type {HTMLCanvasElement}
 */
flash.filters.GlowFilter.prototype.biggerCanvas = null;


/**
 * @private
 * @param {number} amount
 * @param {HTMLCanvasElement} canvas
 * @return {HTMLCanvasElement}
 */
flash.filters.GlowFilter.prototype.flash_filters_GlowFilter_blurFilter = function(amount, canvas) {
  amount -= 3;
  this._offsetX = amount + this.flash_filters_GlowFilter__blur;
  this._offsetY = amount + this.flash_filters_GlowFilter__blur;
  this.biggerCanvas = document.createElement("canvas");
  this.biggerCanvas.width = canvas.width + this._offsetX;
  this.biggerCanvas.height = canvas.height + this._offsetY;
  var /** @type {CanvasRenderingContext2D} */ bgCtx = this.biggerCanvas.getContext("2d");
  bgCtx.drawImage(canvas, (this.biggerCanvas.width - canvas.width) / 2, (this.biggerCanvas.height - canvas.height) / 2);
  bgCtx.globalAlpha = .25;
  for (var /** @type {number} */ y = (-amount) >> 0; y <= amount; y += 1) {
    for (var /** @type {number} */ x = (-amount) >> 0; x <= amount; x += 1) {
      bgCtx.drawImage(this.biggerCanvas, x, y);
      if (x >= 0 && y >= 0) {
        bgCtx.drawImage(this.biggerCanvas, -((x - 1) / 2), ((y - 1) / 2));
      }
    }
  }
  bgCtx.globalAlpha = 1;
  return this.biggerCanvas;
};


/**
 * @param {CanvasRenderingContext2D} ctx
 * @param {flash.display.DisplayObject} displayObject
 * @param {boolean=} isText
 */
flash.filters.GlowFilter.prototype.applyFilter = function(ctx, displayObject, isText) {
  isText = typeof isText !== 'undefined' ? isText : false;
  var /** @type {string} */ gco = null;
  ctx.shadowColor = this.flash_filters_GlowFilter__rgba;
  var /** @type {flash.geom.Rectangle} */ bounds = displayObject.getFullBounds(displayObject);
  this.origImage = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
  var /** @type {Uint8ClampedArray} */ dData = this.origImage.data;
  this.copyCanvas = document.createElement("canvas");
  this.copyCanvas.width = bounds.width;
  this.copyCanvas.height = bounds.height;
  var /** @type {CanvasRenderingContext2D} */ copyCtx = this.copyCanvas.getContext("2d");
  this.copyData = copyCtx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
  var /** @type {Uint8ClampedArray} */ copyDataArr = this.copyData.data;
  var /** @type {number} */ len = (dData.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i += 4) {
    var /** @type {number} */ ia = (i + 3) >> 0;
    var /** @type {number} */ currentAlpha = Number(dData[ia]);
    if (!this.flash_filters_GlowFilter__inner) {
      if (currentAlpha !== 0) {
        copyDataArr[i] = this.flash_filters_GlowFilter__red;
        copyDataArr[i + 1] = this.flash_filters_GlowFilter__green;
        copyDataArr[i + 2] = this.flash_filters_GlowFilter__blue;
        copyDataArr[ia] = currentAlpha;
      }
    } else {
      if (currentAlpha !== 255) {
        copyDataArr[i] = this.flash_filters_GlowFilter__red;
        copyDataArr[i + 1] = this.flash_filters_GlowFilter__green;
        copyDataArr[i + 2] = this.flash_filters_GlowFilter__blue;
        copyDataArr[ia] = 255 - currentAlpha;
      }
    }
  }
  if (displayObject.cacheAsBitmap || isText) {
    copyCtx.putImageData(this.copyData, -((ctx.canvas.width - this.copyCanvas.width) / 2), -((ctx.canvas.height - this.copyCanvas.height) / 2));
  } else {
    copyCtx.putImageData(this.copyData, -(displayObject.x + bounds.x), -(displayObject.y + bounds.y));
  }
  var /** @type {HTMLCanvasElement} */ glowCanvas = this.flash_filters_GlowFilter_blurFilter(this.flash_filters_GlowFilter__strength, this.copyCanvas);
  //var /** @type {string} */ gco = null;
  if (this.flash_filters_GlowFilter__knockout) {
    gco = this.flash_filters_GlowFilter__inner ? "source-in" : "source-out";
  } else {
    gco = this.flash_filters_GlowFilter__inner ? "source-atop" : "destination-over";
  }
  ctx.save();
  ctx.globalAlpha = this.flash_filters_GlowFilter__alpha;
  ctx.globalCompositeOperation = gco;
  ctx.drawImage(glowCanvas, bounds.x - Math.round(this._offsetX / 2), bounds.y - Math.round(this._offsetY / 2));
  org.apache.royale.utils.Language.trace("bounds: " + bounds.toString());
  org.apache.royale.utils.Language.trace("glowCanvas: w: " + glowCanvas.width + ", h: " + glowCanvas.height);
  org.apache.royale.utils.Language.trace("offsetX: " + this._offsetX + ", offsetY: " + this._offsetY);
  ctx.restore();
  ctx.shadowBlur = 0;
};


flash.filters.GlowFilter.prototype.get__alpha = function() {
  return this.flash_filters_GlowFilter__alpha;
};


flash.filters.GlowFilter.prototype.set__alpha = function(value) {
  this.flash_filters_GlowFilter__alpha = value;
};


flash.filters.GlowFilter.prototype.get__blurX = function() {
  return this.flash_filters_GlowFilter__blurX;
};


flash.filters.GlowFilter.prototype.set__blurX = function(value) {
  this.flash_filters_GlowFilter__blurX = value;
  this.flash_filters_GlowFilter__blur = Math.max(this.blurX, this.blurY);
  this._offsetX = this._offsetY = this.flash_filters_GlowFilter__blur;
};


flash.filters.GlowFilter.prototype.get__blurY = function() {
  return this.flash_filters_GlowFilter__blurY;
};


flash.filters.GlowFilter.prototype.set__blurY = function(value) {
  this.flash_filters_GlowFilter__blurY = value;
  this.flash_filters_GlowFilter__blur = Math.max(this.blurX, this.blurY);
  this._offsetX = this._offsetY = this.flash_filters_GlowFilter__blur;
};


flash.filters.GlowFilter.prototype.get__color = function() {
  return this.flash_filters_GlowFilter__color;
};


flash.filters.GlowFilter.prototype.set__color = function(value) {
  this.flash_filters_GlowFilter__color = value;
  this.flash_filters_GlowFilter__rgba = "rgba(" + (this.color >> 16 & 0xff) + "," + (this.color >> 8 & 0xff) + "," + (this.color & 0xff) + "," + this.alpha + ")";
};


flash.filters.GlowFilter.prototype.get__inner = function() {
  return this.flash_filters_GlowFilter__inner;
};


flash.filters.GlowFilter.prototype.set__inner = function(value) {
  this.flash_filters_GlowFilter__inner = value;
};


flash.filters.GlowFilter.prototype.get__knockout = function() {
  return this.flash_filters_GlowFilter__knockout;
};


flash.filters.GlowFilter.prototype.set__knockout = function(value) {
  this.flash_filters_GlowFilter__knockout = value;
};


flash.filters.GlowFilter.prototype.get__quality = function() {
  return this.flash_filters_GlowFilter__quality;
};


flash.filters.GlowFilter.prototype.set__quality = function(value) {
  this.flash_filters_GlowFilter__quality = value;
};


flash.filters.GlowFilter.prototype.get__strength = function() {
  return this.flash_filters_GlowFilter__strength;
};


flash.filters.GlowFilter.prototype.set__strength = function(value) {
  this.flash_filters_GlowFilter__strength = value;
};


flash.filters.GlowFilter.prototype.get__blur = function() {
  return this.flash_filters_GlowFilter__blur;
};


flash.filters.GlowFilter.prototype.get__rgba = function() {
  return this.flash_filters_GlowFilter__rgba;
};


Object.defineProperties(flash.filters.GlowFilter.prototype, /** @lends {flash.filters.GlowFilter.prototype} */ {
/**
 * @type {number}
 */
alpha: {
get: flash.filters.GlowFilter.prototype.get__alpha,
set: flash.filters.GlowFilter.prototype.set__alpha},
/**
 * @type {number}
 */
blurX: {
get: flash.filters.GlowFilter.prototype.get__blurX,
set: flash.filters.GlowFilter.prototype.set__blurX},
/**
 * @type {number}
 */
blurY: {
get: flash.filters.GlowFilter.prototype.get__blurY,
set: flash.filters.GlowFilter.prototype.set__blurY},
/**
 * @type {number}
 */
color: {
get: flash.filters.GlowFilter.prototype.get__color,
set: flash.filters.GlowFilter.prototype.set__color},
/**
 * @type {boolean}
 */
inner: {
get: flash.filters.GlowFilter.prototype.get__inner,
set: flash.filters.GlowFilter.prototype.set__inner},
/**
 * @type {boolean}
 */
knockout: {
get: flash.filters.GlowFilter.prototype.get__knockout,
set: flash.filters.GlowFilter.prototype.set__knockout},
/**
 * @type {number}
 */
quality: {
get: flash.filters.GlowFilter.prototype.get__quality,
set: flash.filters.GlowFilter.prototype.set__quality},
/**
 * @type {number}
 */
strength: {
get: flash.filters.GlowFilter.prototype.get__strength,
set: flash.filters.GlowFilter.prototype.set__strength},
/**
 * @type {number}
 */
blur: {
get: flash.filters.GlowFilter.prototype.get__blur},
/**
 * @type {string}
 */
rgba: {
get: flash.filters.GlowFilter.prototype.get__rgba}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.filters.GlowFilter.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'GlowFilter', qName: 'flash.filters.GlowFilter', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.filters.GlowFilter.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'origImage': { type: 'ImageData', get_set: function (/** flash.filters.GlowFilter */ inst, /** * */ v) {return v !== undefined ? inst.origImage = v : inst.origImage;}},
        'copyData': { type: 'ImageData', get_set: function (/** flash.filters.GlowFilter */ inst, /** * */ v) {return v !== undefined ? inst.copyData = v : inst.copyData;}},
        'copyCanvas': { type: 'HTMLCanvasElement', get_set: function (/** flash.filters.GlowFilter */ inst, /** * */ v) {return v !== undefined ? inst.copyCanvas = v : inst.copyCanvas;}},
        'biggerCanvas': { type: 'HTMLCanvasElement', get_set: function (/** flash.filters.GlowFilter */ inst, /** * */ v) {return v !== undefined ? inst.biggerCanvas = v : inst.biggerCanvas;}}
      };
    },
    accessors: function () {
      return {
        'alpha': { type: 'Number', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'blurX': { type: 'Number', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'blurY': { type: 'Number', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'color': { type: 'uint', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'inner': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'knockout': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'quality': { type: 'int', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'strength': { type: 'Number', access: 'readwrite', declaredBy: 'flash.filters.GlowFilter'},
        'blur': { type: 'Number', access: 'readonly', declaredBy: 'flash.filters.GlowFilter'},
        'rgba': { type: 'String', access: 'readonly', declaredBy: 'flash.filters.GlowFilter'}
      };
    },
    methods: function () {
      return {
        'GlowFilter': { type: '', declaredBy: 'flash.filters.GlowFilter', parameters: function () { return [ 'uint', true ,'Number', true ,'Number', true ,'Number', true ,'Number', true ,'int', true ,'Boolean', true ,'Boolean', true ]; }},
        'applyFilter': { type: 'void', declaredBy: 'flash.filters.GlowFilter', parameters: function () { return [ 'CanvasRenderingContext2D', false ,'flash.display.DisplayObject', false ,'Boolean', true ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.filters.GlowFilter.prototype.ROYALE_COMPILE_FLAGS = 9;
