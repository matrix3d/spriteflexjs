/**
 * Generated by Apache Royale Compiler from flash/geom/Matrix.as
 * flash.geom.Matrix
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.geom.Matrix');
/* Royale Dependency List: flash.geom.Point,flash.geom.Vector3D*/




/**
 * @constructor
 * @param {number=} a
 * @param {number=} b
 * @param {number=} c
 * @param {number=} d
 * @param {number=} tx
 * @param {number=} ty
 */
flash.geom.Matrix = function(a, b, c, d, tx, ty) {
  a = typeof a !== 'undefined' ? a : 1;
  b = typeof b !== 'undefined' ? b : 0;
  c = typeof c !== 'undefined' ? c : 0;
  d = typeof d !== 'undefined' ? d : 1;
  tx = typeof tx !== 'undefined' ? tx : 0;
  ty = typeof ty !== 'undefined' ? ty : 0;
  ;
  this.a = a;
  this.b = b;
  this.c = c;
  this.d = d;
  this.tx = tx;
  this.ty = ty;
};


/**
 * @type {number}
 */
flash.geom.Matrix.prototype.a = NaN;


/**
 * @type {number}
 */
flash.geom.Matrix.prototype.b = NaN;


/**
 * @type {number}
 */
flash.geom.Matrix.prototype.c = NaN;


/**
 * @type {number}
 */
flash.geom.Matrix.prototype.d = NaN;


/**
 * @type {number}
 */
flash.geom.Matrix.prototype.tx = NaN;


/**
 * @type {number}
 */
flash.geom.Matrix.prototype.ty = NaN;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype.flash_geom_Matrix_t0 = NaN;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype.flash_geom_Matrix_t1 = NaN;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype.flash_geom_Matrix_t2 = NaN;


/**
 * @private
 * @type {number}
 */
flash.geom.Matrix.prototype.flash_geom_Matrix_t3 = NaN;


/**
 * @return {flash.geom.Matrix}
 */
flash.geom.Matrix.prototype.clone = function() {
  return new flash.geom.Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);
};


/**
 * @param {flash.geom.Matrix} m
 */
flash.geom.Matrix.prototype.concat = function(m) {
  this.flash_geom_Matrix_t0 = this.a;
  this.a = this.a * m.a + this.b * m.c;
  this.b = this.flash_geom_Matrix_t0 * m.b + this.b * m.d;
  this.flash_geom_Matrix_t0 = this.c;
  this.c = this.c * m.a + this.d * m.c;
  this.d = this.flash_geom_Matrix_t0 * m.b + this.d * m.d;
  this.flash_geom_Matrix_t0 = this.tx;
  this.tx = this.tx * m.a + this.ty * m.c + m.tx;
  this.ty = this.flash_geom_Matrix_t0 * m.b + this.ty * m.d + m.ty;
};


/**
 */
flash.geom.Matrix.prototype.invert = function() {
  if (this.b === 0 && this.c === 0) {
    this.a = 1 / this.a;
    this.d = 1 / this.d;
    this.tx *= -this.a;
    this.ty *= -this.d;
  } else {
    var /** @type {number} */ det = this.a * this.d - this.b * this.c;
    if (det === 0) {
      this.a = this.d = 1;
      this.b = this.c = 0;
      this.tx = this.ty = 0;
    } else {
      det = 1 / det;
      this.flash_geom_Matrix_t0 = this.a;
      this.flash_geom_Matrix_t1 = this.b;
      this.flash_geom_Matrix_t2 = this.c;
      this.flash_geom_Matrix_t3 = this.d;
      this.a = this.flash_geom_Matrix_t3 * det;
      this.b = -this.flash_geom_Matrix_t1 * det;
      this.c = -this.flash_geom_Matrix_t2 * det;
      this.d = this.flash_geom_Matrix_t0 * det;
      this.flash_geom_Matrix_t0 = -(this.b * this.tx + this.d * this.ty);
      this.tx = -(this.a * this.tx + this.c * this.ty);
      this.ty = this.flash_geom_Matrix_t0;
    }
  }
};


/**
 */
flash.geom.Matrix.prototype.identity = function() {
  this.a = this.d = 1;
  this.b = this.c = 0;
  this.tx = this.ty = 0;
};


/**
 * @param {number} scaleX
 * @param {number} scaleY
 * @param {number=} rotation
 * @param {number=} tx
 * @param {number=} ty
 */
flash.geom.Matrix.prototype.createBox = function(scaleX, scaleY, rotation, tx, ty) {
  rotation = typeof rotation !== 'undefined' ? rotation : 0;
  tx = typeof tx !== 'undefined' ? tx : 0;
  ty = typeof ty !== 'undefined' ? ty : 0;
  var /** @type {number} */ u = Math.cos(rotation);
  var /** @type {number} */ v = Math.sin(rotation);
  this.a = u * scaleX;
  this.b = v * scaleY;
  this.c = -v * scaleX;
  this.d = u * scaleY;
  this.tx = tx;
  this.ty = ty;
};


/**
 * @param {number} width
 * @param {number} height
 * @param {number=} rotation
 * @param {number=} tx
 * @param {number=} ty
 */
flash.geom.Matrix.prototype.createGradientBox = function(width, height, rotation, tx, ty) {
  rotation = typeof rotation !== 'undefined' ? rotation : 0;
  tx = typeof tx !== 'undefined' ? tx : 0;
  ty = typeof ty !== 'undefined' ? ty : 0;
  this.createBox(width / 1638.4, height / 1638.4, rotation, tx + width / 2, ty + height / 2);
};


/**
 * @param {number} angle
 */
flash.geom.Matrix.prototype.rotate = function(angle) {
  var /** @type {number} */ u = Math.cos(angle);
  var /** @type {number} */ v = Math.sin(angle);
  this.flash_geom_Matrix_t0 = this.a;
  this.flash_geom_Matrix_t1 = this.c;
  this.flash_geom_Matrix_t2 = this.tx;
  this.a = u * this.a - v * this.b;
  this.b = v * this.flash_geom_Matrix_t0 + u * this.b;
  this.c = u * this.c - v * this.d;
  this.d = v * this.flash_geom_Matrix_t1 + u * this.d;
  this.tx = u * this.tx - v * this.ty;
  this.ty = v * this.flash_geom_Matrix_t2 + u * this.ty;
};


/**
 * @param {number} dx
 * @param {number} dy
 */
flash.geom.Matrix.prototype.translate = function(dx, dy) {
  this.tx += dx;
  this.ty += dy;
};


/**
 * @param {number} sx
 * @param {number} sy
 */
flash.geom.Matrix.prototype.scale = function(sx, sy) {
  this.a *= sx;
  this.b *= sy;
  this.c *= sx;
  this.d *= sy;
  this.tx *= sx;
  this.ty *= sy;
};


/**
 * @param {flash.geom.Point} point
 * @return {flash.geom.Point}
 */
flash.geom.Matrix.prototype.deltaTransformPoint = function(point) {
  return new flash.geom.Point(this.a * point.x + this.c * point.y, this.d * point.y + this.b * point.x);
};


/**
 * @param {flash.geom.Point} point
 * @return {flash.geom.Point}
 */
flash.geom.Matrix.prototype.transformPoint = function(point) {
  return new flash.geom.Point(this.a * point.x + this.c * point.y + this.tx, this.d * point.y + this.b * point.x + this.ty);
};


/**
 * @return {string}
 */
flash.geom.Matrix.prototype.toString = function() {
  return "(a=" + this.a + ", b=" + this.b + ", c=" + this.c + ", d=" + this.d + ", tx=" + this.tx + ", ty=" + this.ty + ")";
};


/**
 * @param {flash.geom.Matrix} sourceMatrix
 */
flash.geom.Matrix.prototype.copyFrom = function(sourceMatrix) {
  this.a = sourceMatrix.a;
  this.b = sourceMatrix.b;
  this.c = sourceMatrix.c;
  this.d = sourceMatrix.d;
  this.tx = sourceMatrix.tx;
  this.ty = sourceMatrix.ty;
};


/**
 * @param {number} aa
 * @param {number} ba
 * @param {number} ca
 * @param {number} da
 * @param {number} txa
 * @param {number} tya
 */
flash.geom.Matrix.prototype.setTo = function(aa, ba, ca, da, txa, tya) {
  this.a = aa;
  this.b = ba;
  this.c = ca;
  this.d = da;
  this.tx = txa;
  this.ty = tya;
};


/**
 * @param {number} row
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyRowTo = function(row, vector3D) {
  switch (row) {
    case 0:
      break;
    case 1:
      vector3D.x = this.b;
      vector3D.y = this.d;
      vector3D.z = this.ty;
      break;
    case 2:
    
    case 3:
      vector3D.x = 0;
      vector3D.y = 0;
      vector3D.z = 1;
      break;
    default:
      vector3D.x = this.a;
      vector3D.y = this.c;
      vector3D.z = this.tx;
  }
};


/**
 * @param {number} column
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyColumnTo = function(column, vector3D) {
  switch (column) {
    case 0:
      break;
    case 1:
      vector3D.x = this.c;
      vector3D.y = this.d;
      vector3D.z = 0;
      break;
    case 2:
    
    case 3:
      vector3D.x = this.tx;
      vector3D.y = this.ty;
      vector3D.z = 1;
      break;
    default:
      vector3D.x = this.a;
      vector3D.y = this.b;
      vector3D.z = 0;
  }
};


/**
 * @param {number} row
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyRowFrom = function(row, vector3D) {
  switch (row) {
    case 0:
      break;
    case 1:
    
    case 2:
      this.b = vector3D.x;
      this.d = vector3D.y;
      this.ty = vector3D.z;
      break;
    default:
      this.a = vector3D.x;
      this.c = vector3D.y;
      this.tx = vector3D.z;
  }
};


/**
 * @param {number} column
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix.prototype.copyColumnFrom = function(column, vector3D) {
  switch (column) {
    case 0:
      break;
    case 1:
    
    case 2:
      this.b = vector3D.x;
      this.d = vector3D.y;
      this.ty = vector3D.z;
      break;
    default:
      this.a = vector3D.x;
      this.c = vector3D.y;
      this.tx = vector3D.z;
  }
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.geom.Matrix.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Matrix', qName: 'flash.geom.Matrix', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.geom.Matrix.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'a': { type: 'Number', get_set: function (/** flash.geom.Matrix */ inst, /** * */ v) {return v !== undefined ? inst.a = v : inst.a;}},
        'b': { type: 'Number', get_set: function (/** flash.geom.Matrix */ inst, /** * */ v) {return v !== undefined ? inst.b = v : inst.b;}},
        'c': { type: 'Number', get_set: function (/** flash.geom.Matrix */ inst, /** * */ v) {return v !== undefined ? inst.c = v : inst.c;}},
        'd': { type: 'Number', get_set: function (/** flash.geom.Matrix */ inst, /** * */ v) {return v !== undefined ? inst.d = v : inst.d;}},
        'tx': { type: 'Number', get_set: function (/** flash.geom.Matrix */ inst, /** * */ v) {return v !== undefined ? inst.tx = v : inst.tx;}},
        'ty': { type: 'Number', get_set: function (/** flash.geom.Matrix */ inst, /** * */ v) {return v !== undefined ? inst.ty = v : inst.ty;}}
      };
    },
    methods: function () {
      return {
        'Matrix': { type: '', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'Number', true ,'Number', true ,'Number', true ,'Number', true ,'Number', true ,'Number', true ]; }},
        'clone': { type: 'flash.geom.Matrix', declaredBy: 'flash.geom.Matrix'},
        'concat': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'flash.geom.Matrix', false ]; }},
        'invert': { type: 'void', declaredBy: 'flash.geom.Matrix'},
        'identity': { type: 'void', declaredBy: 'flash.geom.Matrix'},
        'createBox': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', true ,'Number', true ,'Number', true ]; }},
        'createGradientBox': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', true ,'Number', true ,'Number', true ]; }},
        'rotate': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'Number', false ]; }},
        'translate': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'scale': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'deltaTransformPoint': { type: 'flash.geom.Point', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'flash.geom.Point', false ]; }},
        'transformPoint': { type: 'flash.geom.Point', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'flash.geom.Point', false ]; }},
        'toString': { type: 'String', declaredBy: 'flash.geom.Matrix'},
        'copyFrom': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'flash.geom.Matrix', false ]; }},
        'setTo': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ,'Number', false ]; }},
        'copyRowTo': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'uint', false ,'flash.geom.Vector3D', false ]; }},
        'copyColumnTo': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'uint', false ,'flash.geom.Vector3D', false ]; }},
        'copyRowFrom': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'uint', false ,'flash.geom.Vector3D', false ]; }},
        'copyColumnFrom': { type: 'void', declaredBy: 'flash.geom.Matrix', parameters: function () { return [ 'uint', false ,'flash.geom.Vector3D', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.geom.Matrix.prototype.ROYALE_COMPILE_FLAGS = 9;
