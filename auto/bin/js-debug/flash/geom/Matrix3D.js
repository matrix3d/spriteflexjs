/**
 * Generated by Apache Royale Compiler from flash/geom/Matrix3D.as
 * flash.geom.Matrix3D
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.geom.Matrix3D');
/* Royale Dependency List: flash.geom.Orientation3D,flash.geom.Vector3D*/
/* Royale Static Dependency List: org.apache.royale.utils.Language*/

goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 * @param {Array.<number>=} v
 */
flash.geom.Matrix3D = function(v) {
  v = typeof v !== 'undefined' ? v : null;
  if (v != null && v.length === 16)
    this.rawData = v;
  else
    this.rawData = org.apache.royale.utils.Language.synthVector('Number')['coerce']([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]);
};


/**
 * @private
 * @type {flash.geom.Matrix3D}
 */
flash.geom.Matrix3D.TEMP;


/**
 * @type {Array.<number>}
 */
flash.geom.Matrix3D.prototype.rawData = null;


/**
 * @param {flash.geom.Matrix3D} lhs
 */
flash.geom.Matrix3D.prototype.append = function(lhs) {
  var /** @type {number} */ m111 = this.rawData[0];
  var /** @type {number} */ m121 = this.rawData[4];
  var /** @type {number} */ m131 = this.rawData[8];
  var /** @type {number} */ m141 = this.rawData[12];
  var /** @type {number} */ m112 = this.rawData[1];
  var /** @type {number} */ m122 = this.rawData[5];
  var /** @type {number} */ m132 = this.rawData[9];
  var /** @type {number} */ m142 = this.rawData[13];
  var /** @type {number} */ m113 = this.rawData[2];
  var /** @type {number} */ m123 = this.rawData[6];
  var /** @type {number} */ m133 = this.rawData[10];
  var /** @type {number} */ m143 = this.rawData[14];
  var /** @type {number} */ m114 = this.rawData[3];
  var /** @type {number} */ m124 = this.rawData[7];
  var /** @type {number} */ m134 = this.rawData[11];
  var /** @type {number} */ m144 = this.rawData[15];
  var /** @type {number} */ m211 = lhs.rawData[0];
  var /** @type {number} */ m221 = lhs.rawData[4];
  var /** @type {number} */ m231 = lhs.rawData[8];
  var /** @type {number} */ m241 = lhs.rawData[12];
  var /** @type {number} */ m212 = lhs.rawData[1];
  var /** @type {number} */ m222 = lhs.rawData[5];
  var /** @type {number} */ m232 = lhs.rawData[9];
  var /** @type {number} */ m242 = lhs.rawData[13];
  var /** @type {number} */ m213 = lhs.rawData[2];
  var /** @type {number} */ m223 = lhs.rawData[6];
  var /** @type {number} */ m233 = lhs.rawData[10];
  var /** @type {number} */ m243 = lhs.rawData[14];
  var /** @type {number} */ m214 = lhs.rawData[3];
  var /** @type {number} */ m224 = lhs.rawData[7];
  var /** @type {number} */ m234 = lhs.rawData[11];
  var /** @type {number} */ m244 = lhs.rawData[15];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};


/**
 * @param {number} degrees
 * @param {flash.geom.Vector3D} axis
 * @param {flash.geom.Vector3D=} pivotPoint
 */
flash.geom.Matrix3D.prototype.appendRotation = function(degrees, axis, pivotPoint) {
  pivotPoint = typeof pivotPoint !== 'undefined' ? pivotPoint : null;
  var /** @type {flash.geom.Matrix3D} */ m = flash.geom.Matrix3D.getAxisRotation(axis.x, axis.y, axis.z, degrees);
  if (pivotPoint != null) {
    var /** @type {flash.geom.Vector3D} */ p = pivotPoint;
    m.appendTranslation(p.x, p.y, p.z);
  }
  this.append(m);
};


/**
 * @param {number} xScale
 * @param {number} yScale
 * @param {number} zScale
 */
flash.geom.Matrix3D.prototype.appendScale = function(xScale, yScale, zScale) {
  this.rawData[0] *= xScale;
  this.rawData[1] *= xScale;
  this.rawData[2] *= xScale;
  this.rawData[3] *= xScale;
  this.rawData[4] *= yScale;
  this.rawData[5] *= yScale;
  this.rawData[6] *= yScale;
  this.rawData[7] *= yScale;
  this.rawData[8] *= zScale;
  this.rawData[9] *= zScale;
  this.rawData[10] *= zScale;
  this.rawData[11] *= zScale;
};


/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 */
flash.geom.Matrix3D.prototype.appendTranslation = function(x, y, z) {
  this.rawData[12] += x;
  this.rawData[13] += y;
  this.rawData[14] += z;
};


/**
 * @return {flash.geom.Matrix3D}
 */
flash.geom.Matrix3D.prototype.clone = function() {
  return new flash.geom.Matrix3D(this.rawData.concat());
};


/**
 * @param {number} column
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix3D.prototype.copyColumnFrom = function(column, vector3D) {
  switch (column) {
    case 0:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = vector3D.w;
      break;
    case 1:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = vector3D.w;
      break;
    case 2:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = vector3D.w;
      break;
    case 3:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = vector3D.w;
      break;
    default:
      throw new Error("Error, Column " + column + " out of bounds [0, ..., 3]");
      break;
  }
};


/**
 * @param {number} column
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix3D.prototype.copyColumnTo = function(column, vector3D) {
  var /** @type {number} */ c4 = (column * 4) >> 0;
  vector3D.x = this.rawData[c4];
  vector3D.y = this.rawData[1 + c4];
  vector3D.z = this.rawData[2 + c4];
  vector3D.w = this.rawData[3 + c4];
};


/**
 * @param {flash.geom.Matrix3D} other
 */
flash.geom.Matrix3D.prototype.copyFrom = function(other) {
  this.rawData = other.rawData.concat();
};


/**
 * @param {Array.<number>} vector
 * @param {number=} index
 * @param {boolean=} transpose
 */
flash.geom.Matrix3D.prototype.copyRawDataFrom = function(vector, index, transpose) {
  index = typeof index !== 'undefined' ? index : 0;
  transpose = typeof transpose !== 'undefined' ? transpose : false;
  if (transpose)
    this.transpose();
  var /** @type {number} */ l = (vector.length - index) >>> 0;
  var /** @type {number} */ _g = 0;
  while (_g < org.apache.royale.utils.Language._int(l)) {
    var /** @type {number} */ c = _g++;
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](c)] = vector[vector[org.apache.royale.utils.Language.CHECK_INDEX](c + index)];
  }
  if (transpose)
    this.transpose();
};


/**
 * @param {Array.<number>} vector
 * @param {number=} index
 * @param {boolean=} transpose
 */
flash.geom.Matrix3D.prototype.copyRawDataTo = function(vector, index, transpose) {
  index = typeof index !== 'undefined' ? index : 0;
  transpose = typeof transpose !== 'undefined' ? transpose : false;
  if (transpose)
    this.transpose();
  var /** @type {number} */ l = (this.rawData.length) >>> 0;
  var /** @type {number} */ _g = 0;
  while (_g < l) {
    var /** @type {number} */ c = _g++;
    vector[vector[org.apache.royale.utils.Language.CHECK_INDEX](c + index)] = this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](c)];
  }
  if (transpose)
    this.transpose();
};


/**
 * @param {number} row
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix3D.prototype.copyRowFrom = function(row, vector3D) {
  switch (row) {
    case 0:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = vector3D.w;
      break;
    case 1:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = vector3D.w;
      break;
    case 2:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = vector3D.w;
      break;
    case 3:
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = vector3D.x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = vector3D.y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = vector3D.z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = vector3D.w;
      break;
    default:
      throw new Error("Error, Row " + ("" + row) + " out of bounds [0, ..., 3]");
      break;
  }
};


/**
 * @param {number} row
 * @param {flash.geom.Vector3D} vector3D
 */
flash.geom.Matrix3D.prototype.copyRowTo = function(row, vector3D) {
  vector3D.x = this.rawData[row];
  vector3D.y = this.rawData[4 + row];
  vector3D.z = this.rawData[8 + row];
  vector3D.w = this.rawData[12 + row];
};


/**
 * @param {flash.geom.Matrix3D} other
 */
flash.geom.Matrix3D.prototype.copyToMatrix3D = function(other) {
  other.rawData = this.rawData.concat();
};


/**
 * @param {string=} orientationStyle
 * @return {Array.<flash.geom.Vector3D>}
 */
flash.geom.Matrix3D.prototype.decompose = function(orientationStyle) {
  orientationStyle = typeof orientationStyle !== 'undefined' ? orientationStyle : null;
  if (orientationStyle == null)
    orientationStyle = flash.geom.Orientation3D.EULER_ANGLES;
  var /** @type {Array.<flash.geom.Vector3D>} */ vec = new (org.apache.royale.utils.Language.synthVector('flash.geom.Vector3D'))();
  var /** @type {flash.geom.Matrix3D} */ m = this.clone();
  var /** @type {Array.<number>} */ mr = m.rawData.concat();
  var /** @type {flash.geom.Vector3D} */ pos = new flash.geom.Vector3D(mr[12], mr[13], mr[14]);
  var /** @type {flash.geom.Vector3D} */ scale = new flash.geom.Vector3D();
  scale.x = Math.sqrt(mr[0] * mr[0] + mr[1] * mr[1] + mr[2] * mr[2]);
  scale.y = Math.sqrt(mr[4] * mr[4] + mr[5] * mr[5] + mr[6] * mr[6]);
  scale.z = Math.sqrt(mr[8] * mr[8] + mr[9] * mr[9] + mr[10] * mr[10]);
  if (mr[0] * (mr[5] * mr[10] - mr[6] * mr[9]) - mr[1] * (mr[4] * mr[10] - mr[6] * mr[8]) + mr[2] * (mr[4] * mr[9] - mr[5] * mr[8]) < 0)
    scale.z = -scale.z;
  mr[0] /= scale.x;
  mr[1] /= scale.x;
  mr[2] /= scale.x;
  mr[4] /= scale.y;
  mr[5] /= scale.y;
  mr[6] /= scale.y;
  mr[8] /= scale.z;
  mr[9] /= scale.z;
  mr[10] /= scale.z;
  var /** @type {flash.geom.Vector3D} */ rot = new flash.geom.Vector3D();
  switch (orientationStyle) {
    case flash.geom.Orientation3D.AXIS_ANGLE:
      rot.w = Math.acos((mr[0] + mr[5] + mr[10] - 1) / 2);
      var /** @type {number} */ len = Math.sqrt((mr[6] - mr[9]) * (mr[6] - mr[9]) + (mr[8] - mr[2]) * (mr[8] - mr[2]) + (mr[1] - mr[4]) * (mr[1] - mr[4]));
      if (len != 0) {
        rot.x = (mr[6] - mr[9]) / len;
        rot.y = (mr[8] - mr[2]) / len;
        rot.z = (mr[1] - mr[4]) / len;
      }
      else
        rot.x = rot.y = rot.z = 0;
      break;
    case flash.geom.Orientation3D.QUATERNION:
      var /** @type {number} */ tr = (mr[0] + mr[5] + mr[10]);
      if (tr > 0) {
        rot.w = Math.sqrt(1 + tr) / 2;
        rot.x = (mr[6] - mr[9]) / (4 * rot.w);
        rot.y = (mr[8] - mr[2]) / (4 * rot.w);
        rot.z = (mr[1] - mr[4]) / (4 * rot.w);
      } else if (mr[0] > mr[5] && mr[0] > mr[10]) {
        rot.x = Math.sqrt(1 + mr[0] - mr[5] - mr[10]) / 2;
        rot.w = (mr[6] - mr[9]) / (4 * rot.x);
        rot.y = (mr[1] + mr[4]) / (4 * rot.x);
        rot.z = (mr[8] + mr[2]) / (4 * rot.x);
      } else if (mr[5] > mr[10]) {
        rot.y = Math.sqrt(1 + mr[5] - mr[0] - mr[10]) / 2;
        rot.x = (mr[1] + mr[4]) / (4 * rot.y);
        rot.w = (mr[8] - mr[2]) / (4 * rot.y);
        rot.z = (mr[6] + mr[9]) / (4 * rot.y);
      } else {
        rot.z = Math.sqrt(1 + mr[10] - mr[0] - mr[5]) / 2;
        rot.x = (mr[8] + mr[2]) / (4 * rot.z);
        rot.y = (mr[6] + mr[9]) / (4 * rot.z);
        rot.w = (mr[1] - mr[4]) / (4 * rot.z);
      }
      break;
    case flash.geom.Orientation3D.EULER_ANGLES:
      rot.y = Math.asin(-mr[2]);
      if (mr[2] != 1 && mr[2] != -1) {
        rot.x = Math.atan2(mr[6], mr[10]);
        rot.z = Math.atan2(mr[1], mr[0]);
      } else {
        rot.z = 0;
        rot.x = Math.atan2(mr[4], mr[5]);
      }
      break;
  }
  vec.push(pos);
  vec.push(rot);
  vec.push(scale);
  return vec;
};


/**
 * @param {flash.geom.Vector3D} v
 * @return {flash.geom.Vector3D}
 */
flash.geom.Matrix3D.prototype.deltaTransformVector = function(v) {
  var /** @type {number} */ x = v.x;
  var /** @type {number} */ y = v.y;
  var /** @type {number} */ z = v.z;
  return new flash.geom.Vector3D(x * this.rawData[0] + y * this.rawData[4] + z * this.rawData[8] + this.rawData[3], x * this.rawData[1] + y * this.rawData[5] + z * this.rawData[9] + this.rawData[7], x * this.rawData[2] + y * this.rawData[6] + z * this.rawData[10] + this.rawData[11], 0);
};


/**
 */
flash.geom.Matrix3D.prototype.identity = function() {
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = 1;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = 1;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = 1;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = 0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = 1;
};


/**
 * @param {flash.geom.Matrix3D} toMat
 * @param {number} percent
 */
flash.geom.Matrix3D.prototype.interpolateTo = function(toMat, percent) {
  var /** @type {number} */ _g = 0;
  while (_g < 16) {
    var /** @type {number} */ i = _g++;
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](i)] = this.rawData[i] + (toMat.rawData[i] - this.rawData[i]) * percent;
  }
};


/**
 * @return {boolean}
 */
flash.geom.Matrix3D.prototype.invert = function() {
  var /** @type {number} */ d = this.determinant;
  var /** @type {boolean} */ invertable = Math.abs(d) > 0.00000000001;
  if (invertable) {
    d = 1 / d;
    var /** @type {number} */ m11 = this.rawData[0];
    var /** @type {number} */ m21 = this.rawData[4];
    var /** @type {number} */ m31 = this.rawData[8];
    var /** @type {number} */ m41 = this.rawData[12];
    var /** @type {number} */ m12 = this.rawData[1];
    var /** @type {number} */ m22 = this.rawData[5];
    var /** @type {number} */ m32 = this.rawData[9];
    var /** @type {number} */ m42 = this.rawData[13];
    var /** @type {number} */ m13 = this.rawData[2];
    var /** @type {number} */ m23 = this.rawData[6];
    var /** @type {number} */ m33 = this.rawData[10];
    var /** @type {number} */ m43 = this.rawData[14];
    var /** @type {number} */ m14 = this.rawData[3];
    var /** @type {number} */ m24 = this.rawData[7];
    var /** @type {number} */ m34 = this.rawData[11];
    var /** @type {number} */ m44 = this.rawData[15];
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
  }
  return invertable;
};


/**
 * @param {flash.geom.Vector3D} pos
 * @param {flash.geom.Vector3D=} at
 * @param {flash.geom.Vector3D=} up
 */
flash.geom.Matrix3D.prototype.pointAt = function(pos, at, up) {
  at = typeof at !== 'undefined' ? at : null;
  up = typeof up !== 'undefined' ? up : null;
  var /** @type {flash.geom.Vector3D} */ right = null;
  if (at == null)
    at = new flash.geom.Vector3D(0, 0, -1);
  if (up == null)
    up = new flash.geom.Vector3D(0, -1, 0);
  var /** @type {flash.geom.Vector3D} */ dir = at.subtract(pos);
  var /** @type {flash.geom.Vector3D} */ vup = up.clone();
  //var /** @type {flash.geom.Vector3D} */ right = null;
  dir.normalize();
  vup.normalize();
  var /** @type {flash.geom.Vector3D} */ dir2 = dir.clone();
  dir2.scaleBy(vup.dotProduct(dir));
  vup = vup.subtract(dir2);
  if (vup.length > 0)
    vup.normalize();
  else if (dir.x != 0)
    vup = new flash.geom.Vector3D(-dir.y, dir.x, 0);
  else
    vup = new flash.geom.Vector3D(1, 0, 0);
  right = vup.crossProduct(dir);
  right.normalize();
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = right.x;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = right.y;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = right.z;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = 0.0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = vup.x;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = vup.y;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = vup.z;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = 0.0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = dir.x;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = dir.y;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = dir.z;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = 0.0;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = pos.x;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = pos.y;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = pos.z;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = 1.0;
};


/**
 * @param {flash.geom.Matrix3D} rhs
 */
flash.geom.Matrix3D.prototype.prepend = function(rhs) {
  var /** @type {number} */ m111 = rhs.rawData[0];
  var /** @type {number} */ m121 = rhs.rawData[4];
  var /** @type {number} */ m131 = rhs.rawData[8];
  var /** @type {number} */ m141 = rhs.rawData[12];
  var /** @type {number} */ m112 = rhs.rawData[1];
  var /** @type {number} */ m122 = rhs.rawData[5];
  var /** @type {number} */ m132 = rhs.rawData[9];
  var /** @type {number} */ m142 = rhs.rawData[13];
  var /** @type {number} */ m113 = rhs.rawData[2];
  var /** @type {number} */ m123 = rhs.rawData[6];
  var /** @type {number} */ m133 = rhs.rawData[10];
  var /** @type {number} */ m143 = rhs.rawData[14];
  var /** @type {number} */ m114 = rhs.rawData[3];
  var /** @type {number} */ m124 = rhs.rawData[7];
  var /** @type {number} */ m134 = rhs.rawData[11];
  var /** @type {number} */ m144 = rhs.rawData[15];
  var /** @type {number} */ m211 = this.rawData[0];
  var /** @type {number} */ m221 = this.rawData[4];
  var /** @type {number} */ m231 = this.rawData[8];
  var /** @type {number} */ m241 = this.rawData[12];
  var /** @type {number} */ m212 = this.rawData[1];
  var /** @type {number} */ m222 = this.rawData[5];
  var /** @type {number} */ m232 = this.rawData[9];
  var /** @type {number} */ m242 = this.rawData[13];
  var /** @type {number} */ m213 = this.rawData[2];
  var /** @type {number} */ m223 = this.rawData[6];
  var /** @type {number} */ m233 = this.rawData[10];
  var /** @type {number} */ m243 = this.rawData[14];
  var /** @type {number} */ m214 = this.rawData[3];
  var /** @type {number} */ m224 = this.rawData[7];
  var /** @type {number} */ m234 = this.rawData[11];
  var /** @type {number} */ m244 = this.rawData[15];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};


/**
 * @param {number} degrees
 * @param {flash.geom.Vector3D} axis
 * @param {flash.geom.Vector3D=} pivotPoint
 */
flash.geom.Matrix3D.prototype.prependRotation = function(degrees, axis, pivotPoint) {
  pivotPoint = typeof pivotPoint !== 'undefined' ? pivotPoint : null;
  var /** @type {flash.geom.Matrix3D} */ m = flash.geom.Matrix3D.getAxisRotation(axis.x, axis.y, axis.z, degrees);
  if (pivotPoint != null) {
    var /** @type {flash.geom.Vector3D} */ p = pivotPoint;
    m.appendTranslation(p.x, p.y, p.z);
  }
  this.prepend(m);
};


/**
 * @param {number} xScale
 * @param {number} yScale
 * @param {number} zScale
 */
flash.geom.Matrix3D.prototype.prependScale = function(xScale, yScale, zScale) {
  this.rawData[0] *= xScale;
  this.rawData[1] *= yScale;
  this.rawData[2] *= zScale;
  this.rawData[4] *= xScale;
  this.rawData[5] *= yScale;
  this.rawData[6] *= zScale;
  this.rawData[8] *= xScale;
  this.rawData[9] *= yScale;
  this.rawData[10] *= zScale;
  this.rawData[12] *= xScale;
  this.rawData[13] *= yScale;
  this.rawData[14] *= zScale;
};


/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 */
flash.geom.Matrix3D.prototype.prependTranslation = function(x, y, z) {
  var /** @type {flash.geom.Matrix3D} */ m = flash.geom.Matrix3D.TEMP;
  m.identity();
  m.position = new flash.geom.Vector3D(x, y, z);
  this.prepend(m);
};


/**
 * @param {Array.<flash.geom.Vector3D>} components
 * @param {string=} orientationStyle
 * @return {boolean}
 */
flash.geom.Matrix3D.prototype.recompose = function(components, orientationStyle) {
  orientationStyle = typeof orientationStyle !== 'undefined' ? orientationStyle : null;
  if (components.length < 3 || components[2].x == 0 || components[2].y == 0 || components[2].z == 0)
    return false;
  if (orientationStyle == null)
    orientationStyle = flash.geom.Orientation3D.EULER_ANGLES;
  this.identity();
  var /** @type {Array} */ scale = [];
  scale[0] = scale[1] = scale[2] = components[2].x;
  scale[4] = scale[5] = scale[6] = components[2].y;
  scale[8] = scale[9] = scale[10] = components[2].z;
  switch (orientationStyle) {
    case flash.geom.Orientation3D.EULER_ANGLES:
      var /** @type {number} */ cx = Math.cos(components[1].x);
      var /** @type {number} */ cy = Math.cos(components[1].y);
      var /** @type {number} */ cz = Math.cos(components[1].z);
      var /** @type {number} */ sx = Math.sin(components[1].x);
      var /** @type {number} */ sy = Math.sin(components[1].y);
      var /** @type {number} */ sz = Math.sin(components[1].z);
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = cy * cz * scale[0];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = cy * sz * scale[1];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = -sy * scale[2];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = 0;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = (sx * sy * cz - cx * sz) * scale[4];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = (sx * sy * sz + cx * cz) * scale[5];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = sx * cy * scale[6];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = 0;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = (cx * sy * cz + sx * sz) * scale[8];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = (cx * sy * sz - sx * cz) * scale[9];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = cx * cy * scale[10];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = 0;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = components[0].x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = components[0].y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = components[0].z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = 1;
      break;
    default:
      var /** @type {number} */ x = components[1].x;
      var /** @type {number} */ y = components[1].y;
      var /** @type {number} */ z = components[1].z;
      var /** @type {number} */ w = components[1].w;
      if (orientationStyle == flash.geom.Orientation3D.AXIS_ANGLE) {
        x *= Math.sin(w / 2);
        y *= Math.sin(w / 2);
        z *= Math.sin(w / 2);
        w = Math.cos(w / 2);
      }
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = (1 - 2 * y * y - 2 * z * z) * scale[0];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = (2 * x * y + 2 * w * z) * scale[1];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = (2 * x * z - 2 * w * y) * scale[2];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = 0;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = (2 * x * y - 2 * w * z) * scale[4];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = (1 - 2 * x * x - 2 * z * z) * scale[5];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = (2 * y * z + 2 * w * x) * scale[6];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = 0;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = (2 * x * z + 2 * w * y) * scale[8];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = (2 * y * z - 2 * w * x) * scale[9];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = (1 - 2 * x * x - 2 * y * y) * scale[10];
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = 0;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = components[0].x;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = components[0].y;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = components[0].z;
      this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](15)] = 1;
      break;
  }
  if (components[2].x === 0)
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = 1e-15;
  if (components[2].y === 0)
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = 1e-15;
  if (components[2].z === 0)
    this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = 1e-15;
  return !(components[2].x === 0 || components[2].y === 0 || components[2].y === 0);
};


/**
 * @param {flash.geom.Vector3D} v
 * @return {flash.geom.Vector3D}
 */
flash.geom.Matrix3D.prototype.transformVector = function(v) {
  var /** @type {number} */ x = v.x;
  var /** @type {number} */ y = v.y;
  var /** @type {number} */ z = v.z;
  return new flash.geom.Vector3D(x * this.rawData[0] + y * this.rawData[4] + z * this.rawData[8] + this.rawData[12], x * this.rawData[1] + y * this.rawData[5] + z * this.rawData[9] + this.rawData[13], x * this.rawData[2] + y * this.rawData[6] + z * this.rawData[10] + this.rawData[14], x * this.rawData[3] + y * this.rawData[7] + z * this.rawData[11] + this.rawData[15]);
};


/**
 * @param {Array.<number>} vin
 * @param {Array.<number>} vout
 */
flash.geom.Matrix3D.prototype.transformVectors = function(vin, vout) {
  var /** @type {number} */ i = 0;
  while (i + 3 <= vin.length) {
    var /** @type {number} */ x = vin[i];
    var /** @type {number} */ y = vin[i + 1];
    var /** @type {number} */ z = vin[i + 2];
    vout[vout[org.apache.royale.utils.Language.CHECK_INDEX](i)] = x * this.rawData[0] + y * this.rawData[4] + z * this.rawData[8] + this.rawData[12];
    vout[vout[org.apache.royale.utils.Language.CHECK_INDEX](i + 1)] = x * this.rawData[1] + y * this.rawData[5] + z * this.rawData[9] + this.rawData[13];
    vout[vout[org.apache.royale.utils.Language.CHECK_INDEX](i + 2)] = x * this.rawData[2] + y * this.rawData[6] + z * this.rawData[10] + this.rawData[14];
    i += 3;
  }
};


/**
 */
flash.geom.Matrix3D.prototype.transpose = function() {
  var /** @type {Array.<number>} */ oRawData = this.rawData.concat();
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](4)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](8)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](3)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](12)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](1)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](9)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](7)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](13)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](2)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](6)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](11)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](14)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](3)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](7)];
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = oRawData[oRawData[org.apache.royale.utils.Language.CHECK_INDEX](11)];
};


/**
 * @nocollapse
 * @param {flash.geom.Matrix3D} thisMat
 * @param {flash.geom.Matrix3D} toMat
 * @param {number} percent
 * @return {flash.geom.Matrix3D}
 */
flash.geom.Matrix3D.interpolate = function(thisMat, toMat, percent) {
  var /** @type {flash.geom.Matrix3D} */ m = new flash.geom.Matrix3D();
  var /** @type {number} */ _g = 0;
  while (_g < 16) {
    var /** @type {number} */ i = _g++;
    m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](i)] = thisMat.rawData[i] + (toMat.rawData[i] - thisMat.rawData[i]) * percent;
  }
  return m;
};


/**
 * @protected
 * @nocollapse
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} degrees
 * @param {flash.geom.Matrix3D=} target
 * @return {flash.geom.Matrix3D}
 */
flash.geom.Matrix3D.getAxisRotation = function(x, y, z, degrees, target) {
  target = typeof target !== 'undefined' ? target : null;
  var /** @type {flash.geom.Matrix3D} */ m = target || new flash.geom.Matrix3D();
  var /** @type {number} */ rad = -degrees * (Math.PI / 180);
  var /** @type {number} */ c = Math.cos(rad);
  var /** @type {number} */ s = Math.sin(rad);
  var /** @type {number} */ t = 1.0 - c;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](0)] = c + x * x * t;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](5)] = c + y * y * t;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](10)] = c + z * z * t;
  var /** @type {number} */ tmp1 = x * y * t;
  var /** @type {number} */ tmp2 = z * s;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](4)] = tmp1 + tmp2;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](1)] = tmp1 - tmp2;
  tmp1 = x * z * t;
  tmp2 = y * s;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](8)] = tmp1 - tmp2;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](2)] = tmp1 + tmp2;
  tmp1 = y * z * t;
  tmp2 = x * s;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](9)] = tmp1 + tmp2;
  m.rawData[m.rawData[org.apache.royale.utils.Language.CHECK_INDEX](6)] = tmp1 - tmp2;
  return m;
};


flash.geom.Matrix3D.prototype.get__determinant = function() {
  return (this.rawData[0] * this.rawData[5] - this.rawData[4] * this.rawData[1]) * (this.rawData[10] * this.rawData[15] - this.rawData[14] * this.rawData[11]) - (this.rawData[0] * this.rawData[9] - this.rawData[8] * this.rawData[1]) * (this.rawData[6] * this.rawData[15] - this.rawData[14] * this.rawData[7]) + (this.rawData[0] * this.rawData[13] - this.rawData[12] * this.rawData[1]) * (this.rawData[6] * this.rawData[11] - this.rawData[10] * this.rawData[7]) + (this.rawData[4] * this.rawData[9] - this.rawData[8] * this.rawData[5]) * (this.rawData[2] * this.rawData[15] - this.rawData[14] * this.rawData[3]) - (this.rawData[4] * this.rawData[13] - this.rawData[12] * this.rawData[5]) * (this.rawData[2] * this.rawData[11] - this.rawData[10] * this.rawData[3]) + (this.rawData[8] * this.rawData[13] - this.rawData[12] * this.rawData[9]) * (this.rawData[2] * this.rawData[7] - this.rawData[6] * this.rawData[3]);
};


flash.geom.Matrix3D.prototype.get__position = function() {
  return new flash.geom.Vector3D(this.rawData[12], this.rawData[13], this.rawData[14]);
};


flash.geom.Matrix3D.prototype.set__position = function(val) {
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](12)] = val.x;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](13)] = val.y;
  this.rawData[this.rawData[org.apache.royale.utils.Language.CHECK_INDEX](14)] = val.z;
};


Object.defineProperties(flash.geom.Matrix3D.prototype, /** @lends {flash.geom.Matrix3D.prototype} */ {
/**
 * @type {number}
 */
determinant: {
get: flash.geom.Matrix3D.prototype.get__determinant},
/**
 * @type {flash.geom.Vector3D}
 */
position: {
get: flash.geom.Matrix3D.prototype.get__position,
set: flash.geom.Matrix3D.prototype.set__position}}
);

flash.geom.Matrix3D.TEMP = new flash.geom.Matrix3D();




/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.geom.Matrix3D.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'Matrix3D', qName: 'flash.geom.Matrix3D', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.geom.Matrix3D.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'rawData': { type: 'Vector.<Number>', get_set: function (/** flash.geom.Matrix3D */ inst, /** * */ v) {return v !== undefined ? inst.rawData = v : inst.rawData;}}
      };
    },
    accessors: function () {
      return {
        'determinant': { type: 'Number', access: 'readonly', declaredBy: 'flash.geom.Matrix3D'},
        'position': { type: 'flash.geom.Vector3D', access: 'readwrite', declaredBy: 'flash.geom.Matrix3D'}
      };
    },
    methods: function () {
      return {
        'Matrix3D': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Vector.<Number>', true ]; }},
        'append': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Matrix3D', false ]; }},
        'appendRotation': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Number', false ,'flash.geom.Vector3D', false ,'flash.geom.Vector3D', true ]; }},
        'appendScale': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'appendTranslation': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'clone': { type: 'flash.geom.Matrix3D', declaredBy: 'flash.geom.Matrix3D'},
        'copyColumnFrom': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'int', false ,'flash.geom.Vector3D', false ]; }},
        'copyColumnTo': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'int', false ,'flash.geom.Vector3D', false ]; }},
        'copyFrom': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Matrix3D', false ]; }},
        'copyRawDataFrom': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Vector.<Number>', false ,'uint', true ,'Boolean', true ]; }},
        'copyRawDataTo': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Vector.<Number>', false ,'uint', true ,'Boolean', true ]; }},
        'copyRowFrom': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'uint', false ,'flash.geom.Vector3D', false ]; }},
        'copyRowTo': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'int', false ,'flash.geom.Vector3D', false ]; }},
        'copyToMatrix3D': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Matrix3D', false ]; }},
        'decompose': { type: 'Vector.<flash.geom.Vector3D>', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'String', true ]; }},
        'deltaTransformVector': { type: 'flash.geom.Vector3D', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Vector3D', false ]; }},
        'identity': { type: 'void', declaredBy: 'flash.geom.Matrix3D'},
        'interpolateTo': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Matrix3D', false ,'Number', false ]; }},
        'invert': { type: 'Boolean', declaredBy: 'flash.geom.Matrix3D'},
        'pointAt': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Vector3D', false ,'flash.geom.Vector3D', true ,'flash.geom.Vector3D', true ]; }},
        'prepend': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Matrix3D', false ]; }},
        'prependRotation': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Number', false ,'flash.geom.Vector3D', false ,'flash.geom.Vector3D', true ]; }},
        'prependScale': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'prependTranslation': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Number', false ,'Number', false ,'Number', false ]; }},
        'recompose': { type: 'Boolean', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Vector.<flash.geom.Vector3D>', false ,'String', true ]; }},
        'transformVector': { type: 'flash.geom.Vector3D', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Vector3D', false ]; }},
        'transformVectors': { type: 'void', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'Vector.<Number>', false ,'Vector.<Number>', false ]; }},
        'transpose': { type: 'void', declaredBy: 'flash.geom.Matrix3D'},
        '|interpolate': { type: 'flash.geom.Matrix3D', declaredBy: 'flash.geom.Matrix3D', parameters: function () { return [ 'flash.geom.Matrix3D', false ,'flash.geom.Matrix3D', false ,'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.geom.Matrix3D.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
flash.geom.Matrix3D.prototype.ROYALE_INITIAL_STATICS = Object.keys(flash.geom.Matrix3D);
