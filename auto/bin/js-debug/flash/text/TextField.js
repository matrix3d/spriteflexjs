/**
 * Generated by Apache Royale Compiler from flash/text/TextField.as
 * flash.text.TextField
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('flash.text.TextField');
/* Royale Dependency List: SpriteFlexjs,flash.__native.GLCanvasRenderingContext2D,flash.__native.GLDrawable,flash.__native.GLIndexBufferSet,flash.__native.WebGLRenderer,flash.__native.te.Char,flash.__native.te.LineInfo,flash.__native.te.UVTexture,flash.display.BitmapData,flash.display.DisplayObject,flash.display.Graphics,flash.display.Sprite,flash.events.Event,flash.events.MouseEvent,flash.geom.Matrix,flash.geom.Point,flash.geom.Rectangle,flash.text.StyleSheet,flash.text.TextFieldAutoSize,flash.text.TextFieldType,flash.text.TextFormat,flash.text.TextLineMetrics,org.apache.royale.utils.Language*/

goog.require('flash.display.InteractiveObject');



/**
 * @constructor
 * @extends {flash.display.InteractiveObject}
 */
flash.text.TextField = function() {
  flash.text.TextField.base(this, 'constructor');
  
  this.flash_text_TextField__type = flash.text.TextFieldType.DYNAMIC;
  this.flash_text_TextField_graphics = new flash.display.Graphics();
  this.flash_text_TextField_lines = [];
  this.flash_text_TextField__textFormat = new flash.text.TextFormat();
  this.flash_text_TextField__autoSize = flash.text.TextFieldAutoSize.NONE;
  this.flash_text_TextField_boundHelpRect = new flash.geom.Rectangle();
  this.flash_text_TextField__cacheImage = new flash.display.BitmapData(1, 1);
  this.tagas = [];
  this.textColor = 0;
  this.addEventListener(flash.events.Event.REMOVED_FROM_STAGE, org.apache.royale.utils.Language.closure(this.flash_text_TextField_removedFromStage, this, 'flash_text_TextField_removedFromStage'));
};
goog.inherits(flash.text.TextField, flash.display.InteractiveObject);


/**
 * @private
 * @type {HTMLInputElement}
 */
flash.text.TextField.prototype.flash_text_TextField_input = null;


/**
 * @private
 * @type {string}
 */
flash.text.TextField.prototype.flash_text_TextField__type = null;


/**
 * @private
 * @type {flash.display.Graphics}
 */
flash.text.TextField.prototype.flash_text_TextField_graphics = null;


/**
 * @private
 * @type {boolean}
 */
flash.text.TextField.prototype.flash_text_TextField_graphicsDirty = true;


/**
 * @private
 * @type {boolean}
 */
flash.text.TextField.prototype.flash_text_TextField_glDirty = false;


/**
 * @private
 * @type {Array}
 */
flash.text.TextField.richTextFields = ["font", "size", "color", "bold", "italic", "underline", "url", "target", "align", "leftMargin", "rightMargin", "indent", "leading", "blockIndent", "kerning", "letterSpacing", "display"];


/**
 * @private
 * @type {string}
 */
flash.text.TextField.prototype.flash_text_TextField__text = "";


/**
 * @private
 * @type {Array}
 */
flash.text.TextField.prototype.flash_text_TextField_lines = null;


/**
 * @private
 * @type {flash.text.TextFormat}
 */
flash.text.TextField.prototype.flash_text_TextField__textFormat = null;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__width = 100;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__height = 100;


/**
 * @private
 * @type {string}
 */
flash.text.TextField.prototype.flash_text_TextField__autoSize = null;


/**
 * @private
 * @type {boolean}
 */
flash.text.TextField.prototype.flash_text_TextField__background = false;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__backgroundColor = 0xffffff;


/**
 * @private
 * @type {boolean}
 */
flash.text.TextField.prototype.flash_text_TextField__border = false;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__borderColor = 0;


/**
 * @private
 * @type {flash.geom.Rectangle}
 */
flash.text.TextField.prototype.flash_text_TextField_boundHelpRect = null;


/**
 * @private
 * @type {flash.geom.Rectangle}
 */
flash.text.TextField.prototype.flash_text_TextField__fullBounds = null;


/**
 * @private
 * @type {HTMLCanvasElement}
 */
flash.text.TextField.prototype.flash_text_TextField__cacheCanvas = null;


/**
 * @private
 * @type {CanvasRenderingContext2D}
 */
flash.text.TextField.prototype.flash_text_TextField__cacheCTX = null;


/**
 * @private
 * @type {flash.display.BitmapData}
 */
flash.text.TextField.prototype.flash_text_TextField__cacheImage = null;


/**
 * @private
 * @type {flash.geom.Matrix}
 */
flash.text.TextField.prototype.flash_text_TextField__cacheMatrix = null;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__cacheOffsetX = 0;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__cacheOffsetY = 0;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__filterOffsetX = 0;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField__filterOffsetY = 0;


/**
 * @type {Array}
 */
flash.text.TextField.prototype.chars = null;


/**
 * @private
 * @type {Object}
 */
flash.text.TextField.indexPool = {};


/**
 * @private
 * @type {Object}
 */
flash.text.TextField.DRAWABLE_POOL = {};


/**
 * @private
 * @type {flash.__native.GLDrawable}
 */
flash.text.TextField.prototype.flash_text_TextField_da = null;


/**
 * @private
 * @type {flash.__native.GLIndexBufferSet}
 */
flash.text.TextField.prototype.flash_text_TextField_indexBufferSet = null;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField_nowKey = 0;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField_num = 0;


/**
 * @private
 * @type {number}
 */
flash.text.TextField.prototype.flash_text_TextField_charVersion = 1;


/**
 * @type {flash.display.Sprite}
 */
flash.text.TextField.prototype.disWrapper = null;


/**
 * @type {number}
 */
flash.text.TextField.prototype._textWidth = -1;


/**
 * @type {number}
 */
flash.text.TextField.prototype._textHeight = -1;


/**
 * @private
 * @type {boolean}
 */
flash.text.TextField.prototype.flash_text_TextField__wordWrap = false;


/**
 * @private
 * @type {Array}
 */
flash.text.TextField.lineInfos = [];


/**
 * @type {boolean}
 */
flash.text.TextField.prototype.hasATag = false;


/**
 * @type {Array}
 */
flash.text.TextField.prototype.tagas = null;


/**
 * @private
 * @type {string}
 */
flash.text.TextField.prototype.flash_text_TextField_href = null;


/**
 * @private
 * @type {string}
 */
flash.text.TextField.prototype.flash_text_TextField__htmlText = null;


/**
 * @private
 * @param {flash.events.Event} e
 */
flash.text.TextField.prototype.flash_text_TextField_removedFromStage = function(e) {
  if (this.flash_text_TextField_input && this.flash_text_TextField_input.parentElement) {
    this.flash_text_TextField_input.parentElement.removeChild(this.flash_text_TextField_input);
  }
};


/**
 * @nocollapse
 * @param {string} param1
 * @param {string} param2
 * @return {boolean}
 */
flash.text.TextField.isFontCompatible = function(param1, param2) {
  return false;
};


/**
 * @private
 * @param {Node} xml
 * @param {string} font
 * @param {number} size
 * @param {number} color
 * @param {string} href
 * @param {number} indent
 * @param {number} underline
 */
flash.text.TextField.prototype.flash_text_TextField_doXML = function(xml, font, size, color, href, indent, underline) {
  this.flash_text_TextField_href = href;
  if (xml == null) {
    return;
  }
  var /** @type {string} */ l = xml.localName;
  if (l === "br") {
    var /** @type {string} */ txt = "\n";
  } else if (xml.nodeType === 3) {
    txt = xml.nodeValue.replace(/&nbsp;/g, " ");
    txt = txt.replace(/\uFFA0/g, " ");
  }
  if (xml.attributes) {
    if (l === "font") {
      if (xml.attributes.getNamedItem("face")) {
        font = xml.attributes.getNamedItem("face").nodeValue;
      }
      if (xml.attributes.getNamedItem("size")) {
        size = (Number(xml.attributes.getNamedItem("size").nodeValue)) >> 0;
      }
      if (xml.attributes.getNamedItem("color")) {
        color = (parseInt(xml.attributes.getNamedItem("color").nodeValue.replace("#", ""), 16)) >>> 0;
      }
    } else if (l === "a") {
      if (xml.attributes.getNamedItem("href")) {
        this.hasATag = true;
        href = xml.attributes.getNamedItem("href").nodeValue;
        this.flash_text_TextField_href = href;
      }
    } else if (l === "img") {
      if (xml.attributes.getNamedItem("src")) {
        var /** @type {string} */ imgsrc = xml.attributes.getNamedItem("src").nodeValue;
        if (xml.attributes.getNamedItem("width")) {
          var /** @type {number} */ imgwidth = parseFloat(xml.attributes.getNamedItem("width").nodeValue);
        }
      }
    } else if (l === "textformat") {
      if (xml.attributes.getNamedItem("indent")) {
        indent = (Number(xml.attributes.getNamedItem("@indent").nodeValue)) >> 0;
      }
    }
  }
  if (l === "u") {
    underline = 1;
  }
  this.flash_text_TextField__textFormat.font = font ? font.toLowerCase() : font;
  this.flash_text_TextField__textFormat.size = size;
  this.flash_text_TextField__textFormat.color = color;
  this.flash_text_TextField__textFormat.indent = indent;
  this.flash_text_TextField__textFormat.underline = underline;
  if (imgsrc) {
  }{}
  
  if (txt && txt.length > 0) {
    this.appendText(txt);
  }
  if (xml.childNodes) {
    for (var /** @type {number} */ i = 0; i < xml.childNodes.length; i++) {
      this.flash_text_TextField_doXML(/* implicit cast */ org.apache.royale.utils.Language.as(xml.childNodes[i], Node, true), font, size, color, href, indent, underline);
    }
  }
};


/**
 * @param {string} value
 */
flash.text.TextField.prototype.appendText = function(value) {
  SpriteFlexjs.dirtyGraphics = true;
  this.flash_text_TextField_graphicsDirty = true;
  if (this.flash_text_TextField__text != null) {
    this.flash_text_TextField__text += value;
  } else {
    this.flash_text_TextField__text = value;
  }
  if (this.flash_text_TextField__text && this.flash_text_TextField__text.length > 0 && org.apache.royale.utils.Language.is(SpriteFlexjs.renderer, flash.__native.WebGLRenderer)) {
    this.flash_text_TextField_glDirty = true;
    var /** @type {number} */ tl = (value.length) >> 0;
    this.chars = this.chars || [];
    for (var /** @type {number} */ i = 0; i < tl; i++) {
      var /** @type {flash.__native.te.Char} */ c = new flash.__native.te.Char(value.charAt(i), this.flash_text_TextField__textFormat.size, this.flash_text_TextField__textFormat.font, this.flash_text_TextField__textFormat.color);
      this.chars.push(c);
      flash.__native.WebGLRenderer.textCharSet.add(c);
    }
  } else {
    this.flash_text_TextField_lines = this.flash_text_TextField_lines || [];
    this.flash_text_TextField_lines = this.flash_text_TextField_lines.concat(value.split("\n"));
  }
};


/**
 * @private
 * @param {number} key
 * @param {flash.__native.GLDrawable} da
 */
flash.text.TextField.PUSH_POOL = function(key, da) {
  var /** @type {Array} */ arr = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.DRAWABLE_POOL[key], Array, true);
  if (arr == null) {
    arr = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.DRAWABLE_POOL[key] = [], Array, true);
  }
  arr.push(da);
};


/**
 * @private
 * @param {number} pow2num
 * @return {flash.__native.GLDrawable}
 */
flash.text.TextField.POP_POOL = function(pow2num) {
  var /** @type {Array} */ arr = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.DRAWABLE_POOL[pow2num], Array, true);
  if (arr == null) {
    arr = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.DRAWABLE_POOL[pow2num] = [], Array, true);
  }
  if (arr.length == 0) {
    var /** @type {flash.__native.GLDrawable} */ da = new flash.__native.GLDrawable(new Float32Array(pow2num * 8), new Float32Array(pow2num * 8), null, WebGLRenderingContext.DYNAMIC_DRAW);
    return da;
  }
  return /* implicit cast */ org.apache.royale.utils.Language.as(arr.pop(), flash.__native.GLDrawable, true);
};


/**
 * @private
 */
flash.text.TextField.prototype.flash_text_TextField___updateBuff = function() {
  if (this.flash_text_TextField_glDirty && this.chars && this.chars.length > 0) {
    var /** @type {number} */ currentLineNum = -1;
    this.flash_text_TextField_num = 0;
    this.flash_text_TextField_charVersion++;
    var /** @type {number} */ clen = 1;
    for (var /** @type {number} */ i = 0; i < clen; i++) {
      var /** @type {flash.text.TextField} */ line = this;
      if (line.disWrapper) {
        while (line.disWrapper.numChildren > 0) {
          line.disWrapper.removeChildAt(0);
        }
      }
      line._textWidth = 0;
      var /** @type {number} */ startLineNum = (currentLineNum + 1) >> 0;
      var /** @type {Array} */ cs = line.chars;
      if (cs && line.chars.length) {
        currentLineNum++;
        var /** @type {flash.__native.te.LineInfo} */ lineInfo = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.lineInfos[currentLineNum] = flash.text.TextField.lineInfos[currentLineNum] || new flash.__native.te.LineInfo(), flash.__native.te.LineInfo, true);
        lineInfo.maxFontSize = 0;
        var /** @type {number} */ tx = 2;
        var /** @type {number} */ ty = 2;
        lineInfo.offsetY = ty;
        var /** @type {number} */ tlen = (line.chars.length) >> 0;
        for (var /** @type {number} */ j = 0; j < tlen; j++) {
          var /** @type {flash.__native.te.Char} */ txt = /* implicit cast */ org.apache.royale.utils.Language.as(cs[j], flash.__native.te.Char, true);
          txt.lineInfo = lineInfo;
          var /** @type {flash.__native.te.UVTexture} */ char = txt.texture;
          if (char.u0 == -1) {
            return;
          }
          var /** @type {number} */ tscale = txt.size / char.fontSize;
          if (txt.v == "\n") {
            tx = 2;
            ty += (lineInfo.maxFontSize + txt.leading) >> 0;
            currentLineNum++;
            if (lineInfo && line._textWidth < lineInfo.width) {
              line._textWidth = lineInfo.width;
            }
            lineInfo = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.lineInfos[currentLineNum] = flash.text.TextField.lineInfos[currentLineNum] || new flash.__native.te.LineInfo(), flash.__native.te.LineInfo, true);
            lineInfo.maxFontSize = 0;
            lineInfo.width = 0;
            lineInfo.offsetY = ty;
            continue;
          } else if (txt.v == "") {
            org.apache.royale.utils.Language.trace("img");
          }
          if (line.wordWrap) {
            if ((tx + char.width * tscale) > line.flash_text_TextField__width) {
              tx = 2;
              ty += (lineInfo.maxFontSize + txt.leading) >> 0;
              currentLineNum++;
              if (lineInfo && line._textWidth < lineInfo.width) {
                line._textWidth = lineInfo.width;
              }
              lineInfo = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.lineInfos[currentLineNum] = flash.text.TextField.lineInfos[currentLineNum] || new flash.__native.te.LineInfo(), flash.__native.te.LineInfo, true);
              lineInfo.maxFontSize = 0;
              lineInfo.width = 0;
              lineInfo.offsetY = ty;
            }
          } else {
            if (line.autoSize == flash.text.TextFieldAutoSize.NONE) {
              if ((tx + char.width * tscale) > line.flash_text_TextField__width) {
                continue;
              }
            }
          }
          if (lineInfo.maxFontSize < txt.size) {
            lineInfo.maxFontSize = txt.size;
          }
          txt.charVersion = this.flash_text_TextField_charVersion;
          txt.lineInfo = lineInfo;
          txt.x0 = tx;
          lineInfo.width = (txt.x1 = tx + char.width * tscale) >> 0;
          txt.y0 = ty - txt.size;
          txt.y1 = txt.y0 + char.height * tscale;
          tx += (char.xadvance * tscale) >> 0;
          this.flash_text_TextField_num++;
          if (txt.underline) {
            this.flash_text_TextField_num++;
          }
        }
        line._textHeight = (ty + lineInfo.maxFontSize) >> 0;
        if (lineInfo && line._textWidth < lineInfo.width) {
          line._textWidth = lineInfo.width;
        }
        for (j = startLineNum; j <= currentLineNum; j++) {
          lineInfo = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.lineInfos[j], flash.__native.te.LineInfo, true);
          if (line.autoSize == flash.text.TextFieldAutoSize.CENTER) {
            lineInfo.offsetX = (line.flash_text_TextField__width / 2 - lineInfo.width / 2) >> 0;
          } else if (line.autoSize == flash.text.TextFieldAutoSize.RIGHT) {
            lineInfo.offsetX = (line.flash_text_TextField__width - lineInfo.width) >> 0;
          } else {
            lineInfo.offsetX = 0;
          }
        }
        if (line.autoSize == flash.text.TextFieldAutoSize.NONE && line._textHeight > line.flash_text_TextField__height) {
          var /** @type {number} */ offsetY = (line.flash_text_TextField__height - line._textHeight) * line.scrollV;
          for (j = 0; j < tlen; j++) {
            txt = /* implicit cast */ org.apache.royale.utils.Language.as(cs[j], flash.__native.te.Char, true);
            lineInfo = txt.lineInfo;
            if (txt.charVersion == this.flash_text_TextField_charVersion) {
              if ((txt.y0 + offsetY + lineInfo.maxFontSize) < 0 || (txt.y0 + offsetY + lineInfo.maxFontSize) > line.flash_text_TextField__height) {
                this.flash_text_TextField_num--;
                if (txt.underline) {
                  this.flash_text_TextField_num--;
                }
                txt.charVersion--;
              }
            }
          }
        }
      }
    }
    var /** @type {number} */ pow2num = this.flash_text_TextField_getNextPow2(this.flash_text_TextField_num);
    if (this.flash_text_TextField_da == null) {
      this.flash_text_TextField_nowKey = pow2num;
      this.flash_text_TextField_da = flash.text.TextField.POP_POOL(pow2num);
    } else if (this.flash_text_TextField_nowKey != pow2num) {
      flash.text.TextField.PUSH_POOL(this.flash_text_TextField_nowKey, this.flash_text_TextField_da);
      this.flash_text_TextField_da = flash.text.TextField.POP_POOL(pow2num);
      this.flash_text_TextField_nowKey = pow2num;
    }
    this.flash_text_TextField_indexBufferSet = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.indexPool[pow2num], flash.__native.GLIndexBufferSet, true);
    var /** @type {boolean} */ needNew = this.flash_text_TextField_indexBufferSet == null;
    if (needNew) {
      this.flash_text_TextField_indexBufferSet = /* implicit cast */ org.apache.royale.utils.Language.as(flash.text.TextField.indexPool[pow2num] = new flash.__native.GLIndexBufferSet(new Uint16Array(pow2num * 6), WebGLRenderingContext.STATIC_DRAW), flash.__native.GLIndexBufferSet, true);
      var /** @type {Uint16Array} */ indexd = this.flash_text_TextField_indexBufferSet.data;
      for (i = 0; i < pow2num; i++) {
        indexd[i * 6] = i * 4;
        indexd[i * 6 + 1] = indexd[i * 6 + 3] = i * 4 + 2;
        indexd[i * 6 + 2] = indexd[i * 6 + 4] = i * 4 + 1;
        indexd[i * 6 + 5] = i * 4 + 3;
      }
    }
    this.flash_text_TextField_da.pos.dirty = true;
    this.flash_text_TextField_da.color.dirty = true;
    this.flash_text_TextField_da.uv.dirty = true;
    var /** @type {Float32Array} */ posd = this.flash_text_TextField_da.pos.data;
    var /** @type {Uint32Array} */ colord = this.flash_text_TextField_da.color.data;
    var /** @type {Float32Array} */ uvd = this.flash_text_TextField_da.uv.data;
    var /** @type {number} */ k = 0;
    for (i = 0; i < clen; i++) {
      line = this;
      var /** @type {number} */ alpha = 1;
      cs = line.chars;
      if (cs && cs.length) {
        tlen = (cs.length) >> 0;
        offsetY = (line.flash_text_TextField__height - line._textHeight) * line.scrollV;
        if (offsetY > 0) {
          offsetY = 0;
        }
        for (j = 0; j < tlen; j++) {
          txt = /* implicit cast */ org.apache.royale.utils.Language.as(cs[j], flash.__native.te.Char, true);
          if (txt.charVersion != this.flash_text_TextField_charVersion) {
            continue;
          }
          char = txt.texture;
          var /** @type {number} */ maxFontSize = (txt.lineInfo.maxFontSize + offsetY) >> 0;
          var /** @type {number} */ offsetX = txt.lineInfo.offsetX;
          posd[k * 8] = posd[k * 8 + 4] = txt.x0 + offsetX;
          posd[k * 8 + 1] = posd[k * 8 + 3] = txt.y0 + maxFontSize;
          posd[k * 8 + 2] = posd[k * 8 + 6] = txt.x1 + offsetX;
          posd[k * 8 + 5] = posd[k * 8 + 7] = txt.y1 + maxFontSize;
          uvd[k * 8] = uvd[k * 8 + 4] = char.u0;
          uvd[k * 8 + 1] = uvd[k * 8 + 3] = char.v0;
          uvd[k * 8 + 2] = uvd[k * 8 + 6] = char.u1;
          uvd[k * 8 + 5] = uvd[k * 8 + 7] = char.v1;
          var /** @type {number} */ color = (0xff000000 | txt.bgr) >>> 0;
          colord[k * 4] = color;
          colord[k * 4 + 1] = color;
          colord[k * 4 + 2] = color;
          colord[k * 4 + 3] = color;
          k++;
        }
      }
    }
    this.flash_text_TextField_glDirty = false;
  }
};


/**
 * @param {flash.__native.GLCanvasRenderingContext2D} ctx
 */
flash.text.TextField.prototype.__updateGL = function(ctx) {
  if (this.chars && this.chars.length > 0) {
    this.flash_text_TextField___updateBuff();
    if (this.flash_text_TextField_num > 0) {
      this.flash_text_TextField_da.index = this.flash_text_TextField_indexBufferSet;
      this.flash_text_TextField_da.numTriangles = (this.flash_text_TextField_num * 2) >> 0;
      ctx.renderImage(flash.__native.WebGLRenderer.textCharSet.image, this.flash_text_TextField_da, this.transform.concatenatedMatrix, null, false, false, true);
    }
  }
};


/**
 * @private
 * @param {flash.events.Event} e
 */
flash.text.TextField.prototype.flash_text_TextField_input_change = function(e) {
  this.text = this.flash_text_TextField_input.value;
};


/**
 * @override
 */
flash.text.TextField.prototype.getBounds = function(v) {
  var /** @type {flash.geom.Rectangle} */ bounds = new flash.geom.Rectangle(0, 0, this.textWidth, this.textHeight);
  if (this.border || this.background)
    bounds.inflate(4, 4);
  return bounds;
};


/**
 * @override
 */
flash.text.TextField.prototype.getFullBounds = function(v) {
  var /** @type {flash.geom.Rectangle} */ bounds = new flash.geom.Rectangle(0, 0, this.width, this.height);
  if (this.border || this.background)
    bounds.inflate(3.5, 3);
  var /** @type {number} */ radians = this.rotation * (Math.PI / 180);
  var /** @type {number} */ w = Math.round((bounds.height * Math.sin(radians) + bounds.width * Math.cos(radians)) * 10) / 10;
  var /** @type {number} */ h = Math.round((bounds.height * Math.cos(radians) + bounds.width * Math.sin(radians)) * 10) / 10;
  w = (w > bounds.width) ? w - bounds.width : 0;
  h = (h > bounds.height) ? h - bounds.width : 0;
  bounds.inflate(w / 2, h / 2);
  this.flash_text_TextField__fullBounds = bounds.clone();
  return bounds;
};


/**
 * @param {number} param1
 * @return {flash.geom.Rectangle}
 */
flash.text.TextField.prototype.getCharBoundaries = function(param1) {
  return null;
};


/**
 * @param {number} param1
 * @param {number} param2
 * @return {number}
 */
flash.text.TextField.prototype.getCharIndexAtPoint = function(param1, param2) {
  return 0;
};


/**
 * @private
 * @param {number} param1
 * @param {number} param2
 * @return {number}
 */
flash.text.TextField.prototype.flash_text_TextField_getCharIndexNearestPoint = function(param1, param2) {
  return 0;
};


/**
 * @param {number} param1
 * @return {number}
 */
flash.text.TextField.prototype.getFirstCharInParagraph = function(param1) {
  return 0;
};


/**
 * @param {number} param1
 * @param {number} param2
 * @return {number}
 */
flash.text.TextField.prototype.getLineIndexAtPoint = function(param1, param2) {
  return 0;
};


/**
 * @param {number} param1
 * @return {number}
 */
flash.text.TextField.prototype.getLineIndexOfChar = function(param1) {
  return 0;
};


/**
 * @param {number} param1
 * @return {number}
 */
flash.text.TextField.prototype.getLineLength = function(param1) {
  return 0;
};


/**
 * @param {number} param1
 * @return {flash.text.TextLineMetrics}
 */
flash.text.TextField.prototype.getLineMetrics = function(param1) {
  return null;
};


/**
 * @param {number} param1
 * @return {number}
 */
flash.text.TextField.prototype.getLineOffset = function(param1) {
  return 0;
};


/**
 * @param {number} param1
 * @return {string}
 */
flash.text.TextField.prototype.getLineText = function(param1) {
  return null;
};


/**
 * @param {number} param1
 * @return {number}
 */
flash.text.TextField.prototype.getParagraphLength = function(param1) {
  return 0;
};


/**
 * @param {number=} param1
 * @param {number=} param2
 * @return {flash.text.TextFormat}
 */
flash.text.TextField.prototype.getTextFormat = function(param1, param2) {
  param1 = typeof param1 !== 'undefined' ? param1 : -1;
  param2 = typeof param2 !== 'undefined' ? param2 : -1;
  return this.flash_text_TextField__textFormat;
};


/**
 * @param {number=} param1
 * @param {number=} param2
 * @return {Array}
 */
flash.text.TextField.prototype.getTextRuns = function(param1, param2) {
  param1 = typeof param1 !== 'undefined' ? param1 : 0;
  param2 = typeof param2 !== 'undefined' ? param2 : 2147483647;
  return null;
};


/**
 * @return {string}
 */
flash.text.TextField.prototype.getRawText = function() {
  return null;
};


/**
 * @param {string} param1
 */
flash.text.TextField.prototype.replaceSelectedText = function(param1) {
};


/**
 * @param {number} beginIndex
 * @param {number} endIndex
 * @param {string} newText
 */
flash.text.TextField.prototype.replaceText = function(beginIndex, endIndex, newText) {
  this.text = this.flash_text_TextField__text.substr(0, beginIndex) + newText + this.flash_text_TextField__text.substr(endIndex);
};


/**
 * @param {number} param1
 * @param {number} param2
 */
flash.text.TextField.prototype.setSelection = function(param1, param2) {
};


/**
 * @param {flash.text.TextFormat} param1
 * @param {number=} param2
 * @param {number=} param3
 */
flash.text.TextField.prototype.setTextFormat = function(param1, param2, param3) {
  param2 = typeof param2 !== 'undefined' ? param2 : -1;
  param3 = typeof param3 !== 'undefined' ? param3 : -1;
  this.flash_text_TextField__textFormat = param1;
};


/**
 * @param {string} param1
 * @return {flash.display.DisplayObject}
 */
flash.text.TextField.prototype.getImageReference = function(param1) {
  return null;
};


/**
 * @override
 */
flash.text.TextField.prototype.__update = function(ctx) {
  flash.text.TextField.superClass_.__update.apply(this, [ ctx] );
  if (this.flash_text_TextField__text != null && this.visible) {
    SpriteFlexjs.renderer.renderRichText(ctx, this);
    SpriteFlexjs.drawCounter++;
  }
};


/**
 * @param {CanvasRenderingContext2D} ctx
 */
flash.text.TextField.prototype.__updateCanvas = function(ctx) {
  if (this.filters.length && !this.cacheAsBitmap && !this.parent.cacheAsBitmap)
    this.cacheAsBitmap = true;
  if (this.cacheAsBitmap && !this.parent.cacheAsBitmap && this.flash_text_TextField__type != flash.text.TextFieldType.INPUT) {
    SpriteFlexjs.renderer.renderImage(ctx, this.flash_text_TextField__cacheImage, this.transform.concatenatedMatrix, this.blendMode, this.transform.concatenatedColorTransform, -this.x - this.flash_text_TextField__cacheOffsetX, -this.y - this.flash_text_TextField__cacheOffsetY);
  } else {
    this.__draw(ctx, this.transform.concatenatedMatrix);
  }
};


/**
 * @param {CanvasRenderingContext2D} ctx
 * @param {flash.geom.Matrix} m
 */
flash.text.TextField.prototype.__draw = function(ctx, m) {
  if ((this.flash_text_TextField__border || this.flash_text_TextField__background) && !this.cacheAsBitmap) {
    if (this.flash_text_TextField_graphicsDirty) {
      this.flash_text_TextField_graphicsDirty = false;
      this.flash_text_TextField_graphics.clear();
      if (this.border)
        this.flash_text_TextField_graphics.lineStyle(0, this.borderColor);
      if (this.background)
        this.flash_text_TextField_graphics.beginFill(this.backgroundColor);
      this.flash_text_TextField_graphics.drawRect(-2, 0, this.width + 4, this.height + 2);
    }
    SpriteFlexjs.renderer.renderGraphics(ctx, this.flash_text_TextField_graphics, m, this.blendMode, this.transform.concatenatedColorTransform);
    this.ApplyFilters(ctx);
  }
  if (this.type == flash.text.TextFieldType.DYNAMIC) {
    if (!this.flash_text_TextField__background)
      this.ApplyFilters(ctx, true, true);
    for (var /** @type {number} */ i = 0; i < this.flash_text_TextField_lines.length; i++) {
      SpriteFlexjs.renderer.renderText(ctx, org.apache.royale.utils.Language.string(this.flash_text_TextField_lines[i]), this.defaultTextFormat, m, this.blendMode, this.transform.concatenatedColorTransform, 0, i * org.apache.royale.utils.Language._int(this.defaultTextFormat.size));
    }
    if (!this.flash_text_TextField__background)
      this.ApplyFilters(ctx, true, false, true);
  } else {
    this.flash_text_TextField_input.style.left = m.tx + "px";
    this.flash_text_TextField_input.style.top = m.ty + "px";
    this.flash_text_TextField_input.style.width = this.width + "px";
    this.flash_text_TextField_input.style.height = this.height + "px";
    this.flash_text_TextField_input.style.fontFamily = this.defaultTextFormat.font;
    this.flash_text_TextField_input.style.fontSize = this.defaultTextFormat.size + "px";
    this.flash_text_TextField_input.style.color = this.defaultTextFormat.csscolor;
    if (this.flash_text_TextField_input.value != this.text)
      this.flash_text_TextField_input.value = this.text;
    if (this.flash_text_TextField_input.parentElement == null) {
      this.stage.__htmlWrapper.appendChild(this.flash_text_TextField_input);
    }
  }
};


/**
 * @protected
 * @override
 */
flash.text.TextField.prototype.__doMouse = function(e) {
  if (this.mouseEnabled && this.visible) {
    if (this.hitTestPoint(this.stage.mouseX, this.stage.mouseY)) {
      return this;
    }
  }
  return null;
};


/**
 * @override
 */
flash.text.TextField.prototype.hitTestPoint = function(x, y, shapeFlag) {
  shapeFlag = typeof shapeFlag !== 'undefined' ? shapeFlag : false;
  var /** @type {flash.geom.Rectangle} */ rect = this.__getRect();
  if (rect)
    return rect.containsPoint(this.globalToLocal(new flash.geom.Point(x, y)));
  return false;
};


/**
 * @override
 */
flash.text.TextField.prototype.__getRect = function() {
  if (this.text && this.text != "") {
    this.flash_text_TextField_boundHelpRect.width = this.width;
    this.flash_text_TextField_boundHelpRect.height = this.height;
    return this.flash_text_TextField_boundHelpRect;
  }
  return null;
};


/**
 * @private
 * @param {number} v
 * @return {number}
 */
flash.text.TextField.prototype.flash_text_TextField_getNextPow2 = function(v) {
  var /** @type {number} */ r = 1;
  while (r < v) {
    r *= 2;
  }
  return r;
};


/**
 * @private
 * @param {string} markup
 * @return {HTMLDocument}
 */
flash.text.TextField.prototype.flash_text_TextField_parseFromString = function(markup) {
  return new DOMParser().parseFromString(markup, "text/html");
};


flash.text.TextField.prototype.get__alwaysShowSelection = function() {
  return false;
};


flash.text.TextField.prototype.set__alwaysShowSelection = function(param1) {
};


flash.text.TextField.prototype.get__antiAliasType = function() {
  return null;
};


flash.text.TextField.prototype.set__antiAliasType = function(param1) {
};


flash.text.TextField.prototype.get__autoSize = function() {
  return this.flash_text_TextField__autoSize;
};


flash.text.TextField.prototype.set__autoSize = function(param1) {
  this.flash_text_TextField__autoSize = param1;
  this.flash_text_TextField_graphicsDirty = true;
  SpriteFlexjs.dirtyGraphics = true;
};


flash.text.TextField.prototype.get__background = function() {
  return this.flash_text_TextField__background;
};


flash.text.TextField.prototype.set__background = function(param1) {
  this.flash_text_TextField__background = param1;
  this.flash_text_TextField_graphicsDirty = true;
  SpriteFlexjs.dirtyGraphics = true;
};


flash.text.TextField.prototype.get__backgroundColor = function() {
  return this.flash_text_TextField__backgroundColor;
};


flash.text.TextField.prototype.set__backgroundColor = function(param1) {
  this.flash_text_TextField__backgroundColor = param1;
  this.flash_text_TextField_graphicsDirty = true;
  SpriteFlexjs.dirtyGraphics = true;
};


flash.text.TextField.prototype.get__border = function() {
  return this.flash_text_TextField__border;
};


flash.text.TextField.prototype.set__border = function(param1) {
  this.flash_text_TextField__border = param1;
  this.flash_text_TextField_graphicsDirty = true;
  SpriteFlexjs.dirtyGraphics = true;
};


flash.text.TextField.prototype.get__borderColor = function() {
  return this.flash_text_TextField__borderColor;
};


flash.text.TextField.prototype.set__borderColor = function(param1) {
  this.flash_text_TextField__borderColor = param1;
  this.flash_text_TextField_graphicsDirty = true;
  SpriteFlexjs.dirtyGraphics = true;
};


flash.text.TextField.prototype.get__bottomScrollV = function() {
  return 0;
};


flash.text.TextField.prototype.get__caretIndex = function() {
  return 0;
};


flash.text.TextField.prototype.get__condenseWhite = function() {
  return false;
};


flash.text.TextField.prototype.set__condenseWhite = function(param1) {
};


flash.text.TextField.prototype.get__defaultTextFormat = function() {
  return this.flash_text_TextField__textFormat;
};


flash.text.TextField.prototype.set__defaultTextFormat = function(param1) {
  this.flash_text_TextField__textFormat = param1;
  this.flash_text_TextField_graphicsDirty = true;
  SpriteFlexjs.dirtyGraphics = true;
};


flash.text.TextField.prototype.get__embedFonts = function() {
  return false;
};


flash.text.TextField.prototype.set__embedFonts = function(param1) {
};


flash.text.TextField.prototype.get__gridFitType = function() {
  return null;
};


flash.text.TextField.prototype.set__gridFitType = function(param1) {
};


flash.text.TextField.prototype.get__length = function() {
  return 0;
};


flash.text.TextField.prototype.get__textInteractionMode = function() {
  return null;
};


flash.text.TextField.prototype.get__maxChars = function() {
  return 0;
};


flash.text.TextField.prototype.set__maxChars = function(param1) {
};


flash.text.TextField.prototype.get__maxScrollH = function() {
  return 0;
};


flash.text.TextField.prototype.get__maxScrollV = function() {
  return 0;
};


flash.text.TextField.prototype.get__mouseWheelEnabled = function() {
  return false;
};


flash.text.TextField.prototype.set__mouseWheelEnabled = function(param1) {
};


flash.text.TextField.prototype.get__multiline = function() {
  return false;
};


flash.text.TextField.prototype.set__multiline = function(param1) {
};


flash.text.TextField.prototype.get__numLines = function() {
  return 0;
};


flash.text.TextField.prototype.get__displayAsPassword = function() {
  return false;
};


flash.text.TextField.prototype.set__displayAsPassword = function(param1) {
};


flash.text.TextField.prototype.get__restrict = function() {
  return null;
};


flash.text.TextField.prototype.set__restrict = function(param1) {
};


flash.text.TextField.prototype.get__scrollH = function() {
  return 0;
};


flash.text.TextField.prototype.set__scrollH = function(param1) {
};


flash.text.TextField.prototype.get__scrollV = function() {
  return 0;
};


flash.text.TextField.prototype.set__scrollV = function(param1) {
};


flash.text.TextField.prototype.get__selectable = function() {
  return false;
};


flash.text.TextField.prototype.set__selectable = function(param1) {
};


flash.text.TextField.prototype.get__selectedText = function() {
  return this.text.substring(this.selectionBeginIndex, this.selectionEndIndex);
};


flash.text.TextField.prototype.get__selectionBeginIndex = function() {
  return 0;
};


flash.text.TextField.prototype.get__selectionEndIndex = function() {
  return 0;
};


flash.text.TextField.prototype.get__sharpness = function() {
  return 0;
};


flash.text.TextField.prototype.set__sharpness = function(param1) {
};


flash.text.TextField.prototype.get__styleSheet = function() {
  return null;
};


flash.text.TextField.prototype.set__styleSheet = function(param1) {
};


flash.text.TextField.prototype.get__htmlText = function() {
  return null;
};


flash.text.TextField.prototype.set__htmlText = function(value) {
  this.hasATag = false;
  this.flash_text_TextField_glDirty = true;
  if (value != null) {
    this.tagas = [];
    this.flash_text_TextField__text = "";
    value = value.replace(/\\u000a/g, "<br/>").replace(/\u000a/g, "<br/>").replace(/<br>/g, "<br/>");
    this.flash_text_TextField__htmlText = value;
    try {
      var /** @type {DOMParser} */ xmllist = new DOMParser();
      var /** @type {HTMLDocument} */ hd = this.flash_text_TextField_parseFromString(value);
      for (var /** @type {number} */ i = 0; i < hd.body.childNodes.length; i++) {
        this.flash_text_TextField_doXML(/* implicit cast */ org.apache.royale.utils.Language.as(hd.body.childNodes[i], Node, true), this.flash_text_TextField__textFormat.font, org.apache.royale.utils.Language._int(this.flash_text_TextField__textFormat.size), (org.apache.royale.utils.Language._int(this.flash_text_TextField__textFormat.color)) >>> 0, null, org.apache.royale.utils.Language._int(this.flash_text_TextField__textFormat.indent), org.apache.royale.utils.Language._int(this.flash_text_TextField__textFormat.underline));
      }
    } catch (err) {
      this.text = value;
    }
  }
};


flash.text.TextField.prototype.get__text = function() {
  return this.flash_text_TextField__text;
};


flash.text.TextField.prototype.set__text = function(value) {
  if (value === null) {
    value = "";
  }
  if (this.flash_text_TextField__text === value) {
    return;
  }
  this.hasATag = false;
  this.chars = null;
  this.flash_text_TextField_lines = null;
  this.appendText(value);
};


flash.text.TextField.prototype.get__textColor = function() {
  return (org.apache.royale.utils.Language._int(this.flash_text_TextField__textFormat.color)) >>> 0;
};


flash.text.TextField.prototype.set__textColor = function(color) {
  this.flash_text_TextField__textFormat.color = color;
  this.flash_text_TextField_graphicsDirty = true;
  SpriteFlexjs.dirtyGraphics = true;
};


flash.text.TextField.prototype.get__textHeight = function() {
  return org.apache.royale.utils.Language._int(this.defaultTextFormat.size);
  this.flash_text_TextField___updateBuff();
  if (this._textHeight != -1) {
    return this._textHeight;
  }
  return this.flash_text_TextField_lines ? org.apache.royale.utils.Language._int(this.defaultTextFormat.size) * this.flash_text_TextField_lines.length : 0;
};


flash.text.TextField.prototype.get__textWidth = function() {
  if (this.text) {
    return this.text.length * org.apache.royale.utils.Language._int(this.defaultTextFormat.size) / 2;
  }
  return 4;
  this.flash_text_TextField___updateBuff();
  if (this._textWidth != -1) {
    return this._textWidth;
  }
  if (this.stage && this.flash_text_TextField_lines) {
    var /** @type {CanvasRenderingContext2D} */ ctx = this.stage.ctx2d;
    ctx.font = this.defaultTextFormat.css;
    var /** @type {number} */ w = 0;
    for (var /** @type {number} */ i = 0; i < this.flash_text_TextField_lines.length; i++) {
      var /** @type {number} */ w2 = (ctx.measureText(org.apache.royale.utils.Language.string(this.flash_text_TextField_lines[i])).width) >> 0;
      if (w2 > w) {
        w = w2;
      }
    }
    return w;
  }
  return 0;
};


flash.text.TextField.prototype.get__thickness = function() {
  return 0;
};


flash.text.TextField.prototype.set__thickness = function(param1) {
};


flash.text.TextField.prototype.get__type = function() {
  return this.flash_text_TextField__type;
};


flash.text.TextField.prototype.set__type = function(param1) {
  this.flash_text_TextField__type = param1;
  if (this.flash_text_TextField__type == flash.text.TextFieldType.INPUT) {
    if (this.flash_text_TextField_input == null) {
      this.flash_text_TextField_input = document.createElement("input");
      this.flash_text_TextField_input.oninput = org.apache.royale.utils.Language.closure(this.flash_text_TextField_input_change, this, 'flash_text_TextField_input_change');
      this.flash_text_TextField_input.style.position = "absolute";
      this.flash_text_TextField_input.style.backgroundColor = "transparent";
      this.flash_text_TextField_input.style.borderWidth = 0;
      this.flash_text_TextField_input.style.outline = "none";
    }
  }
};


flash.text.TextField.prototype.get__wordWrap = function() {
  return this.flash_text_TextField__wordWrap;
};


flash.text.TextField.prototype.set__wordWrap = function(param1) {
  this.flash_text_TextField__wordWrap = param1;
};


flash.text.TextField.prototype.get__width = function() {
  return this.autoSize == flash.text.TextFieldAutoSize.LEFT ? (this.textWidth + 4) : this.flash_text_TextField__width;
};


flash.text.TextField.prototype.set__width = function(value) {
  this.flash_text_TextField__width = value;
};


flash.text.TextField.prototype.get__height = function() {
  return this.autoSize == flash.text.TextFieldAutoSize.LEFT ? (this.textHeight + 2) : this.flash_text_TextField__height;
};


flash.text.TextField.prototype.set__height = function(value) {
  this.flash_text_TextField__height = value;
};


flash.text.TextField.prototype.get__useRichTextClipboard = function() {
  return false;
};


flash.text.TextField.prototype.set__useRichTextClipboard = function(param1) {
};


flash.text.TextField.prototype.set__cacheAsBitmap = function(value) {
  if (value && this.flash_text_TextField__type != flash.text.TextFieldType.INPUT) {
    var /** @type {flash.geom.Rectangle} */ bounds = this.getFullBounds(this);
    bounds.inflate(this.flash_text_TextField__filterOffsetX, this.flash_text_TextField__filterOffsetY);
    this.flash_text_TextField__cacheCanvas = document.createElement("canvas");
    this.flash_text_TextField__cacheCanvas.width = bounds.width;
    this.flash_text_TextField__cacheCanvas.height = bounds.height;
    this.flash_text_TextField__cacheCTX = this.flash_text_TextField__cacheCanvas.getContext('2d');
    this.flash_text_TextField__cacheOffsetX = bounds.width - bounds.right - this.x;
    this.flash_text_TextField__cacheOffsetY = bounds.height - bounds.bottom - this.y;
    if (this.parent) {
      this.flash_text_TextField__cacheOffsetX -= this.parent.x;
      this.flash_text_TextField__cacheOffsetY -= this.parent.y;
    }
    var /** @type {flash.geom.Matrix} */ mat = this.transform.concatenatedMatrix.clone();
    mat.translate(this.flash_text_TextField__cacheOffsetX, this.flash_text_TextField__cacheOffsetY);
    this.__draw(this.flash_text_TextField__cacheCTX, mat);
    this.flash_text_TextField__cacheImage.image = this.flash_text_TextField__cacheCanvas;
    this.updateTransforms();
    flash.text.TextField.superClass_.set__cacheAsBitmap.apply(this, [ value] );
  } else {
    this.flash_text_TextField__cacheCanvas = null;
    this.flash_text_TextField__cacheCTX = null;
  }
};


flash.text.TextField.prototype.get__cacheImage = function() {
  return this.flash_text_TextField__cacheImage;
};


flash.text.TextField.prototype.get__cacheOffsetX = function() {
  return this.flash_text_TextField__cacheOffsetX;
};


flash.text.TextField.prototype.get__cacheOffsetY = function() {
  return this.flash_text_TextField__cacheOffsetY;
};


Object.defineProperties(flash.text.TextField.prototype, /** @lends {flash.text.TextField.prototype} */ {
/**
 * @type {boolean}
 */
alwaysShowSelection: {
get: flash.text.TextField.prototype.get__alwaysShowSelection,
set: flash.text.TextField.prototype.set__alwaysShowSelection},
/**
 * @type {string}
 */
antiAliasType: {
get: flash.text.TextField.prototype.get__antiAliasType,
set: flash.text.TextField.prototype.set__antiAliasType},
/**
 * @type {string}
 */
autoSize: {
get: flash.text.TextField.prototype.get__autoSize,
set: flash.text.TextField.prototype.set__autoSize},
/**
 * @type {boolean}
 */
background: {
get: flash.text.TextField.prototype.get__background,
set: flash.text.TextField.prototype.set__background},
/**
 * @type {number}
 */
backgroundColor: {
get: flash.text.TextField.prototype.get__backgroundColor,
set: flash.text.TextField.prototype.set__backgroundColor},
/**
 * @type {boolean}
 */
border: {
get: flash.text.TextField.prototype.get__border,
set: flash.text.TextField.prototype.set__border},
/**
 * @type {number}
 */
borderColor: {
get: flash.text.TextField.prototype.get__borderColor,
set: flash.text.TextField.prototype.set__borderColor},
/**
 * @type {number}
 */
bottomScrollV: {
get: flash.text.TextField.prototype.get__bottomScrollV},
/**
 * @type {number}
 */
caretIndex: {
get: flash.text.TextField.prototype.get__caretIndex},
/**
 * @type {boolean}
 */
condenseWhite: {
get: flash.text.TextField.prototype.get__condenseWhite,
set: flash.text.TextField.prototype.set__condenseWhite},
/**
 * @type {flash.text.TextFormat}
 */
defaultTextFormat: {
get: flash.text.TextField.prototype.get__defaultTextFormat,
set: flash.text.TextField.prototype.set__defaultTextFormat},
/**
 * @type {boolean}
 */
embedFonts: {
get: flash.text.TextField.prototype.get__embedFonts,
set: flash.text.TextField.prototype.set__embedFonts},
/**
 * @type {string}
 */
gridFitType: {
get: flash.text.TextField.prototype.get__gridFitType,
set: flash.text.TextField.prototype.set__gridFitType},
/**
 * @type {number}
 */
length: {
get: flash.text.TextField.prototype.get__length},
/**
 * @type {string}
 */
textInteractionMode: {
get: flash.text.TextField.prototype.get__textInteractionMode},
/**
 * @type {number}
 */
maxChars: {
get: flash.text.TextField.prototype.get__maxChars,
set: flash.text.TextField.prototype.set__maxChars},
/**
 * @type {number}
 */
maxScrollH: {
get: flash.text.TextField.prototype.get__maxScrollH},
/**
 * @type {number}
 */
maxScrollV: {
get: flash.text.TextField.prototype.get__maxScrollV},
/**
 * @type {boolean}
 */
mouseWheelEnabled: {
get: flash.text.TextField.prototype.get__mouseWheelEnabled,
set: flash.text.TextField.prototype.set__mouseWheelEnabled},
/**
 * @type {boolean}
 */
multiline: {
get: flash.text.TextField.prototype.get__multiline,
set: flash.text.TextField.prototype.set__multiline},
/**
 * @type {number}
 */
numLines: {
get: flash.text.TextField.prototype.get__numLines},
/**
 * @type {boolean}
 */
displayAsPassword: {
get: flash.text.TextField.prototype.get__displayAsPassword,
set: flash.text.TextField.prototype.set__displayAsPassword},
/**
 * @type {string}
 */
restrict: {
get: flash.text.TextField.prototype.get__restrict,
set: flash.text.TextField.prototype.set__restrict},
/**
 * @type {number}
 */
scrollH: {
get: flash.text.TextField.prototype.get__scrollH,
set: flash.text.TextField.prototype.set__scrollH},
/**
 * @type {number}
 */
scrollV: {
get: flash.text.TextField.prototype.get__scrollV,
set: flash.text.TextField.prototype.set__scrollV},
/**
 * @type {boolean}
 */
selectable: {
get: flash.text.TextField.prototype.get__selectable,
set: flash.text.TextField.prototype.set__selectable},
/**
 * @type {string}
 */
selectedText: {
get: flash.text.TextField.prototype.get__selectedText},
/**
 * @type {number}
 */
selectionBeginIndex: {
get: flash.text.TextField.prototype.get__selectionBeginIndex},
/**
 * @type {number}
 */
selectionEndIndex: {
get: flash.text.TextField.prototype.get__selectionEndIndex},
/**
 * @type {number}
 */
sharpness: {
get: flash.text.TextField.prototype.get__sharpness,
set: flash.text.TextField.prototype.set__sharpness},
/**
 * @type {flash.text.StyleSheet}
 */
styleSheet: {
get: flash.text.TextField.prototype.get__styleSheet,
set: flash.text.TextField.prototype.set__styleSheet},
/**
 * @type {string}
 */
htmlText: {
get: flash.text.TextField.prototype.get__htmlText,
set: flash.text.TextField.prototype.set__htmlText},
/**
 * @type {string}
 */
text: {
get: flash.text.TextField.prototype.get__text,
set: flash.text.TextField.prototype.set__text},
/**
 * @type {number}
 */
textColor: {
get: flash.text.TextField.prototype.get__textColor,
set: flash.text.TextField.prototype.set__textColor},
/**
 * @type {number}
 */
textHeight: {
get: flash.text.TextField.prototype.get__textHeight},
/**
 * @type {number}
 */
textWidth: {
get: flash.text.TextField.prototype.get__textWidth},
/**
 * @type {number}
 */
thickness: {
get: flash.text.TextField.prototype.get__thickness,
set: flash.text.TextField.prototype.set__thickness},
/**
 * @type {string}
 */
type: {
get: flash.text.TextField.prototype.get__type,
set: flash.text.TextField.prototype.set__type},
/**
 * @type {boolean}
 */
wordWrap: {
get: flash.text.TextField.prototype.get__wordWrap,
set: flash.text.TextField.prototype.set__wordWrap},
/**
 * @type {number}
 */
width: {
get: flash.text.TextField.prototype.get__width,
set: flash.text.TextField.prototype.set__width},
/**
 * @type {number}
 */
height: {
get: flash.text.TextField.prototype.get__height,
set: flash.text.TextField.prototype.set__height},
/**
 * @type {boolean}
 */
useRichTextClipboard: {
get: flash.text.TextField.prototype.get__useRichTextClipboard,
set: flash.text.TextField.prototype.set__useRichTextClipboard},
/**
 * @type {boolean}
 */
cacheAsBitmap: {
get: flash.display.DisplayObject.prototype.get__cacheAsBitmap,
set: flash.text.TextField.prototype.set__cacheAsBitmap},
/**
 * @type {flash.display.BitmapData}
 */
cacheImage: {
get: flash.text.TextField.prototype.get__cacheImage},
/**
 * @type {number}
 */
cacheOffsetX: {
get: flash.text.TextField.prototype.get__cacheOffsetX},
/**
 * @type {number}
 */
cacheOffsetY: {
get: flash.text.TextField.prototype.get__cacheOffsetY}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
flash.text.TextField.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'TextField', qName: 'flash.text.TextField', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
flash.text.TextField.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'chars': { type: 'Array', get_set: function (/** flash.text.TextField */ inst, /** * */ v) {return v !== undefined ? inst.chars = v : inst.chars;}},
        'disWrapper': { type: 'flash.display.Sprite', get_set: function (/** flash.text.TextField */ inst, /** * */ v) {return v !== undefined ? inst.disWrapper = v : inst.disWrapper;}},
        '_textWidth': { type: 'int', get_set: function (/** flash.text.TextField */ inst, /** * */ v) {return v !== undefined ? inst._textWidth = v : inst._textWidth;}},
        '_textHeight': { type: 'int', get_set: function (/** flash.text.TextField */ inst, /** * */ v) {return v !== undefined ? inst._textHeight = v : inst._textHeight;}},
        'hasATag': { type: 'Boolean', get_set: function (/** flash.text.TextField */ inst, /** * */ v) {return v !== undefined ? inst.hasATag = v : inst.hasATag;}},
        'tagas': { type: 'Array', get_set: function (/** flash.text.TextField */ inst, /** * */ v) {return v !== undefined ? inst.tagas = v : inst.tagas;}}
      };
    },
    accessors: function () {
      return {
        'alwaysShowSelection': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'antiAliasType': { type: 'String', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'autoSize': { type: 'String', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'background': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'backgroundColor': { type: 'uint', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'border': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'borderColor': { type: 'uint', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'bottomScrollV': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'caretIndex': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'condenseWhite': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'defaultTextFormat': { type: 'flash.text.TextFormat', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'embedFonts': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'gridFitType': { type: 'String', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'length': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'textInteractionMode': { type: 'String', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'maxChars': { type: 'int', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'maxScrollH': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'maxScrollV': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'mouseWheelEnabled': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'multiline': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'numLines': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'displayAsPassword': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'restrict': { type: 'String', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'scrollH': { type: 'int', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'scrollV': { type: 'int', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'selectable': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'selectedText': { type: 'String', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'selectionBeginIndex': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'selectionEndIndex': { type: 'int', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'sharpness': { type: 'Number', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'styleSheet': { type: 'flash.text.StyleSheet', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'htmlText': { type: 'String', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'text': { type: 'String', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'textColor': { type: 'uint', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'textHeight': { type: 'Number', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'textWidth': { type: 'Number', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'thickness': { type: 'Number', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'type': { type: 'String', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'wordWrap': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'width': { type: 'Number', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'height': { type: 'Number', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'useRichTextClipboard': { type: 'Boolean', access: 'readwrite', declaredBy: 'flash.text.TextField'},
        'cacheAsBitmap': { type: 'Boolean', access: 'writeonly', declaredBy: 'flash.text.TextField'},
        'cacheImage': { type: 'flash.display.BitmapData', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'cacheOffsetX': { type: 'Number', access: 'readonly', declaredBy: 'flash.text.TextField'},
        'cacheOffsetY': { type: 'Number', access: 'readonly', declaredBy: 'flash.text.TextField'}
      };
    },
    methods: function () {
      return {
        'TextField': { type: '', declaredBy: 'flash.text.TextField'},
        '|isFontCompatible': { type: 'Boolean', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'String', false ,'String', false ]; }},
        'appendText': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'String', false ]; }},
        '__updateGL': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'flash.__native.GLCanvasRenderingContext2D', false ]; }},
        'getBounds': { type: 'flash.geom.Rectangle', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }},
        'getFullBounds': { type: 'flash.geom.Rectangle', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'flash.display.DisplayObject', false ]; }},
        'getCharBoundaries': { type: 'flash.geom.Rectangle', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getCharIndexAtPoint': { type: 'int', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'getFirstCharInParagraph': { type: 'int', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getLineIndexAtPoint': { type: 'int', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'getLineIndexOfChar': { type: 'int', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getLineLength': { type: 'int', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getLineMetrics': { type: 'flash.text.TextLineMetrics', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getLineOffset': { type: 'int', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getLineText': { type: 'String', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getParagraphLength': { type: 'int', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ]; }},
        'getTextFormat': { type: 'flash.text.TextFormat', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', true ,'int', true ]; }},
        'getTextRuns': { type: 'Array', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', true ,'int', true ]; }},
        'getRawText': { type: 'String', declaredBy: 'flash.text.TextField'},
        'replaceSelectedText': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'String', false ]; }},
        'replaceText': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ,'int', false ,'String', false ]; }},
        'setSelection': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'int', false ,'int', false ]; }},
        'setTextFormat': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'flash.text.TextFormat', false ,'int', true ,'int', true ]; }},
        'getImageReference': { type: 'flash.display.DisplayObject', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'String', false ]; }},
        '__update': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'CanvasRenderingContext2D', false ]; }},
        '__updateCanvas': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'CanvasRenderingContext2D', false ]; }},
        '__draw': { type: 'void', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'CanvasRenderingContext2D', false ,'flash.geom.Matrix', false ]; }},
        'hitTestPoint': { type: 'Boolean', declaredBy: 'flash.text.TextField', parameters: function () { return [ 'Number', false ,'Number', false ,'Boolean', true ]; }},
        '__getRect': { type: 'flash.geom.Rectangle', declaredBy: 'flash.text.TextField'}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
flash.text.TextField.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
flash.text.TextField.prototype.ROYALE_INITIAL_STATICS = Object.keys(flash.text.TextField);
