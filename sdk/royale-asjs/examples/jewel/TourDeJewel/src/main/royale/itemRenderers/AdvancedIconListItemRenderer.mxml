<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<j:ListItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:js="library://ns.apache.org/royale/basic"
    xmlns="http://www.w3.org/1999/xhtml">

    <fx:Script>
        <![CDATA[
			import org.apache.royale.collections.ICollectionView;
			import org.apache.royale.jewel.List;
			import org.apache.royale.jewel.beads.views.ListView;

			import vos.DetailIconListVO;

            [Bindable("dataChange")]
            public function get iconListItem():DetailIconListVO
            {
                return data as DetailIconListVO;
            }

            [Bindable("dataChange")]
            public function get colorClass():String {
                var item:DetailIconListVO = data as DetailIconListVO;
                return getItemClassname(item)
            }

            private function mutateData():void
			{
                var view:ListView = this.itemRendererOwnerView as ListView;
				if (view) {
					var host:List = view.host as List;
					if (host) {
                       var collection:ICollectionView = host.dataProvider as ICollectionView;
                        if (collection) {
                            iconListItem.componentSet = (iconListItem.componentSet == 'Jewel') ? 'Basic' : 'Jewel';
                            collection.itemUpdated(iconListItem);
                            //fake a dataChange to force update the colorClass of this renderer
                            dispatchEvent(new Event('dataChange'))
                        }
                        if (host.selectedItem == data) {
                            //fake a selectionChange to trigger selection level bindings
                            host.dispatchEvent(new Event('selectionChanged'));
                        }
                    }
                }
            }

            public function getItemClassname(item:DetailIconListVO):String
            {
                var colorClass:String;
                if (item) {
                    switch(item.componentSet) {
                        case "Jewel":
                            colorClass = 'jewelItem';
                            break;
                        case "Basic":
                            colorClass = 'basicItem';
                            break;
                        default:
                            colorClass = '';
                            break;
                    }
                } else {
                    colorClass = '';
                }
                return colorClass;
            }
		]]>
    </fx:Script>

    <j:beads>
        <js:ItemRendererDataBinding/>
        <j:HorizontalLayout gap="8" itemsVerticalAlign="itemsCenter"/>
    </j:beads>

    <js:MaterialIcon text="{iconListItem.icon}"
            visible="{iconListItem.icon != null}"
            className="{colorClass}"
            click="mutateData()"/>

    <j:Label html="{text}" multiline="true"/>

</j:ListItemRenderer>
