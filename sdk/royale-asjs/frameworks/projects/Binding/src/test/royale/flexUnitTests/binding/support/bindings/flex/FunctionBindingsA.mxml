<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<s:HGroup  xmlns:fx="http://ns.adobe.com/mxml/2009"
            xmlns:s="library://ns.adobe.com/flex/spark"
            implements="flexUnitTests.binding.support.IBindingTest"
            xmlns:mx="library://ns.adobe.com/flex/mx"
            xmlns:bindables="flexUnitTests.binding.support.bindings.bindables.*"
            initialize="initCompleteHandler()">


    <fx:Declarations>
        <bindables:OneLayerBindable id="bindable1" />
        <bindables:TwoLayerBindable id="bindable2" >
            <bindables:bindableOne>
                <bindables:OneLayerBindable bindableString="deepBindable"/>
            </bindables:bindableOne>
        </bindables:TwoLayerBindable>
        <fx:Object id="destinationObject"
                   something="true"
                   destString="{bindable1.getSomething()}"
                   altString="{bindable1.getSomethingBasedOn(bindable2.toggle)}"
                   >
            <fx:sub>
                <fx:Object  deepLowerLevelString0="{bindable1.getSomething()}"
                            deepLowerLevelString1="{bindable2.bindableOne.getSomething()}"
                            deepLowerLevelString2="{bindable2.bindableOne.getSomethingBasedOn(bindable2.toggle)}"
                />
            </fx:sub>
        </fx:Object>


    </fx:Declarations>
    <fx:Script>
        <![CDATA[

        import flash.utils.getQualifiedClassName;


        //IBindingTest methods
        public function get testName():String {

            return getQualifiedClassName(this);
        }

        public function get internalTestCount():uint {
            return getTests().length;
        }

        public function setInboundValue(value:*, internalTestNum:uint = 0):void {
            try{
                getTests()[internalTestNum]['setVal'](value)
            } catch(e:Error) {
                e.message = "[fail in internal test "+internalTestNum +"]:" +e.message;
                throw e;
            }
        }

        public function getBindingResultValue(internalTestNum:uint = 0):* {
            var result:*;
            try{
                result = getTests()[internalTestNum]['getVal']()
            } catch(e:Error) {
                e.message = "[fail in internal test "+internalTestNum +"]:" +e.message;
                throw e;
            }
            return result;
        }

        public function getValue(something:*):*{
            return 'cat'
        }

        public static function SOMETHING():String{
            return 'something';
        }

        public function getFunctParams():Function{
            return function(test:Boolean=false):Array{
                return [bindable2.toggle, getValue('blueberry'), SOMETHING(), bindable1.getSomething()];
            }
        }

        private var _tests:Array;
        //only one internal test
        private function getTests():Array {
            if (!_tests) {
                _tests = [
                        //check start values
                    { //test 0 String
                        'setVal': function (value:*):void {
                            //do nothing
                        },
                        'getVal': function ():* {
                            return destinationObject.destString;
                        }
                    },
                    { //test 1 String
                        'setVal': function (value:*):void {
                            //do nothing
                        },
                        'getVal': function ():* {
                            return testLabel1.text;
                        }
                    },
                    { //test 2 String
                        'setVal': function (value:*):void {
                            //do nothing
                        },
                        'getVal': function ():* {
                            return destinationObject.altString;
                        }
                    },
                    { //test 3 String
                        'setVal': function (value:*):void {
                            //do nothing
                        },
                        'getVal': function ():* {
                            return testLabel2.text;
                        }
                    }
                    ,
                    { //test 4 String
                        'setVal': function (value:*):void {
                            //do nothing
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.deepLowerLevelString0;
                        }
                    },
                    { //test 5 String
                        'setVal': function (value:*):void {
                            //do nothing
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.deepLowerLevelString1
                        }
                    }
                    ,
                    { //test 6String
                        'setVal': function (value:*):void {
                            //do nothing
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.deepLowerLevelString2
                        }
                    },
                    { //test 7 String
                        'setVal': function (value:*):void {
                            bindable1.bindableBoolean = value;
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.deepLowerLevelString2
                        }
                    },
//now actually do some change based testing
                    { //test 8 String
                        'setVal': function (value:*):void {
                           bindable1.bindableBoolean = value;
                        },
                        'getVal': function ():* {
                            return destinationObject.destString;
                        }
                    },
                    { //test 9 String
                        'setVal': function (value:*):void {
                            bindable1.bindableBoolean = value;
                        },
                        'getVal': function ():* {
                            return testLabel1.text;
                        }
                    },
                    { //test 10 String
                        'setVal': function (value:*):void {
                            bindable2.toggle = value;
                        },
                        'getVal': function ():* {
                            return destinationObject.altString;
                        }
                    },
                    { //test 11 String
                        'setVal': function (value:*):void {
                            bindable2.toggle = value;
                        },
                        'getVal': function ():* {
                            return testLabel2.text;
                        }
                    },
                    { //test 12 String deeper destination
                        'setVal': function (value:*):void {
                            bindable1.bindableBoolean = value;
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.deepLowerLevelString0;
                        }
                    },
                    //now some of the deeper source bindings, and deeper desintations (in some cases)
                    { //test 13 String
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableBoolean = value;
                        },
                        'getVal': function ():* {
                            return testLabel3.text;
                        }
                    }
                    ,
                    { //test 14 String
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableBoolean = value;
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.deepLowerLevelString1;
                        }
                    },
                    { //test 15 String
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableBoolean = value;
                        },
                        'getVal': function ():* {
                            return testLabel3.text;
                        }
                    }
                    ,
                    { //test 16 String
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableBoolean = value;
                            bindable2.toggle = value;
                        },
                        'getVal': function ():* {
                            return destinationObject.sub.deepLowerLevelString2
                        }
                    },
                    { //test 17 String
                        'setVal': function (value:*):void {
                            bindable2.bindableOne.bindableBoolean = value;
                            bindable2.toggle = value;
                        },
                        'getVal': function ():* {
                            return testLabel4.text;
                        }
                    }


                ]
            }
            return _tests;
        }


        private function initCompleteHandler():void {
           // trace('initCompleteHandler', this);
        }

        [Bindable]
        public var labelText:String;
        ]]>
    </fx:Script>


    <mx:Label id="testLabel1" text="{bindable1.getSomething()}" />
    <mx:Label id="testLabel2" text="{bindable1.getSomethingBasedOn(bindable2.toggle)}" />
    <mx:Label id="testLabel3" text="{bindable2.bindableOne.getSomething()}" />
    <mx:Label id="testLabel4" text="{bindable2.bindableOne.getSomethingBasedOn(bindable2.toggle)}" />
</s:HGroup>
