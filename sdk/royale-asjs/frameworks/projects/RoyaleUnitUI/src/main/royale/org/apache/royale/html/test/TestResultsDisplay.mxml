<?xml version="1.0" encoding="utf-8"?>
<!---
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
-->
<js:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:js="library://ns.apache.org/royale/basic"
	xmlns:models="org.apache.royale.html.test.models.*">
	<js:beads>
		<js:ContainerDataBinding/>
	</js:beads>
	<fx:Style>
		.result-stack {
			font-size: 12px;
			font-family: monospace;
		}
	</fx:Style>


	<fx:Script>
		<![CDATA[
		import org.apache.royale.collections.ArrayListView;
		import org.apache.royale.events.Event;
		import org.apache.royale.test.runners.notification.Failure;
		import org.apache.royale.test.runners.notification.Result;
		import org.apache.royale.html.test.models.UITestVO;
		import org.apache.royale.test.AssertionError;

		[Bindable]
		public var displayResult:UITestVO;

		private function getResultType(item:UITestVO):String
		{
			if(item.active)
			{
				return "Active";
			}
			if(item.ignored)
			{
				return "Ignored";
			}
			if(item.failure)
			{
				if(item.failure.exception is AssertionError)
				{
					return "Assertion Failed";
				}
				return "Exception";
			}
			return "Passed";
		}

		private function getFailureDetails(item:UITestVO):String
		{
			if(item.failure)
			{
				return item.failure.stackTrace;
			}
			return "";
		}


		]]>
	</fx:Script>

	<js:VGroup percentWidth="100" percentHeight="100" visible="{!displayResult}">
		<js:Label text="No test selected" />
	</js:VGroup>
	<js:VGroup  percentWidth="100" percentHeight="100" visible="{displayResult}">

		<js:Label text="Function:"/>
		<js:Label text="{displayResult.functionName}"/>

		<js:Spacer height="10"/>

		<js:Label text="Test Case:"/>
		<js:Label text="{displayResult.testCaseName}"/>

		<js:Spacer height="10"/>

		<js:Label text="Result:"/>
		<js:Label text="{getResultType(displayResult)}"/>

		<js:Spacer height="10"/>

		<js:VGroup visible="{displayResult.failure}">
			<js:Label text="Stack Trace:"/>
			<js:MultilineLabel text="{getFailureDetails(displayResult)}"
							   className="result-stack"
							   percentWidth="100" style="white-space:pre;overflow-x:auto"/>
		</js:VGroup>
	</js:VGroup>

</js:Panel>